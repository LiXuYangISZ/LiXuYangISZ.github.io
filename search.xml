<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一、短信登录</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC02%E7%AB%A0_%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC02%E7%AB%A0_%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1、导入黑马点评项目"><a href="#1-1、导入黑马点评项目" class="headerlink" title="1.1、导入黑马点评项目"></a>1.1、导入黑马点评项目</h2><h3 id="1-1-1-、导入SQL"><a href="#1-1-1-、导入SQL" class="headerlink" title="1.1.1 、导入SQL"></a>1.1.1 、导入SQL</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301745969.png" alt="1653057872536"></p><h3 id="1-1-2、有关当前模型"><a href="#1-1-2、有关当前模型" class="headerlink" title="1.1.2、有关当前模型"></a>1.1.2、有关当前模型</h3><p>手机或者app端发起请求，请求我们的nginx服务器，&#x3D;&#x3D;nginx&#x3D;&#x3D;基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也&#x3D;&#x3D;可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器&#x3D;&#x3D;，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。</p><p>在tomcat支撑起并发流量后，我们如果让tomcat直接去访问Mysql，根据经验Mysql企业级服务器只要上点并发，一般是16或32 核心cpu，32 或64G内存，像企业级mysql加上固态硬盘能够支撑的并发，大概就是4000起~7000左右，上万并发， 瞬间就会让Mysql服务器的cpu，硬盘全部打满，容易崩溃，所以我们在高并发场景下，会选择使用<strong>mysql集群</strong>，同时为了进一步降低Mysql的压力，同时增加访问的性能，我们也会加入Redis，同时使用<strong>Redis集群</strong>使得Redis对外提供更好的服务。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746942.png" alt="1653059409865"></p><h3 id="1-1-3、导入后端项目"><a href="#1-1-3、导入后端项目" class="headerlink" title="1.1.3、导入后端项目"></a>1.1.3、导入后端项目</h3><p>在资料中提供了一个项目源码：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746489.png" alt="image-20221123234818386"></p><h3 id="1-1-4、导入前端工程"><a href="#1-1-4、导入前端工程" class="headerlink" title="1.1.4、导入前端工程"></a>1.1.4、导入前端工程</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746760.png"></p><h3 id="1-1-5-运行前端项目"><a href="#1-1-5-运行前端项目" class="headerlink" title="1.1.5 运行前端项目"></a>1.1.5 运行前端项目</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746471.png" alt="image-20221123235538872"></p><h2 id="1-2-、基于Session实现登录流程"><a href="#1-2-、基于Session实现登录流程" class="headerlink" title="1.2 、基于Session实现登录流程"></a>1.2 、基于Session实现登录流程</h2><p><strong>发送验证码：</strong></p><p>用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号</p><p>如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户</p><p><strong>短信验证码登录、注册：</strong></p><p>用户将验证码和手机号进行输入，后台从session中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到session中，方便后续获得当前登录信息</p><p><strong>校验登录状态:</strong></p><p>用户在请求时候，&#x3D;&#x3D;会从cookie中携带者JsessionId到后台&#x3D;&#x3D;，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并且放行</p><blockquote><p><strong>补充：</strong>    <strong><font color=red>为什么要使用ThreadLocal？</font></strong><br>ThreadLoal是线程独享的，每个进入Tomcat的请求都对应着一个线程，将来ThreadLocal会在线程内开辟一片空间来保存用户信息，这些线程互不干扰.。这样的话，不同的用户访问相同的Controller都有自己的线程，也就会有自己的ThreadLocal信息，大家互不干扰。<br><strong>如何进行退出呢？</strong><br>在拦截器的最后一个方法中，清空thread local的信息，第一可以做到退出登录，第二可以防止内存泄露</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746407.png" alt="image-20221123235626516"></p><h2 id="1-3-、实现发送短信验证码功能"><a href="#1-3-、实现发送短信验证码功能" class="headerlink" title="1.3 、实现发送短信验证码功能"></a>1.3 、实现发送短信验证码功能</h2><p><strong>页面流程</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746999.png" alt="1653067054461"></p><blockquote><p><strong><font color=red>问题：为啥后端接口是8081，但是请求确实8080呢？</font></strong></p><p>这里为了解决跨域问题请求位于8080的Nginx服务,Nginx的代理再去请求8081Tomcat服务器</p></blockquote><p><strong>具体代码如下</strong></p><p><strong>贴心小提示：</strong></p><p>具体逻辑上文已经分析，我们仅仅只需要按照提示的逻辑写出代码即可。</p><ul><li>发送验证码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.校验手机号</span></span><br><span class="line">    <span class="keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">        <span class="comment">// 2.如果不符合，返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.如果符合，生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.保存验证码到session</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;code&quot;</span>+phone,code);</span><br><span class="line">    <span class="comment">// 5.发送验证码</span></span><br><span class="line">    String[] phoneNumber = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">    String[] templateParam = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">    phoneNumber[<span class="number">0</span>] = phone;</span><br><span class="line">    templateParam[<span class="number">0</span>] = code;</span><br><span class="line">    templateParam[<span class="number">1</span>] = <span class="string">&quot;5&quot;</span>;</span><br><span class="line">    SendSmsUtil.sendSms(phoneNumber,templateParam);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.验证手机号是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.查询手机号对应的验证码是否一致（存在）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;code&quot;</span> + loginForm.getPhone());</span><br><span class="line">    <span class="keyword">if</span>(cacheCode != <span class="literal">null</span> &amp;&amp; !cacheCode.equals(code))&#123;</span><br><span class="line">        <span class="comment">// 3.不一致，报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.一致，根据手机号查询对应的用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">    <span class="comment">// 5.判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 6.不存在，则创建新用户，并保存到数据库</span></span><br><span class="line">        user  = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 7.存在，则保存用户到session</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>&#x3D;&#x3D;这里是否需要返回登录成功的凭证信息呢？&#x3D;&#x3D;<br>不需要，因为登录或注册后会在session中存放user,一个session对应一个sessionID，sessionID会被自动放到Cookie，下次请求时，Cookie会带着JSessionID找到对应的session</p></blockquote><h2 id="1-4、实现登录拦截功能"><a href="#1-4、实现登录拦截功能" class="headerlink" title="1.4、实现登录拦截功能"></a>1.4、实现登录拦截功能</h2><p><strong>温馨小贴士：tomcat的运行原理</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746255.png" alt="1653068196656"></p><p>当用户发起请求时，会访问我们像tomcat注册的端口，任何程序想要运行，都需要有一个线程对当前端口号进行监听，tomcat也不例外，当监听线程知道用户想要和tomcat连接连接时，那会由监听线程创建socket连接，socket都是成对出现的，用户通过socket像互相传递数据，当tomcat端的socket接受到数据后，此时监听线程会从tomcat的线程池中取出一个线程执行用户请求，在我们的服务部署到tomcat后，线程会找到用户想要访问的工程，然后用这个线程转发到工程中的controller，service，dao中，并且访问对应的DB，在用户执行完请求后，再统一返回，再找到tomcat端的socket，再将数据写回到用户端的socket，完成请求和响应</p><p>通过以上讲解，我们可以得知 每个用户其实对应都是去找tomcat线程池中的一个线程来完成工作的， 使用完成后再进行回收，既然每个请求都是独立的，所以在每个用户去访问我们的工程时，我们可以使用threadlocal来做到线程隔离，每个线程操作自己的一份数据</p><p><strong>温馨小贴士：关于threadlocal</strong></p><p>如果小伙伴们看过threadLocal的源码，你会发现在threadLocal中，无论是他的put方法和他的get方法， 都是&#x3D;&#x3D;先从获得当前用户的线程，然后从线程中取出线程的成员变量map&#x3D;&#x3D;，只要线程不一样，map就不一样，所以可以通过这种方式来做到&#x3D;&#x3D;线程隔离&#x3D;&#x3D;</p><blockquote><p><strong><font color=red>为什么要使用拦截器呢？</font></strong></p><p>如图：如果没有拦截器，那么对于每个Controller都需要一个校验用户是否登录的逻辑代码，<strong>代码冗余较大</strong>。所有的请求到Controller之前可以被拦截器或者过滤器 拦截，这样的话只要我们在拦截器这一步进行校验就不用再进入Controller了，<strong>大大减少了性能损耗</strong>！</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746615.png" alt="image-20221124003222322"></p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746431.png" alt="1653068874258"></p><p>拦截器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 登录拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/24 1:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在进入Controller之前会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 2.获取session中的用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.如果用户不存在，则拦截,返回401状态码</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.如果存在，则保存到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser((User) user);</span><br><span class="line">        <span class="comment">// 5.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行完Controller里面的逻辑后执行下面代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让拦截器生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MVC配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/24 1:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 增加登录拦截器，并对不必要的请求路径排除拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5、隐藏用户敏感信息"><a href="#1-5、隐藏用户敏感信息" class="headerlink" title="1.5、隐藏用户敏感信息"></a>1.5、隐藏用户敏感信息</h2><p>我们通过浏览器观察到此时用户的全部信息都在，这样极为不靠谱，所以我们应当在返回用户信息之前，将用户的敏感信息进行隐藏，采用的核心思路就是书写一个UserDto对象，这个UserDto对象就没有敏感信息了，我们在返回前，将有用户敏感信息的User对象转化成没有敏感信息的UserDto对象，那么就能够避免这个尴尬的问题了</p><p><strong>在登录方法处修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 7.存在，则保存用户到session</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, BeanUtil.copyProperties(user,UserDTO.class));</span><br></pre></td></tr></table></figure><p><strong>在拦截器处：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.如果存在，则保存到ThreadLocal</span></span><br><span class="line">UserHolder.saveUser((UserDTO) user);</span><br></pre></td></tr></table></figure><p><strong>在UserHolder处：将user对象换成UserDTO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDTO user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端登录结果：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746216.png" alt="image-20221124230507123"></p><h2 id="1-6、session共享问题"><a href="#1-6、session共享问题" class="headerlink" title="1.6、session共享问题"></a>1.6、session共享问题</h2><p><strong>核心思路分析：</strong></p><p>每个tomcat中都有一份属于自己的session,假设用户第一次访问第一台tomcat，并且把自己的信息存放到第一台服务器的session中，但是第二次这个用户访问到了第二台tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的session，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是&#x3D;&#x3D;session拷贝&#x3D;&#x3D;，就是说虽然每个tomcat上都有不同的session，但是每当任意一台服务器的session修改时，都会同步给其他的Tomcat服务器的session，这样的话，就可以实现session的共享了</p><p>但是这种方案具有两个大问题</p><p>1、每台服务器中都有完整的一份session数据，服务器压力过大。</p><p>2、session拷贝数据时，可能会出现延迟</p><p>所以咱们后来采用的方案都是基于redis来完成，我们把session换成redis，redis数据本身就是共享的，就可以避免session共享的问题了</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746807.png" alt="1653069893050"></p><h2 id="1-7-Redis代替session的业务流程"><a href="#1-7-Redis代替session的业务流程" class="headerlink" title="1.7 Redis代替session的业务流程"></a>1.7 Redis代替session的业务流程</h2><h3 id="1-7-1、设计key的结构"><a href="#1-7-1、设计key的结构" class="headerlink" title="1.7.1、设计key的结构"></a>1.7.1、设计key的结构</h3><p>首先我们要思考一下利用redis来存储数据，那么到底使用哪种结构呢？由于存入的数据比较简单，我们可以考虑使用String，或者是使用哈希，如下图。</p><ul><li><p>如果使用String，注意他的value，会多占用一点空间（比如标点，括号等），而且字段修改，只能对Value整体修改，然后再设置进去</p></li><li><p>如果使用哈希，则他的value中只会存储数据本身，而且可以做到精确的修改Value中的某个字段（name,age）</p><p>如果不是特别在意内存，其实使用String就可以啦。</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746631.png" alt="1653319261433"></p><h3 id="1-7-2、设计key的具体细节"><a href="#1-7-2、设计key的具体细节" class="headerlink" title="1.7.2、设计key的具体细节"></a>1.7.2、设计key的具体细节</h3><p>所以我们可以使用String结构，就是一个简单的key，value键值对的方式，但是关于key的处理，session他是每个用户都有自己的session（因为是在ThreadLocal中的），但是redis的key是共享的，咱们就不能使用code了</p><p>在设计这个key的时候，我们之前讲过需要满足两点</p><p>1、key要具有唯一性</p><p>2、key要方便携带</p><p>如果我们采用phone：手机号这个的数据来存储当然是可以的，但是如果把这样的敏感数据存储到redis中并且从页面中带过来毕竟不太合适(信息容易泄露)，所以我们在后台生成一个&#x3D;&#x3D;随机串token&#x3D;&#x3D;，然后让前端带来这个token就能完成我们的整体逻辑了</p><h3 id="1-7-3、整体访问流程"><a href="#1-7-3、整体访问流程" class="headerlink" title="1.7.3、整体访问流程"></a>1.7.3、整体访问流程</h3><p>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，当我们校验用户是否登录时，会去携带着token进行访问，从redis中取出token对应的value，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到threadLocal中，并且放行。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746208.png" alt="1653319474181"></p><p><strong><font color=red>session和Redis 验证用户登录原理的区别</font></strong></p><ul><li><p>之前我们使用session进行登录的时候，当把User存到session后，会自动把SessionID存到Cookie中，下次发送请求的时候会携带着。通过SessionId便可知道用户是否登录。</p></li><li><p>当我们使用Redis后，key &#x3D;&#x3D; 》token:随机字符串，value是User。这时 &#x3D;&#x3D;为了让用户下次发送请求携带着key&#x3D;&#x3D;,就需要前端特殊处理了~</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746581.png" alt="image-20221124235455820"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301746110.png" alt="image-20221125000104800"></p><h2 id="1-8-基于Redis实现短信登录"><a href="#1-8-基于Redis实现短信登录" class="headerlink" title="1.8 基于Redis实现短信登录"></a>1.8 基于Redis实现短信登录</h2><p>这里具体逻辑就不分析了，之前咱们已经重点分析过这个逻辑啦。</p><p><strong>UserServiceImpl代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.验证手机号是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.查询手机号对应的验证码是否一致（存在）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> (String) stringRedisTemplate.opsForValue().get(RedisConstants.LOGIN_CODE_KEY + phone);</span><br><span class="line">    <span class="keyword">if</span> (cacheCode != <span class="literal">null</span> &amp;&amp; !cacheCode.equals(code)) &#123;</span><br><span class="line">        <span class="comment">// 3.不一致，报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.一致，根据手机号查询对应的用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">    <span class="comment">// 5.判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 6.不存在，则创建新用户，并保存到数据库</span></span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.存在，则保存用户到Redis</span></span><br><span class="line">    <span class="comment">// 7.1 随机生成token,作为登录令牌   参数：生成一段没有连接符的随机数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 7.2 准备用户基本信息</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    <span class="comment">//注意：这里如果直接这样写 BeanUtil.beanToMap(userDTO) 会报错: Long cannot be cast to String。</span></span><br><span class="line">    <span class="comment">//     因为我们使用的是stringRedisTemplate,里面存的map的key和value都必须是String.</span></span><br><span class="line">    <span class="comment">//解决办法：1.不使用该方法，而是手动把userDTO放入Map&lt;String,String&gt;，该转换的手动转</span></span><br><span class="line">    <span class="comment">//        2.自定义value的转换规则，可以通过 BeanUtil.beanToMap(obj,map,copyOptions)</span></span><br><span class="line">    Map &lt;String, Object&gt; map = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span> &lt;&gt;(), CopyOptions.create()</span><br><span class="line">                                                  .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                                                  .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));</span><br><span class="line">    <span class="comment">// 7.3 保存到Redis  （这里也可使用put（），但是Value中的key和value是分开放的，需要多次和数据库交互~）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY + token;</span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(tokenKey, map);</span><br><span class="line">    <span class="comment">// 7.4 设置token有效期</span></span><br><span class="line">    stringRedisTemplate.expire(tokenKey, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.把token返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LoginInterceptor代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 登录拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/24 1:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为LoginInterceptor是new 出来的，并没有交给Spring容器管理，所以我们不能使用Autowire或者<span class="doctag">@Resource</span>注入，</span></span><br><span class="line"><span class="comment">     * 这里可以使用构造函数，在使用到拦截器的时候，传入需要的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在进入Controller之前会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 不存在</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.根据token获取用户信息</span></span><br><span class="line">        Map &lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(RedisConstants.LOGIN_USER_KEY+token);</span><br><span class="line">        <span class="keyword">if</span>(userMap==<span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.如果存在，则保存到ThreadLocal</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.刷新用户token的有效时间 (只要用户在这段时间内用户在线，那么就不会过期)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY+token;</span><br><span class="line">        stringRedisTemplate.expire(tokenKey,RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行完Controller里面的逻辑后执行下面代码</span></span><br><span class="line"><span class="comment">     */</span>    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-解决状态登录刷新问题"><a href="#1-9-解决状态登录刷新问题" class="headerlink" title="1.9 解决状态登录刷新问题"></a>1.9 解决状态登录刷新问题</h2><h3 id="1-9-1-初始方案思路总结："><a href="#1-9-1-初始方案思路总结：" class="headerlink" title="1.9.1 初始方案思路总结："></a>1.9.1 初始方案思路总结：</h3><p>在这个方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径（比如首页），那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301747398.png" alt="1653320822964"></p><h3 id="1-9-2-优化方案"><a href="#1-9-2-优化方案" class="headerlink" title="1.9.2 优化方案"></a>1.9.2 优化方案</h3><p>既然之前的拦截器无法对不需要拦截的路径生效，那么我们可以&#x3D;&#x3D;添加一个拦截器&#x3D;&#x3D;，在&#x3D;&#x3D;第一个拦截器中拦截所有的路径&#x3D;&#x3D;，把第二个拦截器做的事情放入到第一个拦截器中，同时&#x3D;&#x3D;刷新令牌&#x3D;&#x3D;（token）。因为第一个拦截器有了threadLocal的数据，所以此时&#x3D;&#x3D;第二个拦截器只需要判断拦截器中的user对象是否存在即可&#x3D;&#x3D;，完成整体拦截（这次拦截是对那些需要登录的资源）功能。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202211301747638.png" alt="1653320764547"></p><h3 id="1-9-3-代码"><a href="#1-9-3-代码" class="headerlink" title="1.9.3 代码"></a>1.9.3 代码</h3><p><strong>RefreshTokenInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 登录拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/24 1:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为RefreshTokenInterceptor是new 出来的，并没有交给Spring容器管理，所以我们不能使用Autowire或者<span class="doctag">@Resource</span>注入，</span></span><br><span class="line"><span class="comment">     * 这里可以使用构造函数，在使用到拦截器的时候，传入需要的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在进入Controller之前会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 此处return true是对的，若return false，第一次访问登录页面时就会被拦截；</span></span><br><span class="line">            <span class="comment">// 若return true，第一次访问登录页会进入Login拦截器，由于登录页为放行路径，放行~</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.根据token获取用户信息</span></span><br><span class="line">        Map &lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(RedisConstants.LOGIN_USER_KEY+token);</span><br><span class="line">        <span class="keyword">if</span>(userMap==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.如果存在，则保存到ThreadLocal</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.刷新用户token的有效时间 (只要用户在这段时间内用户在线，那么就不会过期)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY+token;</span><br><span class="line">        stringRedisTemplate.expire(tokenKey,RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行完Controller里面的逻辑后执行下面代码</span></span><br><span class="line"><span class="comment">     */</span>    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LoginInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 登录拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/24 1:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在进入Controller之前会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 如果没有登录则拦截</span></span><br><span class="line">        <span class="keyword">if</span>(UserHolder.getUser()==<span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用户已经登录则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;总结：Redis代替Session需要考虑的问题&#x3D;&#x3D;</p><ul><li>选择合适的数据结构<ul><li>比如为什么code选择用string，token选择用Hash</li></ul></li><li>选择合适的Key<ul><li>比如为什么验证码key是phone, token的key是一个随机字符串</li></ul></li><li>选择合适的存储力度<ul><li>比如我们存储的是UserDTO，相对于User把其中敏感的信息去掉，也可以节约内存空间</li></ul></li><li>选择合适的有效期</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、分布式锁</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC05%E7%AB%A0_%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC05%E7%AB%A0_%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="4、分布式锁"><a href="#4、分布式锁" class="headerlink" title="4、分布式锁"></a>4、分布式锁</h2><h3 id="4-1-、基本原理和实现方式对比"><a href="#4-1-、基本原理和实现方式对比" class="headerlink" title="4.1 、基本原理和实现方式对比"></a>4.1 、基本原理和实现方式对比</h3><p>分布式锁：&#x3D;&#x3D;满足分布式系·统或集群模式下多进程可见并且互斥的锁&#x3D;&#x3D;。</p><p>分布式锁的核心思想就是&#x3D;&#x3D;让大家都使用同一把锁&#x3D;&#x3D;，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217484.png" alt="image-20221220204024594"></p><p>那么分布式锁他应该满足一些什么样的条件呢？</p><ul><li><p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p></li><li><p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p></li><li><p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p></li><li><p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p></li><li><p>安全性：安全也是程序中必不可少的一环</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217312.png" alt="1653381992018"></p><p>常见的分布式锁有三种</p><p>Mysql：mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少见</p><p>Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用<code>setnx</code>这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</p><p>Zookeeper：zookeeper也是企业级开发中较好的一个实现分布式锁的方案，由于本套视频并不讲解zookeeper的原理和分布式锁的实现，所以不过多阐述</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217573.png" alt="1653382219377"></p><h3 id="4-2-、Redis分布式锁的实现核心思路"><a href="#4-2-、Redis分布式锁的实现核心思路" class="headerlink" title="4.2 、Redis分布式锁的实现核心思路"></a>4.2 、Redis分布式锁的实现核心思路</h3><p>实现分布式锁时需要实现的两个基本方法：</p><ul><li><p>获取锁：</p><ul><li><p>互斥：确保只能有一个线程获取锁</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217766.png" alt="image-20221220204244460"></p></li><li><p>非阻塞：尝试一次，成功返回true，失败返回false</p></li></ul></li><li><p>释放锁：</p><ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217550.png" alt="1653382669900"></p></li></ul><p><strong>核心思路：</strong></p><p>我们利用redis 的<code>setNx </code>方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可(当然这里也可以直接进行返回~)</p><p> <img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217742.png" alt="1653382830810"></p><h3 id="4-3-实现分布式锁版本一"><a href="#4-3-实现分布式锁版本一" class="headerlink" title="4.3 实现分布式锁版本一"></a>4.3 实现分布式锁版本一</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217726.png" alt="image-20221220204155419"></p><p><font color=blue><strong>1、锁的基本接口</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 代表获取锁成功；false代表获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=blue><strong>2、SimpleRedisLock</strong></font></p><p>利用&#x3D;&#x3D;setnx方法进行加锁，同时增加过期时间，防止死锁&#x3D;&#x3D;，此方法可以保证加锁和增加过期时间具有原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取线程标示</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().</span><br><span class="line">                setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 记得 包装类型到基本类型转换时要注意 空指针问题</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>3、修改业务代码</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取优惠券信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> voucher.getBeginTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> voucher.getEndTime();</span><br><span class="line">    <span class="keyword">if</span>(beginTime.isAfter(LocalDateTime.now()) || endTime.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不再秒杀时段内！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span>(voucher.getStock() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">    <span class="comment">// 判断是否获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">        <span class="comment">// 获取锁失败，返回错误和重试</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取代理对象（只有通过代理对象调用方法，事务才会生效）</span></span><br><span class="line">        <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进行测试：</strong>分别在三个端口启动模拟集群的形式~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217175.png" alt="image-20221220225649952"></p><ul><li>创建三个请求并发送</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210218271.png" alt="image-20221220225838787"></p><ul><li><p>观察后台结果</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217638.png" alt="image-20221220230251399"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217247.png" alt="image-20221220230202928"></p></li></ul><p><strong>结论：</strong>分布式锁测试成功，达到了集群环境下 相同用户同一时间只有一个线程获取到锁~ 可以实现一户一单的情况，防止刷单~</p><h3 id="4-4-Redis分布式锁误删情况说明"><a href="#4-4-Redis分布式锁误删情况说明" class="headerlink" title="4.4 Redis分布式锁误删情况说明"></a>4.4 Redis分布式锁误删情况说明</h3><p>逻辑说明：</p><p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p><p>解决方案：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217840.png" alt="image-20221221000108203"></p><h3 id="4-5-解决Redis分布式锁误删问题"><a href="#4-5-解决Redis分布式锁误删问题" class="headerlink" title="4.5 解决Redis分布式锁误删问题"></a>4.5 解决Redis分布式锁误删问题</h3><p>需求：修改之前的分布式锁实现，满足：在获取锁时存入线程标示（可以用UUID表示）<br>在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p><ul><li>如果一致则释放锁</li><li>如果不一致则不释放锁</li></ul><p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217894.png" alt="1653387398820"></p><p>具体代码如下：加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程表示前缀</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>)+<span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX+Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().</span><br><span class="line">        setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 记得 包装类型到基本类型转换时要注意 空指针问题</span></span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX+Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().</span><br><span class="line">        setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 记得 包装类型到基本类型转换时要注意 空指针问题</span></span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>有关代码实操说明：</strong>&#x3D;&#x3D;</p><p>在我们修改完此处代码后，我们重启工程，然后启动三个线程。</p><ul><li>第一个线程持有锁后，手动释放锁，</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217733.png"></p><ul><li>第二个线程 此时进入到锁内部，再放行第一个线程，此时第一个线程由于锁的value值并非是自己，所以不能释放锁，也就无法删除别人的锁</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217613.png"></p><ul><li><p>当第二个线程里面的秒杀业务执行完，此时第二个线程能够正确释放锁~</p></li><li><p>在第二个线程执行期间，第三个线程会获取锁失败~ 如果第三个线程在第二个线程锁释放后，仍然可以获取锁、执行业务、释放锁~</p><p>通过这个案例初步说明我们解决了锁误删的问题~ </p><blockquote><p>注意：以上在同一时刻还是只能有一把锁存在，所以并不存在超卖的情况~</p></blockquote></li></ul><h3 id="4-6-分布式锁的原子性问题"><a href="#4-6-分布式锁的原子性问题" class="headerlink" title="4.6 分布式锁的原子性问题"></a>4.6 分布式锁的原子性问题</h3><p><font color=blue>更为极端的误删逻辑说明：</font></p><p>线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时出现了阻塞（比如GC），他的锁到期了~ 那么此时线程2进来，就可以重新获取锁，过了一段时间，线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，<strong>相当于条件判断并没有起到作用</strong>，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的&#x3D;&#x3D;判读锁，删除锁并不是原子性的&#x3D;&#x3D;，所以导致了刚才误删锁的发生~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217037.png" alt="image-20221221005109289"></p><h3 id="4-7-Lua脚本解决多条命令原子性问题"><a href="#4-7-Lua脚本解决多条命令原子性问题" class="headerlink" title="4.7 Lua脚本解决多条命令原子性问题"></a>4.7 Lua脚本解决多条命令原子性问题</h3><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%8D%E7%82%B9%E4%BB%8B%E7%BB%8DRedis%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%8C==%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8lua%E5%8E%BB%E6%93%8D%E4%BD%9Credis%EF%BC%8C%E5%8F%88%E8%83%BD%E4%BF%9D%E8%AF%81%E4%BB%96%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7==%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8B%BF%E9%94%81%E6%AF%94%E9%94%81%E5%88%A0%E9%94%81%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8A%A8%E4%BD%9C%E4%BA%86%EF%BC%8C%E4%BD%9C%E4%B8%BAJava%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%99%E4%B8%80%E5%9D%97%E5%B9%B6%E4%B8%8D%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A6%81%E6%B1%82%EF%BC%8C%E5%B9%B6%E4%B8%8D%E9%9C%80%E8%A6%81%E5%A4%A7%E5%AE%B6%E8%BF%87%E4%BA%8E%E7%B2%BE%E9%80%9A%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%96%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E5%8D%B3%E5%8F%AF%E3%80%82">https://www.runoob.com/lua/lua-tutorial.html，这里重点介绍Redis提供的调用函数，==我们可以使用lua去操作redis，又能保证他的原子性==，这样就可以实现拿锁比锁删锁是一个原子性动作了，作为Java程序员这一块并不作一个简单要求，并不需要大家过于精通，只需要知道他有什么作用即可。</a></p><p>这里重点介绍Redis提供的调用函数，语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;命令名称&#x27;</span>, <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;其它参数&#x27;</span>, ...)</span><br></pre></td></tr></table></figure><p>例如，我们要执行set name jack，则脚本是这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行 set name jack</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure><p>例如，我们要先执行set name Rose，再执行get name，则脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先执行 set name jack</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>)</span><br><span class="line"># 再执行 get name</span><br><span class="line"><span class="keyword">local</span> name = redis.call(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"># 返回</span><br><span class="line"><span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><p>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217783.png" alt="1653392181413"></p><p>例如，我们要执行 redis.call(‘set’, ‘name’, ‘jack’) 这个脚本，语法如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217430.png" alt="1653392218531"></p><p>如果脚本中的key、value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其它参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217463.png" alt="1653392438917"></p><p>接下来我们来回顾一下我们释放锁的逻辑：</p><p>​1、获取锁中的线程标示</p><p>​2、判断是否与指定的标示（当前线程标示）一致</p><p>​3、如果一致则释放锁（删除）</p><p>​4、如果不一致则什么都不做</p><p>如果用Lua脚本来表示则是这样的：</p><p>最终我们操作redis的拿锁比锁删锁的lua脚本就会变成这样</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 当前线程标示</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">--获取锁中的线程标示 get key</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>,key)</span><br><span class="line"><span class="comment">-- 比较线程标示与锁中的标示是否一致</span></span><br><span class="line"><span class="keyword">if</span>(id == threadId) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 释放锁 del key</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">------------------ 简化版本如下-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span></span><br><span class="line"><span class="comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 一致，则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不一致，则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="4-8-利用Java代码调用Lua脚本改造分布式锁"><a href="#4-8-利用Java代码调用Lua脚本改造分布式锁" class="headerlink" title="4.8 利用Java代码调用Lua脚本改造分布式锁"></a>4.8 利用Java代码调用Lua脚本改造分布式锁</h3><p>lua脚本本身并不需要大家花费太多时间去研究，只需要知道如何调用，大致是什么意思即可，所以在笔记中并不会详细的去解释这些lua表达式的含义。</p><p>我们的RedisTemplate中，可以利用execute方法去执行lua脚本，参数对应关系就如下图股</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212210217208.png" alt="1653393304844"></p><p><strong>Redis分布式锁代码改进</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RedisScript需要加载unlock.lua文件，为了避免每次释放锁时都加载，我们可以提前加载好，否则每次读取文件就会产生IO，效率很低</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">    UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用lua脚本</span></span><br><span class="line">    stringRedisTemplate.execute(</span><br><span class="line">            UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~</span></span><br></pre></td></tr></table></figure><p><strong>测试逻辑：</strong></p><p>第一个线程进来，得到了锁，手动删除锁，模拟锁超时了，其他线程会执行lua来抢锁，当第一天线程利用lua删除锁时，lua能保证他不能删除他的锁，第二个线程删除锁时，利用lua同样可以保证不会删除别人的锁，同时还能保证原子性。</p><p>&#x3D;&#x3D;至此，我们已经实现了一个生产可用的Redis分布式锁~&#x3D;&#x3D;</p><p><font color=blue><strong>总结：基于Redis的分布式锁实现思路</strong></font></p><ul><li>利用set nx ex获取锁，并设置过期时间，保存线程标示</li><li>释放锁时先判断线程标示是否与自己一致，一致则删除锁</li></ul><p>特性：</p><ul><li>利用set nx满足互斥性</li><li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用Redis集群保证高可用和高并发特性</li></ul><p>笔者总结：我们一路走来，利用添加过期时间，防止死锁问题的发生，但是有了过期时间之后，可能出现误删别人锁的问题，这个问题我们开始是利用删之前 通过拿锁，比锁，删锁这个逻辑来解决的，也就是删之前判断一下当前这把锁是否是属于自己的，但是现在还有原子性问题，也就是我们没法保证拿锁比锁删锁是一个原子性的动作，最后通过lua表达式来解决这个问题</p><p>但是目前还剩下一个问题锁不住，什么是锁不住呢，你想一想，如果当过期时间到了之后，我们可以给他续期一下，比如续个30s，就好像是网吧上网， 网费到了之后，然后说，来，网管，再给我来10块的，是不是后边的问题都不会发生了，那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission啦</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、商品查询缓存（缓存基本使用 | 缓存更新 | 缓存穿透 | 缓存雪崩 | 缓存击穿 | Redis缓存工具类）</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC03%E7%AB%A0_%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC03%E7%AB%A0_%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="2、商户查询缓存"><a href="#2、商户查询缓存" class="headerlink" title="2、商户查询缓存"></a>2、商户查询缓存</h2><h3 id="2-1-什么是缓存"><a href="#2-1-什么是缓存" class="headerlink" title="2.1 什么是缓存?"></a>2.1 什么是缓存?</h3><p><strong>前言</strong>:<strong>什么是缓存?</strong></p><p>就像自行车,越野车的避震器<img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213959.gif"></p><p>举个例子:越野车,山地自行车,都拥有”避震器”,<strong>防止</strong>车体加速后因惯性,在酷似”U”字母的地形上飞跃,硬着陆导致的<strong>损害</strong>,像个弹簧一样;</p><p>同样,实际开发中,系统也需要”避震器”,防止过高的数据访问猛冲系统,导致其操作线程无法及时处理信息而瘫痪;</p><p>这在实际开发中对企业讲,对产品口碑,用户评价都是致命的;所以企业非常重视缓存技术;</p><p><strong>缓存(<strong>Cache),就是数据交换的</strong>缓冲区</strong>,俗称的缓存就是<strong>缓冲区内的数据</strong>,一般从数据库中获取,存储于本地代码(例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1</span>:Static <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(); 本地用于高并发</span><br><span class="line"></span><br><span class="line">例<span class="number">2</span>:<span class="keyword">static</span> <span class="keyword">final</span> Cache&lt;K,V&gt; USER_CACHE = CacheBuilder.newBuilder().build(); 用于redis等缓存</span><br><span class="line"></span><br><span class="line">例<span class="number">3</span>:Static <span class="keyword">final</span> Map&lt;K,V&gt; map =  <span class="keyword">new</span> <span class="title class_">HashMap</span>(); 本地缓存</span><br></pre></td></tr></table></figure><p>由于其被<strong>Static</strong>修饰,所以随着类的加载而被加载到<strong>内存之中</strong>,作为本地缓存,由于其又被<strong>final</strong>修饰,所以其引用(例3:map)和对象(例3:new HashMap())之间的关系是固定的,不能改变,因此不用担心赋值(&#x3D;)导致缓存失效;</p><h4 id="2-1-1-为什么要使用缓存"><a href="#2-1-1-为什么要使用缓存" class="headerlink" title="2.1.1 为什么要使用缓存"></a>2.1.1 为什么要使用缓存</h4><p>一句话:因为&#x3D;&#x3D;<strong>速度快,好用</strong>&#x3D;&#x3D;</p><p>缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低<strong>用户访问并发量带来的</strong>服务器读写压力</p><p>实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来作为”避震器”,系统是几乎撑不住的,所以企业会大量运用到缓存技术;</p><p>但是缓存也会增加代码复杂度和运营的成本:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213234.png" alt="image-20221127121416381"></p><h4 id="2-1-2-如何使用缓存"><a href="#2-1-2-如何使用缓存" class="headerlink" title="2.1.2 如何使用缓存"></a>2.1.2 如何使用缓存</h4><p>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用</p><p><strong>浏览器缓存</strong>：主要是存在于浏览器端的缓存</p><p><strong>应用层缓存：</strong>可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存</p><p><strong>数据库缓存：</strong>在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中</p><p><strong>CPU缓存：</strong>当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213191.png" alt="image-20221127121510971"></p><h3 id="2-2-添加商户缓存"><a href="#2-2-添加商户缓存" class="headerlink" title="2.2 添加商户缓存"></a>2.2 添加商户缓存</h3><p>在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库那肯定慢咯，所以我们需要增加缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//这里是直接查询数据库</span></span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-、缓存模型和思路"><a href="#2-2-1-、缓存模型和思路" class="headerlink" title="2.2.1 、缓存模型和思路"></a>2.2.1 、缓存模型和思路</h4><p>标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入redis。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213775.png" alt="image-20221127122419377"></p><h4 id="2-2-2、代码如下"><a href="#2-2-2、代码如下" class="headerlink" title="2.2.2、代码如下"></a>2.2.2、代码如下</h4><p>代码思路：如果缓存有，则直接返回，如果缓存不存在，则查询数据库，然后存入redis。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.从查询Redis中是否有数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(RedisConstants.CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">// 2.如果有则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果没有，就去查数据库</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectById(id);</span><br><span class="line">    <span class="comment">// 4.如果没找到则返回错误信息</span></span><br><span class="line">    <span class="keyword">if</span>(shop==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.如果查到了就加入到Redis,并返回</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOP_KEY+id, JSONUtil.toJsonStr(shop));</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-练习：为店铺类型接口添加缓存"><a href="#2-2-3-练习：为店铺类型接口添加缓存" class="headerlink" title="2.2.3 练习：为店铺类型接口添加缓存"></a>2.2.3 练习：为店铺类型接口添加缓存</h4><p>店铺类型在首页和其它多个页面都会用到，如图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213289.png" alt="image-20221127165136055"></p><p>需求：修改ShopTypeController中的queryTypeList方法，添加查询缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.先去Redis查缓存首页缓存数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopTypeListJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(RedisConstants.CACHE_SHOP_TYPE_KEY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.如果为不为空，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopTypeListJson)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(JSONUtil.toList(shopTypeListJson,ShopType.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果为空，去查询数据库</span></span><br><span class="line">    List &lt;ShopType&gt; shopTypeList = <span class="built_in">this</span>.query().orderByDesc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.如果查询为空，则直接返回错误信息</span></span><br><span class="line">    <span class="keyword">if</span> (shopTypeList == <span class="literal">null</span> || shopTypeList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;商品类型查询失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.如果不为空，则把数据存入到Redis,并返回结果 (这里可以使用List,String等结构)</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOP_TYPE_KEY,JSONUtil.toJsonStr(shopTypeList));</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shopTypeList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-缓存更新策略"><a href="#2-3-缓存更新策略" class="headerlink" title="2.3 缓存更新策略"></a>2.3 缓存更新策略</h3><p>缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。</p><p><strong>内存淘汰：</strong>redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p><p><strong>超时剔除：</strong>当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p><p><strong>主动更新：</strong>我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213495.png" alt="1653322506393"></p><h4 id="2-3-1-、数据库缓存不一致解决方案"><a href="#2-3-1-、数据库缓存不一致解决方案" class="headerlink" title="2.3.1 、数据库缓存不一致解决方案"></a>2.3.1 、数据库缓存不一致解决方案</h4><p>由于我们的<strong>缓存的数据源来自于数据库</strong>,而数据库的<strong>数据是会发生变化的</strong>,因此,如果当数据库中<strong>数据发生变化,而缓存却没有同步</strong>,此时就会有<strong>一致性问题存在</strong>,其后果是:</p><p>用户使用缓存中的过时数据,就会产生类似多线程数据安全问题,从而影响业务,产品口碑等;怎么解决呢？有如下几种方案</p><ul><li><p><strong><font color=red>Cache Aside Pattern</font></strong> 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为&#x3D;&#x3D;双写&#x3D;&#x3D;方案</p><ul><li>特点:需要依靠程序员在CRUD之外进行额外的代码处理!</li></ul></li><li><p><strong><font color=red>Read&#x2F;Write Through Pattern</font></strong> : 由系统本身完成，数据库与缓存的问题交由系统本身去处理 </p><ul><li>如:Canel + Kafaka 搭建的服务,但是维护和开发成本较高!</li></ul></li><li><p><strong><font color=red>Write Behind Caching Pattern</font></strong> ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致 </p><ul><li>优点:调用者多次操作缓存,经过一段时间线程只需要把最后一次更新后的结果同步到数据库,效率极高 </li><li>缺点:维护这个异步线程比较困难; 如果在一段时间内有大量更新,但是还没有触发异步线程的更新,就会导致数据库和缓存数据差别很大; 缓存宕机 会导致 数据丢失,可靠性较差</li></ul></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213777.png" alt="1653322857620"></p><h4 id="2-3-2-、双写方案存在的问题"><a href="#2-3-2-、双写方案存在的问题" class="headerlink" title="2.3.2 、双写方案存在的问题"></a>2.3.2 、双写方案存在的问题</h4><p>综合考虑使用方案一，&#x3D;&#x3D;<strong>可控性比较高</strong>~  (实际企业中用的也比较多)&#x3D;&#x3D;</p><p>操作缓存和数据库时有三个问题需要考虑：</p><p><font color=blue>1、删除缓存还是更新缓存？</font></p><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多  <strong><font color=red>×</font></strong></li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存  <strong><font color=green>√</font></strong></li></ul><p>如果采用第一个方案，那么假设我们每次操作数据库后，都操作缓存，但是中间如果没有人查询，那么这个更新动作实际上只有最后一次生效，中间的更新动作意义并不大，我们可以把缓存删除，等待再次查询时，将缓存中的数据加载出来</p><p><font color=blue>2、如何保证缓存与数据库的操作的同时成功或失败？</font></p><ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用TCC等分布式事务方案</li></ul><p><font color=blue>3、先操作缓存还是先操作数据库？</font></p><ul><li>先删除缓存，再操作数据库  <strong><font color=red>×</font></strong></li><li>先操作数据库，再删除缓存  <strong><font color=green>√</font></strong></li></ul><p>在不考虑并发的情况下，都是可以的。但是在并发场景下，我们应当是&#x3D;&#x3D;先操作数据库，再删除缓存&#x3D;&#x3D;，我们简单分析一下：</p><ul><li><p>如果你选择第一种方案，如左图所示：在两个线程（线程1是更新线程，线程2是查询线程）并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入缓存的是旧的数据，新的数据被旧数据覆盖了。</p></li><li><p>如果你选择第二种方案，如右图所示，两个线程（线程1是查询线程，线程2是更新线程）并发来访问时，假如此时缓存是被删除的状态，线程1过来了，发现未命中，就去数据库擦汗寻数据了，刚查询完还没写入缓存!!!  此时线程2过来了，就更新数据库了（下面删除缓存这一步就不用做了）。然后，线程1又抢到了时间片，继续进行写入缓存操作，就会导致写入缓存的仍是旧数据</p></li></ul><p>既然我们发现两种方案都有并发修改的风险，但是为啥选择方案二呢？</p><p>因为 查询操作时间非常短，容易产生并发风险概率较低~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050213960.png" alt="1653323595206"></p><p>&#x3D;&#x3D;<strong>总结：缓存更新策略的最佳实践方案</strong>&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214319.png" alt="image-20221203180617553"></p><h4 id="2-3-2-实现商铺和缓存与数据库双写一致"><a href="#2-3-2-实现商铺和缓存与数据库双写一致" class="headerlink" title="2.3.2 实现商铺和缓存与数据库双写一致"></a>2.3.2 实现商铺和缓存与数据库双写一致</h4><p>核心思路如下：</p><p>修改ShopController中的业务逻辑，满足下面的需求：</p><p>根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间</p><p>根据id修改店铺时，先修改数据库，再删除缓存</p><p><strong>修改重点代码1</strong>：修改<strong>ShopServiceImpl</strong>的queryById方法</p><p><strong>设置redis缓存时添加过期时间</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214096.png" alt="image-20221204222609860"></p><p><strong>修改重点代码2</strong></p><p>代码分析：通过之前的淘汰，我们确定了采用删除策略，来解决双写问题，当我们修改了数据之后，然后把缓存中的数据进行删除，查询时发现缓存中没有数据，则会从mysql中加载最新的数据，从而避免数据库和缓存不一致的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;id不能为null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.updateById(shop);</span><br><span class="line">    <span class="comment">// 删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(RedisConstants.CACHE_SHOP_KEY+id);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-缓存穿透"><a href="#2-4-缓存穿透" class="headerlink" title="2.4 缓存穿透"></a>2.4 缓存穿透</h3><h4 id="2-4-1-问题的解决思路"><a href="#2-4-1-问题的解决思路" class="headerlink" title="2.4.1 问题的解决思路"></a>2.4.1 问题的解决思路</h4><p>&#x3D;&#x3D;缓存穿透&#x3D;&#x3D; ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象<ul><li>优点：实现简单，维护方便</li><li>缺点：<ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li>布隆过滤<ul><li>优点：内存占用较少，没有多余key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判可能 (因为可能出现hash冲突)</li></ul></li></ul></li></ul><p><strong>缓存空对象思路分析：</strong>当我们客户端访问不存在的数据时，先请求redis，但是此时redis中没有数据，此时会访问到数据库，但是数据库中也没有数据，这个数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库，简单的解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到数据库了</p><p><strong>布隆过滤：</strong>布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，</p><p>假设布隆过滤器判断这个数据不存在，则直接返回</p><p>这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214991.png" alt="1653326156516"></p><p><strong>代码修改：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214031.png" alt="image-20221204224430936"></p><h4 id="2-4-2-编码解决商品查询的缓存穿透问题："><a href="#2-4-2-编码解决商品查询的缓存穿透问题：" class="headerlink" title="2.4.2 编码解决商品查询的缓存穿透问题："></a>2.4.2 编码解决商品查询的缓存穿透问题：</h4><p>核心思路如下：</p><p>在原来的逻辑中，我们如果发现这个数据在mysql中不存在，直接就返回404了，这样是会存在缓存穿透问题的</p><p>现在的逻辑中：如果这个数据不存在，我们不会返回404 ，还是会把这个数据写入到Redis中，并且将value设置为空，当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214160.png" alt="1653327124561"></p><p><strong>小总结：</strong></p><p>缓存穿透产生的原因是什么？</p><ul><li>用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力</li></ul><p>缓存穿透的解决方案有哪些？</p><ul><li>缓存null值 （被动解决）</li><li>布隆过滤      （被动解决）</li><li>增强id的复杂度，避免被猜测id规律 （比如随机数，防止用户猜到…）</li><li>做好数据的基础格式校验 （比如id的位数）</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ul><h3 id="2-5-缓存雪崩问题及解决思路"><a href="#2-5-缓存雪崩问题及解决思路" class="headerlink" title="2.5 缓存雪崩问题及解决思路"></a>2.5 缓存雪崩问题及解决思路</h3><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的Key的TTL添加随机值 （可以防止同一时间短缓存都失效~）</li><li>利用Redis集群提高服务的可用性 （后面会讲）</li><li>给缓存业务添加降级限流策略 （比如sentinel的一些策略）</li><li>给业务添加多级缓存 （Nginx缓存、JVM缓存、MySQL缓存、Redis缓存 只要有一个命中就可~）</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214792.png" alt="1653327884526"></p><h3 id="2-6-缓存击穿"><a href="#2-6-缓存击穿" class="headerlink" title="2.6 缓存击穿"></a>2.6 缓存击穿</h3><h4 id="2-6-1-问题及解决思路"><a href="#2-6-1-问题及解决思路" class="headerlink" title="2.6.1 问题及解决思路"></a>2.6.1 问题及解决思路</h4><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><ul><li>互斥锁</li><li>逻辑过期</li></ul><p>逻辑分析：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214078.png" alt="image-20221204232839336"></p><p><font color=blue>解决方案一、使用锁来解决：</font></p><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。</p><p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214408.png" alt="image-20221204233045795"></p><p><font color=blue>解决方案二、逻辑过期方案</font></p><p>方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于&#x3D;&#x3D;我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题&#x3D;&#x3D;，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。</p><p>我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p><p>这种方案巧妙在于，&#x3D;&#x3D;异步的构建缓存&#x3D;&#x3D;，缺点在于在构建完缓存之前，返回的都是脏数据。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214649.png" alt="image-20221204233315960"></p><p><strong><font color=blue>进行对比</font></strong></p><p><strong>互斥锁方案：</strong>由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p><p><strong>逻辑过期方案：</strong> 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214255.png" alt="image-20221204233506235"></p><h4 id="2-6-2-利用互斥锁解决缓存击穿问题"><a href="#2-6-2-利用互斥锁解决缓存击穿问题" class="headerlink" title="2.6.2 利用互斥锁解决缓存击穿问题"></a>2.6.2 利用互斥锁解决缓存击穿问题</h4><p>核心思路：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询</p><p>如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214353.png" alt="image-20221205005716282"></p><p><strong>操作锁的代码：</strong></p><p>核心思路就是利用redis的setnx方法来表示获取锁，该方法含义是redis中如果没有这个key，则插入成功，返回1，在stringRedisTemplate中返回true，  如果有这个key则插入失败，则返回0，在stringRedisTemplate返回false，我们可以通过true，或者是false，来表示是否有线程成功插入key，成功插入的key的线程我们认为他就是获得到锁的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取锁：使用setnx模拟互斥锁</span></span><br><span class="line"><span class="comment"> * 为了防止出现死锁，所以应该为其设置过期时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, RedisConstants.LOCK_SHOP_TTL, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 互斥锁解决缓存击穿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.从查询Redis中是否有数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(RedisConstants.CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">// 2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">// 存在则直接返回</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.判断命中的是否是空值</span></span><br><span class="line">    <span class="keyword">if</span>(shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.实现缓存重建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.LOCK_SHOP_KEY+id;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 4.1 获取互斥锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(key);</span><br><span class="line">        <span class="comment">// 4.2判断是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            <span class="comment">// 4.3失败，则休眠并重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="comment">// 注意：获取锁的同时应该再次检测redis缓存是否存在，做DoubleCheck,如果存在则无需重建缓存</span></span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.4成功，根据id查询数据库</span></span><br><span class="line">        shop = getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟重建时的延时</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span>(shop==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 将空值写入到redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOP_KEY + id,<span class="string">&quot;&quot;</span>,RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.存在就加入到Redis,并返回</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOP_KEY+id, JSONUtil.toJsonStr(shop),RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 7.释放互斥锁</span></span><br><span class="line">        unlock(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>测试：5s 1000次请求的高并发测试</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214399.png" alt="image-20221205015020479"></p><p>观察控制台，可以发现只向数据库请求了一次~其他请求都打在了缓存上！！！</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212050214159.png" alt="image-20221205015122987"></p><p>从而可以得出结论，&#x3D;&#x3D;使用互斥锁可以解决缓存击穿的问题~~~&#x3D;&#x3D;</p><h4 id="2-6-3-利用逻辑过期解决缓存击穿问题"><a href="#2-6-3-利用逻辑过期解决缓存击穿问题" class="headerlink" title="2.6.3 利用逻辑过期解决缓存击穿问题"></a>2.6.3 利用逻辑过期解决缓存击穿问题</h4><p>思路分析：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212102007038.png" alt="image-20221205231155904"></p><p>封装数据：因为现在redis中存储的数据的value需要带上过期时间，此时要么你去修改原来的实体类，要么你新建一个实体类，我们采用第二个方案，这个方案，对原来代码没有侵入性。</p><p><font color=blue>步骤一、 新建RedisData类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=blue>步骤二、 在ShopServiceImpl 新增此方法，利用单元测试进行缓存预热</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存重建（预热）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expireSeconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expireSeconds)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1.查询店铺信息</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">// 2.封装逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">    <span class="comment">// 3.写入Redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave2Redis</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">1L</span>,<span class="number">30L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=blue>步骤三：编写逻辑过期的核心代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑过期解决缓存击穿</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.从Redis中查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisDataJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(RedisConstants.CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">// 2.判断是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(redisDataJson)) &#123;</span><br><span class="line">        <span class="comment">// 3.未命中，则返回空(因为预热过了，所以如果缓存中没有，则一定就是没有该店铺数据)</span></span><br><span class="line">        <span class="comment">// 为什么不用考虑缓存穿透的情况，因为所有的数据都放入到redis中预热了，一旦缓存查询出是null的，说明数据库没这个数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.命中，需要先把json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(redisDataJson, RedisData.class);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">shopJSONObj</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJSONObj, Shop.class);</span><br><span class="line">    <span class="comment">// 5.判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (redisData.getExpireTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 5.1未过期，则返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.2已过期，需要缓存重建</span></span><br><span class="line">    <span class="comment">// 6.缓存重建</span></span><br><span class="line">    <span class="comment">// 6.1尝试获取互斥锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(RedisConstants.LOCK_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">// 6.2判断互斥锁是否获取成功</span></span><br><span class="line">    <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">        <span class="comment">// 6.3获取成功，则开启独立线程</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 6.4进行缓存重建</span></span><br><span class="line">                <span class="comment">// 注意：这里写的是20S只是为了测试方便，实际项目中要用 30min</span></span><br><span class="line">                <span class="built_in">this</span>.saveShop2Redis(id, <span class="number">20L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 6.5释放锁</span></span><br><span class="line">                unlock(RedisConstants.LOCK_SHOP_KEY + id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 7.获取互斥锁失败，则直接返回过期的shop数据</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=blue>步骤四：测试</font></p><ul><li><p>先执行单元测试方法预热缓存</p></li><li><p>进行高并发请求 1s 100次</p></li><li><p>观察请求的结果：<code>缓存重建前返回的是旧数据，重建后得到的是新数据</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212102007430.png" alt="image-20221205233255665"></p></li><li><p>观察控制台，也只有一条查询的SQL，说明互斥锁起到了作用！只缓存重建了一次~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212102007405.png" alt="image-20221205233340769"></p></li></ul><h3 id="2-7、封装Redis缓存工具类"><a href="#2-7、封装Redis缓存工具类" class="headerlink" title="2.7、封装Redis缓存工具类"></a>2.7、封装Redis缓存工具类</h3><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：</p><ul><li>方法1：将Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>方法2：根据指定的key查询缓存，并利用缓存空值来解决缓存穿透问题</li><li>方法3：根据指定的key查询缓存，并利用互斥锁解决缓存击穿解决缓存击穿问题</li><li>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ul><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Redis操作缓存的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/6 0:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value),time,unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  逻辑过期解决缓存击穿问题中的缓存重建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key,Object value,Long time,TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="comment">// 设置逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        <span class="comment">// 写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的key查询缓存,并利用缓存空值来解决缓存穿透问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbFallback 降级的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time       时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit       单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;ID&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type,</span></span><br><span class="line"><span class="params">                                          Function &lt;ID,R&gt; dbFallback,Long time,TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从Redis中查询R数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在,则直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.判断命中的是否是空值 (上面已经判断过不为空的情况了，下面只有 “” 和 null的两种情况，为null说明不存在，为“”说明空缓存)</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.如果没有，就去查数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">// 4.如果没找到则返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.如果查到了就加入到Redis,并返回</span></span><br><span class="line">        <span class="built_in">this</span>.set(key,r,time,unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的key查询缓存，并利用逻辑过期时间来解决缓存击穿问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix,ID id,Class&lt;R&gt; type</span></span><br><span class="line"><span class="params">    ,Function &lt;ID,R&gt; dbFallback,Long time,TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从Redis中查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisDataJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(redisDataJson)) &#123;</span><br><span class="line">            <span class="comment">// 3.未命中，则返回空(因为预热过了，所以如果缓存中没有，则一定就是没有该店铺数据)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(redisDataJson, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean(jsonObj, type);</span><br><span class="line">        <span class="comment">// 5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (redisData.getExpireTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 5.1未过期，则返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.2已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">// 6.缓存重建</span></span><br><span class="line">        <span class="comment">// 6.1尝试获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> RedisConstants.LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">// 6.2判断互斥锁是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            <span class="comment">// 6.3获取成功，则开启独立线程</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">newR</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 进行缓存重建</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key,newR,time,unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 6.6释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7.获取互斥锁失败，则直接返回过期的R数据</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的key查询缓存，并利用互斥锁解决缓存击穿解决缓存击穿问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix,ID id,Class&lt;R&gt; type,</span></span><br><span class="line"><span class="params">                                    Function &lt;ID,R&gt; dbFallback,Long time,TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从查询Redis中是否有数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 存在则直接返回</span></span><br><span class="line">            <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean(json, type);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.判断命中的是否是 “” (缓存空值)</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.实现缓存重建</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> RedisConstants.LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4.1 获取互斥锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="comment">// 4.2判断是否获取成功</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                <span class="comment">// 4.3失败，则休眠并重试</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="comment">// 注意：获取锁的同时应该再次检测redis缓存是否存在，做DoubleCheck,如果存在则无需重建缓存</span></span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix,id,type,dbFallback,time,unit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.4成功，根据id查询数据库</span></span><br><span class="line">            r = dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟重建时的延时</span></span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将空值写入到redis</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 6.存在就加入到Redis,并返回</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(r),time, unit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7.释放互斥锁</span></span><br><span class="line">            unlock(lockKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁：使用setnx模拟互斥锁</span></span><br><span class="line"><span class="comment">     * 为了防止出现死锁，所以应该为其设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, RedisConstants.LOCK_SHOP_TTL, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可能有人好奇为什么工具类的方法不用static修饰？</p><p>ioc是通过new的方式创建bean,new出来的对象是在堆里面, static修饰的东西是优先于对象存在,<br>如果我们用了static，那么方法里面涉及到的方法调用也得是Static，但是我们因为用的是ioc容器里面的bean，所以不能这样搞！</p></blockquote><p><strong>在ShopServiceImpl 中测试工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 缓存穿透</span></span><br><span class="line">    <span class="comment">// Shop shop = cacheClient.queryWithPassThrough(RedisConstants.CACHE_SHOP_KEY, id, Shop.class,</span></span><br><span class="line">    <span class="comment">//         this::getById, RedisConstants.CACHE_SHOP_TTL, TimeUnit.MINUTES);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line">    <span class="comment">// Shop shop = cacheClient.queryWithMutex(RedisConstants.CACHE_SHOP_KEY,id,Shop.class,this::getById,RedisConstants.CACHE_SHOP_TTL,TimeUnit.MINUTES);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑过期解决缓存击穿</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient.queryWithLogicalExpire(RedisConstants.CACHE_SHOP_KEY,id,Shop.class,<span class="built_in">this</span>::getById,RedisConstants.CACHE_SHOP_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、分布式锁-Redission</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC06%E7%AB%A0_%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redission/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC06%E7%AB%A0_%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redission/</url>
      
        <content type="html"><![CDATA[<h2 id="5、分布式锁-redission"><a href="#5、分布式锁-redission" class="headerlink" title="5、分布式锁-redission"></a>5、分布式锁-redission</h2><h3 id="5-1-分布式锁-redission功能介绍"><a href="#5-1-分布式锁-redission功能介绍" class="headerlink" title="5.1 分布式锁-redission功能介绍"></a>5.1 分布式锁-redission功能介绍</h3><p>基于setnx实现的分布式锁存在下面的问题：</p><p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。</p><p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p><p><strong>超时释放：</strong>我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患</p><p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230913.png" alt="1653546070602"></p><p>那么什么是Redission呢</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p><p>Redission提供了分布式锁的多种多样的功能</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230911.png" alt="image-20221226022903663"></p><h3 id="5-2-分布式锁-Redission快速入门"><a href="#5-2-分布式锁-Redission快速入门" class="headerlink" title="5.2 分布式锁-Redission快速入门"></a>5.2 分布式锁-Redission快速入门</h3><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">3.13</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置Redisson客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.174.128:6379&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建RedissonClient对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 VoucherOrderServiceImpl使用Redisson带的分布式锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取优惠券信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> voucher.getBeginTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> voucher.getEndTime();</span><br><span class="line">    <span class="keyword">if</span>(beginTime.isAfter(LocalDateTime.now()) || endTime.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不再秒杀时段内！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span>(voucher.getStock() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 这个代码我们不用了，下面要用Redisson中的分布式锁</span></span><br><span class="line">    <span class="comment">// SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;order:&quot;</span> + userId);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">    <span class="comment">// 判断是否获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">        <span class="comment">// 获取锁失败，返回错误和重试</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取代理对象（只有通过代理对象调用方法，事务才会生效）</span></span><br><span class="line">        <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进行测试：</strong></p><p>在集群环境下，一秒一千次请求~ 一个用户只能下一单。分布式锁测试成功~ </p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230922.png" alt="image-20221221131219831"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230924.png" alt="image-20221221131345069"></p><h3 id="5-3-分布式锁-redission可重入锁原理"><a href="#5-3-分布式锁-redission可重入锁原理" class="headerlink" title="5.3 分布式锁-redission可重入锁原理"></a>5.3 分布式锁-redission可重入锁原理</h3><p>在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state&#x3D;0，假如有人持有这把锁，那么state&#x3D;1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，如果是对于synchronized而言，他在c语言代码中会有一个count，原理和state类似，也是重入一次就加一，释放一次就-1 ，直到减少成0 时，表示当前这把锁没有被人持有。  </p><p>在redission中，我们的也支持支持可重入锁</p><p>在分布式锁中，他&#x3D;&#x3D;采用hash结构&#x3D;&#x3D;用来存储锁，其中<font color=red>大key表示表示这把锁是否存在，用小key表示当前这把锁被哪个线程持有</font>。流程图如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230927.png" alt="image-20221221155020125"></p><blockquote><p>为什么每次获取锁成功 或 释放锁 后都要重新设置锁的有效期呢?</p><p>这样是为了下面的业务有足够的时间去执行~</p></blockquote><p><strong><font color=orange>1、接下来我们一起分析一下当前的可重入锁实现的lua表达式</font></strong></p><ul><li>获取锁的Lua脚本：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 判断是否存在</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;exists&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 不存在, 获取锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 锁已经存在，判断threadId是否是自己</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 存在, 获取锁，重入次数+1</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>); </span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">-- 代码走到这里,说明获取锁的不是自己，获取锁失败</span></span><br></pre></td></tr></table></figure><ul><li>释放锁的Lua脚本：</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 判断当前锁是否还是被自己持有</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">-- 如果已经不是自己，则直接返回</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 是自己的锁，则重入次数-1</span></span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">&#x27;HINCRBY&#x27;</span>, key, threadId, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 判断是否重入次数是否已经为0 </span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 大于0说明不能释放锁，重置有效期然后返回</span></span><br><span class="line">    redis.call(<span class="string">&#x27;EXPIRE&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">-- 等于0说明可以释放锁，直接删除</span></span><br><span class="line">    redis.call(<span class="string">&#x27;DEL&#x27;</span>, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=orange>2、测试Redission的分布式锁的可重入效果</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 测试Redisson的分布式锁的可重入性质</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/21 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">        lock = redissonClient.getLock(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1L</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败....1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功....1&quot;</span>);</span><br><span class="line">            method2();</span><br><span class="line">            log.info(<span class="string">&quot;开始执行业务....1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;开始释放锁....1&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 尝试获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">        <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败....2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功....2&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;开始执行业务....2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;准备释放锁....2&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Debug测试：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230938.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230697.png"></p><p><strong><font color=orange>3、接下来我们可以查看下Redisson中的分布式锁的实现：</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230707.png" alt="image-20221221163708051"></p><blockquote><p>注意源码中的KEYS[1]指外边的大Key，AVG[1]：大Key的过期时间，AVG[2]：当前的线程ID</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230745.png" alt="image-20221221163825349"></p><blockquote><p>源码中的KEYS[1]指外边的大Key，AVG[2]：大Key的过期时间，AVG[3]：当前的线程ID。KEYS[2]和ARGV[1]所代表的含义我们后面会讲解~</p></blockquote><h3 id="5-4-分布式锁-redission锁重试和WatchDog机制"><a href="#5-4-分布式锁-redission锁重试和WatchDog机制" class="headerlink" title="5.4 分布式锁-redission锁重试和WatchDog机制"></a>5.4 分布式锁-redission锁重试和WatchDog机制</h3><p>关于锁可重试的原理见：<a href="https://www.processon.com/view/link/63a86e6534446c6f609d3a3f">https://www.processon.com/view/link/63a86e6534446c6f609d3a3f</a></p><p>关于锁超时续约 和 锁释放的原理见：<a href="https://www.processon.com/view/link/63a891cece3d3c6150d7c2ac">https://www.processon.com/view/link/63a891cece3d3c6150d7c2ac</a></p><p><strong>Redission分布式锁原理</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230750.png" alt="image-20221226021503722"></p><blockquote><p>注意:只有leaseTime&#x3D;-1,才会走WatchDog的逻辑</p></blockquote><p><strong>总结：Redisson分布式锁原理</strong></p><ul><li>可重入：利用hash结构记录线程id和重入次数</li><li>可重试：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制</li><li>超时续约：利用watchDog，每隔一段时间（releaseTime &#x2F; 3），重置超时时间</li></ul><h3 id="5-5-分布式锁-redission锁的MutiLock原理"><a href="#5-5-分布式锁-redission锁的MutiLock原理" class="headerlink" title="5.5 分布式锁-redission锁的MutiLock原理"></a>5.5 分布式锁-redission锁的MutiLock原理</h3><p>为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例</p><p>此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230763.png" alt="image-20221226022637870"></p><p>为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230772.png" alt="image-20221226022539880"></p><p>那么MutiLock 加锁原理是什么呢？笔者画了一幅图来说明</p><p>当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试.</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212260230606.png" alt="1653553093967"></p><h3 id="5-6-总结"><a href="#5-6-总结" class="headerlink" title="5.6 总结"></a>5.6 总结</h3><p><strong>1）不可重入Redis分布式锁：</strong><br>原理：利用setnx的互斥性；利用ex避免死锁；释放锁时判断线程标示<br>缺陷：不可重入、无法重试、锁超时失效<br><strong>2）可重入的Redis分布式锁：</strong><br>原理：利用hash结构，记录线程标示和重入次数；利用watchDog延续锁时间；利用信号量控制锁重试等待<br>缺陷：redis宕机引起锁失效问题<br><strong>3）Redisson的multiLock：</strong><br>原理：多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功<br>缺陷：运维成本高、实现复杂</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、优惠券秒杀</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC04%E7%AB%A0_%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC04%E7%AB%A0_%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="3、优惠卷秒杀"><a href="#3、优惠卷秒杀" class="headerlink" title="3、优惠卷秒杀"></a>3、优惠卷秒杀</h1><h2 id="3-1-全局唯一ID"><a href="#3-1-全局唯一ID" class="headerlink" title="3.1 -全局唯一ID"></a>3.1 -全局唯一ID</h2><p>每个店铺都可以发布优惠券：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161235341.png" alt="1653362612286"></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：</p><ul><li>id的规律性太明显</li><li>受单表数据量的限制</li></ul><p>场景分析一：如果我们的id具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这明显不合适。</p><p>场景分析二：随着我们商城规模越来越大，mysql的单表的容量不宜超过500W，数据量过大之后，我们要进行拆库拆表，但拆分表了之后，他们从逻辑上讲他们是同一张表，所以他们的id是不能一样的， 于是乎我们需要保证id的唯一性。</p><p><strong>全局ID生成器</strong>，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161235663.png" alt="1653363100502"></p><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161235117.png" alt="1653363172079"></p><p>ID的组成部分：</p><p>符号位：1bit，永远为0</p><p>时间戳：31bit，以秒为单位，可以使用69年</p><p>序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</p><h2 id="3-2-Redis实现全局唯一Id"><a href="#3-2-Redis实现全局唯一Id" class="headerlink" title="3.2 -Redis实现全局唯一Id"></a>3.2 -Redis实现全局唯一Id</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ID生成器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/12 12:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1670803200L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.生成序列号</span></span><br><span class="line">        <span class="comment">//2.1 获取当天日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.2自增长</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIdWorker</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> ()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;id = &quot;</span>+id);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">        es.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;time = &quot;</span>+(end - begin));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>知识小贴士：关于countdownlatch</p><p>countdownlatch名为信号枪：主要的作用是同步协调在多线程的等待于唤醒问题</p><p>我们如果没有CountDownLatch ，那么由于程序是异步的，当异步程序没有执行完时，主线程就已经执行完了，然后我们期望的是分线程全部走完之后，主线程再走，所以我们此时需要使用到CountDownLatch</p><p>CountDownLatch 中有两个最重要的方法</p><p>1、countDown</p><p>2、await</p><p>await 方法 是阻塞方法，我们担心分线程没有执行完时，main线程就先执行，所以使用await可以让main线程阻塞，那么什么时候main线程不再阻塞呢？当CountDownLatch  内部维护的 变量变为0时，就不再阻塞，直接放行，那么什么时候CountDownLatch   维护的变量变为0 呢，我们只需要调用一次countDown ，内部变量就减少1，我们让分线程和变量绑定， 执行完一个分线程就减少一个变量，当分线程全部走完，CountDownLatch 维护的变量就是0，此时await就不再阻塞，统计出来的时间也就是所有分线程执行完后的时间。</p></blockquote><h2 id="3-3-添加优惠卷"><a href="#3-3-添加优惠卷" class="headerlink" title="3.3 添加优惠卷"></a>3.3 添加优惠卷</h2><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161236382.png" alt="1653365145124"></p><p>tb_voucher：优惠券的基本信息，优惠金额、使用规则等<br>tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</p><p>平价卷由于优惠力度并不是很大，所以是可以任意领取</p><p>而代金券由于优惠力度大，所以像第二种卷，就得限制数量，从表结构上也能看出，特价卷除了具有优惠卷的基本信息以外，还具有库存，抢购时间，结束时间等等字段</p><p>**新增普通卷代码：  **VoucherController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">    voucherService.save(voucher);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增秒杀卷代码：</strong></p><p><strong>VoucherController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addSeckillVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">    voucherService.addSeckillVoucher(voucher);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>VoucherServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">    <span class="comment">// 保存秒杀库存到Redis中</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-实现秒杀下单"><a href="#3-4-实现秒杀下单" class="headerlink" title="3.4 实现秒杀下单"></a>3.4 实现秒杀下单</h2><p>下单核心思路：当我们点击抢购时，会触发右侧的请求，我们只需要编写对应的controller即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161236036.png" alt="1653365839526"></p><p>下单时需要判断两点：</p><ul><li>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</li><li>库存是否充足，不足则无法下单</li></ul><p>下单核心逻辑分析：</p><p>当用户开始进行下单，我们应当去查询优惠卷信息，查询到优惠卷信息，判断是否满足秒杀条件</p><p>比如时间是否充足，如果时间充足，则进一步判断库存是否足够，如果两者都满足，则扣减库存，创建订单，然后返回订单id，如果有一个条件不满足则直接结束。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161236261.png" alt="1653366238564"></p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取优惠券信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> voucher.getBeginTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> voucher.getEndTime();</span><br><span class="line">    <span class="keyword">if</span>(beginTime.isAfter(LocalDateTime.now()) || endTime.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不再秒杀时段内！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span>(voucher.getStock() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">    <span class="comment">//这里二次判断的原因在于：高并发场景下会有时间差A在更新库存的时间内，B把最后一件买走了，就会导致A更新失败！</span></span><br><span class="line">    <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.1 订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.2 用户id</span></span><br><span class="line">    voucherOrder.setUserId(UserHolder.getUser().getId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.3代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="built_in">this</span>.save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>当我们用两百个线程模拟秒杀的时候，竟然出现了 库存 -9 的情况，很显然出现了超卖问题~</p><h2 id="3-5-库存超卖问题分析"><a href="#3-5-库存超卖问题分析" class="headerlink" title="3.5 库存超卖问题分析"></a>3.5 库存超卖问题分析</h2><p>有关超卖问题分析：在我们原有代码中是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="comment">// 库存不足</span></span><br><span class="line">       <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//5，扣减库存</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">           .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">           .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">   <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">       <span class="comment">//扣减库存</span></span><br><span class="line">       <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>假设线程1过来查询库存，判断出来库存大于1，正准备去扣减库存，但是还没有来得及去扣减，此时线程2过来，线程2也去查询库存，发现这个数量一定也大于1，那么这两个线程都会去扣减库存，最终多个线程相当于一起去扣减库存，此时就会出现库存的超卖问题。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161236293.png" alt="1653368335155"></p><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案：见下图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248325.png" alt="image-20221213200152980"></p><p><strong>悲观锁：</strong></p><p>悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等</p><p><strong>乐观锁：</strong></p><p>乐观锁：会有一个版本号，每次操作数据会对版本号+1，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如cas</p><p>乐观锁的典型代表：就是cas，利用cas进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 &#x3D;&#x3D; 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值</p><p>其中do while 是为了在操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> var5;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> var5;</span><br></pre></td></tr></table></figure><p><strong>课程中的使用方式：</strong></p><p>课程中的使用方式是没有像cas一样带自旋的操作，也没有对version的版本号+1 ，他的操作逻辑是在操作时，对版本号进行+1 操作，然后要求version 如果是1 的情况下，才能操作，那么第一个线程在操作后，数据库中的version变成了2，但是他自己满足version&#x3D;1 ，所以没有问题，此时线程2执行，线程2 最后也需要加上条件version &#x3D;1 ，但是现在由于线程1已经操作过了，所以线程2，操作时就不满足version&#x3D;1 的条件了，所以线程2无法执行成功</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248939.png" alt="1653369268550"></p><h2 id="3-6-乐观锁解决超卖问题"><a href="#3-6-乐观锁解决超卖问题" class="headerlink" title="3.6 乐观锁解决超卖问题"></a>3.6 乐观锁解决超卖问题</h2><p><strong>修改代码方案一、</strong></p><p>VoucherOrderServiceImpl 在扣减库存时，改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>) <span class="comment">//set stock = stock -1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,voucher.getStock()).update(); <span class="comment">//where id = ？ and stock = ?</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248211.png" alt="image-20221213201606432"></p><p>以上逻辑的核心含义是：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败</p><p><strong>修改代码方案二、</strong></p><p>之前的方式要修改前后都保持一致，但是这样我们分析过，成功的概率太低，所以我们的乐观锁需要变一下，改成stock大于0 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>); <span class="comment">//where id = ? and stock &gt; 0</span></span><br></pre></td></tr></table></figure><p><strong>知识小扩展：</strong></p><p>针对cas中的自旋压力过大，我们可以使用Longaddr这个类去解决</p><p>Java8 提供的一个对AtomicLong改进后的一个类，LongAdder</p><p>大量线程并发更新一个原子性的时候，天然的问题就是自旋，会导致并发性问题，当然这也比我们直接使用syn来的好</p><p>所以利用这么一个类，LongAdder来进行优化</p><p>如果获取某个值，则会对cell和base的值进行递增，最后返回一个完整的值</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248691.png" alt="1653370271627"></p><h2 id="3-7-优惠券秒杀-一人一单"><a href="#3-7-优惠券秒杀-一人一单" class="headerlink" title="3.7 优惠券秒杀-一人一单"></a>3.7 优惠券秒杀-一人一单</h2><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单</p><p><strong>现在的问题在于：</strong></p><p>优惠卷是为了引流，但是目前的情况是，一个人可以无限制的抢这个优惠卷，所以我们应当增加一层逻辑，让一个用户只能下一个单，而不是让一个用户下多个单</p><p>具体操作逻辑如下：比如时间是否充足，如果时间充足，则进一步判断库存是否足够，然后再根据优惠卷id和用户id查询是否已经下过这个订单，如果下过这个订单，则不再下单，否则进行下单</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248971.png" alt="1653371854389"></p><p>VoucherOrderServiceImpl  </p><p><strong>初步代码：增加一人一单逻辑</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取优惠券信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> voucher.getBeginTime();</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> voucher.getEndTime();</span><br><span class="line">    <span class="keyword">if</span>(beginTime.isAfter(LocalDateTime.now()) || endTime.isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不再秒杀时段内！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span>(voucher.getStock() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 4.1 查询订单</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">    <span class="comment">// 4.2 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).</span><br><span class="line">        eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">        .gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>)</span><br><span class="line">        .update();</span><br><span class="line">    <span class="comment">//这里二次判断的原因在于：高并发场景下会有时间差A在更新库存的时间内，B把最后一件买走了，就会导致A更新失败！</span></span><br><span class="line">    <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 6.1 订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.2 用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.3代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="built_in">this</span>.save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在问题：</strong>现在的问题还是和之前一样，并发过来，查询数据库，都不存在订单，所以我们还是需要加锁，但是&#x3D;&#x3D;乐观锁比较适合更新数据，而现在是插入数据，所以我们需要使用悲观锁操作&#x3D;&#x3D;</p><p><strong>注意：</strong>在这里提到了非常多的问题，我们需要慢慢的来思考，首先我们的初始方案是封装了一个createVoucherOrder方法，同时为了确保他线程安全，在方法上添加了一把synchronized 锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 4. 一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 4.1 查询订单</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">    <span class="comment">// 4.2 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).</span><br><span class="line">        eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">        .gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>)</span><br><span class="line">        .update();</span><br><span class="line">    <span class="comment">//这里二次判断的原因在于：高并发场景下会有时间差A在更新库存的时间内，B把最后一件买走了，就会导致A更新失败！</span></span><br><span class="line">    <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 6.1 订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.2 用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.3代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="built_in">this</span>.save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>，但是这样添加锁，锁的粒度太粗了，在使用锁过程中，控制<strong>锁粒度</strong> 是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会锁住，所以我们需要去控制锁的粒度，以下这段代码需要修改为：<br>intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new出来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 4. 一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">synchronized</span>(userId.toString().intern())&#123;</span><br><span class="line">        <span class="comment">// 4.1 查询订单</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">        <span class="comment">// 4.2 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次了~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).</span><br><span class="line">                eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">                .gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>)</span><br><span class="line">                .update();</span><br><span class="line">        <span class="comment">//这里二次判断的原因在于：高并发场景下会有时间差A在更新库存的时间内，B把最后一件买走了，就会导致A更新失败！</span></span><br><span class="line">        <span class="keyword">if</span>(!success)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 6.1 订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 6.2 用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 6.3代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        <span class="built_in">this</span>.save(voucherOrder);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上代码还是存在问题，问题的原因在于当前方法被spring的事务控制，如果你在方法内部加锁，可能会&#x3D;&#x3D;导致当前方法事务还没有提交，但是锁已经释放也会导致问题&#x3D;&#x3D;，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题：如下：</p><p>在seckillVoucher 方法中，添加以下逻辑，这样就能保证事务的特性，同时也控制了锁的粒度</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248563.png" alt="image-20221215234431160"></p><p>但是以上做法依然有问题，因为你调用的方法，其实是<code>this.</code>的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248970.png" alt="image-20221215234511307"></p><p><strong>注意：</strong>代理需要搭配<code>@EnableAspectJAutoProxy(exposeProxy = true)</code> 和aspectjweaver 依赖</p><h2 id="3-8-集群环境下的并发问题"><a href="#3-8-集群环境下的并发问题" class="headerlink" title="3.8 集群环境下的并发问题"></a>3.8 集群环境下的并发问题</h2><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。</p><p>1、我们将服务启动两份，端口分别为8081和8082：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248538.png" alt="image-20221216104419719"></p><p>2、然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248491.png" alt="1653373908620"></p><p><strong>具体操作(略)</strong></p><p>我们在Postman中发送两个一模一样的秒杀请求，结果发现请求分别进入了两个服务的synchronized方法内，出现了锁失效的问题~</p><p><strong>有关锁失效原因分析</strong></p><p>由于现在我们部署了多个tomcat，每个tomcat都有一个属于自己的jvm，那么假设在服务器A的tomcat内部，有两个线程，这两个线程由于使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的，但是如果现在是服务器B的tomcat内部，又有两个线程，但是他们的锁对象写的虽然和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2实现互斥，这就是 集群环境下，syn锁失效的原因，在这种情况下，我们就需要使用分布式锁来解决这个问题。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212161248107.png" alt="image-20221216114317798"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、秒杀优化</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC07%E7%AB%A0_%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC07%E7%AB%A0_%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="6、秒杀优化"><a href="#6、秒杀优化" class="headerlink" title="6、秒杀优化"></a>6、秒杀优化</h2><h3 id="6-0-压力测试"><a href="#6-0-压力测试" class="headerlink" title="6.0 压力测试"></a>6.0 压力测试</h3><p><strong>目的</strong>：测试1000个用户抢购优惠券时秒杀功能的并发性能~</p><p>①数据库中创建1000+用户</p><p>这里推荐使用开源工具：<a href="https://www.sqlfather.com/">https://www.sqlfather.com/</a> ，导入以下配置即可一键生成模拟数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;dbName&quot;:&quot;hmdp&quot;,&quot;tableName&quot;:&quot;tb_user&quot;,&quot;tableComment&quot;:&quot;用户表&quot;,&quot;mockNum&quot;:<span class="number">100</span>,&quot;fieldList&quot;:[&#123;&quot;fieldName&quot;:&quot;id&quot;,&quot;fieldType&quot;:&quot;bigint(20)&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">true</span>,&quot;comment&quot;:&quot;主键id&quot;,&quot;primaryKey&quot;:<span class="literal">true</span>,&quot;autoIncrement&quot;:<span class="literal">true</span>,&quot;mockType&quot;:&quot;递增&quot;,&quot;mockParams&quot;:<span class="number">2</span>,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;,&#123;&quot;fieldName&quot;:&quot;phone&quot;,&quot;fieldType&quot;:&quot;varchar(33)&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">false</span>,&quot;comment&quot;:<span class="keyword">null</span>,&quot;primaryKey&quot;:<span class="literal">false</span>,&quot;autoIncrement&quot;:<span class="literal">false</span>,&quot;mockType&quot;:&quot;随机&quot;,&quot;mockParams&quot;:&quot;手机号&quot;,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;,&#123;&quot;fieldName&quot;:&quot;password&quot;,&quot;fieldType&quot;:&quot;varchar(384)&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">false</span>,&quot;comment&quot;:<span class="keyword">null</span>,&quot;primaryKey&quot;:<span class="literal">false</span>,&quot;autoIncrement&quot;:<span class="literal">false</span>,&quot;mockType&quot;:&quot;随机&quot;,&quot;mockParams&quot;:&quot;字符串&quot;,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;,&#123;&quot;fieldName&quot;:&quot;nick_name&quot;,&quot;fieldType&quot;:&quot;varchar(96)&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">false</span>,&quot;comment&quot;:<span class="keyword">null</span>,&quot;primaryKey&quot;:<span class="literal">false</span>,&quot;autoIncrement&quot;:<span class="literal">false</span>,&quot;mockType&quot;:&quot;规则&quot;,&quot;mockParams&quot;:&quot;user_\\w&#123;10&#125;$&quot;,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;,&#123;&quot;fieldName&quot;:&quot;icon&quot;,&quot;fieldType&quot;:&quot;varchar(765)&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">false</span>,&quot;comment&quot;:<span class="keyword">null</span>,&quot;primaryKey&quot;:<span class="literal">false</span>,&quot;autoIncrement&quot;:<span class="literal">false</span>,&quot;mockType&quot;:&quot;固定&quot;,&quot;mockParams&quot;:&quot;/imgs/blogs/blog1.jpg&quot;,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;,&#123;&quot;fieldName&quot;:&quot;create_time&quot;,&quot;fieldType&quot;:&quot;timestamp&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">false</span>,&quot;comment&quot;:<span class="keyword">null</span>,&quot;primaryKey&quot;:<span class="literal">false</span>,&quot;autoIncrement&quot;:<span class="literal">false</span>,&quot;mockType&quot;:&quot;固定&quot;,&quot;mockParams&quot;:&quot;2023-01-01 00:00:00&quot;,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;,&#123;&quot;fieldName&quot;:&quot;update_time&quot;,&quot;fieldType&quot;:&quot;timestamp&quot;,&quot;defaultValue&quot;:<span class="keyword">null</span>,&quot;notNull&quot;:<span class="literal">false</span>,&quot;comment&quot;:<span class="keyword">null</span>,&quot;primaryKey&quot;:<span class="literal">false</span>,&quot;autoIncrement&quot;:<span class="literal">false</span>,&quot;mockType&quot;:&quot;固定&quot;,&quot;mockParams&quot;:&quot;2023-01-01 00:00:01&quot;,&quot;onUpdate&quot;:<span class="keyword">null</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>②将1000个用户处于登录状态(本质就是为1000个用户生成token，并保存到Redis中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Redis中保存1000个用户信息并将其token写入文件中，方便测试多人秒杀业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMultiLogin</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    List &lt;User&gt; userList = userService.lambdaQuery().last(<span class="string">&quot;limit 1000&quot;</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">        Map &lt;String,Object&gt; userMap = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span> &lt;&gt;(),</span><br><span class="line">                CopyOptions.create().ignoreNullValue()</span><br><span class="line">                        .setFieldValueEditor((fieldName,fieldValue) -&gt; fieldValue.toString()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY + token;</span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">        stringRedisTemplate.expire(tokenKey, <span class="number">60</span>,TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line">    Set &lt;String&gt; keys = stringRedisTemplate.keys(RedisConstants.LOGIN_USER_KEY + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="meta">@Cleanup</span> <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;\\tokens.txt&quot;</span>);</span><br><span class="line">    <span class="meta">@Cleanup</span> <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileWriter);</span><br><span class="line">    <span class="keyword">assert</span> keys != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> key.substring(RedisConstants.LOGIN_USER_KEY.length());</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> token + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        bufferedWriter.write(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③在Jmeter中进行压力测试：1000个线程请求接口，观察结果</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411390.png" alt="image-20230207170914570"></p><blockquote><p>这接口被Leader发现，估计要被骂死~</p></blockquote><h3 id="6-1-秒杀优化-异步秒杀思路"><a href="#6-1-秒杀优化-异步秒杀思路" class="headerlink" title="6.1 秒杀优化-异步秒杀思路"></a>6.1 秒杀优化-异步秒杀思路</h3><p>我们来回顾一下下单流程</p><p>当用户发起请求，此时会请求nginx，nginx会访问到tomcat，而tomcat中的程序，会进行串行操作，分成如下几个步骤</p><p>1、<code>查询优惠卷</code></p><p>2、判断秒杀库存是否足够</p><p>3、<code>查询订单</code></p><p>4、校验是否是一人一单</p><p>5、<code>扣减库存</code></p><p>6、<code>创建订单</code></p><p>在这六步操作中，又有很多操作是要去<code>操作数据库</code>的，而且还是一个线程<code>串行</code>执行， 这样就会导致我们的程序执行的很慢，所以我们需要异步程序执行，那么如何加速呢？</p><p>在这里笔者想给大家分享一下课程内没有的思路，看看有没有小伙伴这么想，比如，我们可以不可以使用<strong>异步编排</strong>来做，或者说我开启N多线程，N多个线程，一个线程执行查询优惠卷，一个执行判断扣减库存，一个去创建订单等等，然后再统一做返回，这种做法和课程中有哪种好呢？答案是课程中的好，因为如果你采用我刚说的方式，如果访问的人很多，那么线程池中的线程可能一下子就被消耗完了，而且你使用上述方案，最大的特点在于，你觉得时效性会非常重要，但是你想想是吗？并不是，比如我只要确定他能做这件事，然后我后边慢慢做就可以了，我并不需要他一口气做完这件事，所以我们应当采用的是课程中，类似消息队列的方式来完成我们的需求，而不是使用线程池或者是异步编排的方式来完成这个需求</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411438.png" alt="1653560986599"></p><p><strong>优化方案：</strong>我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池。当然这里边有两个难点</p><p>第一个难点是我们怎么在redis中去快速校验一人一单，还有库存判断</p><p>第二个难点是由于我们校验和tomct下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。【饭店的运营流程】</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411459.png" alt="1653561657295"></p><p>我们现在来看看整体思路：当用户下单之后，判断库存是否充足只需要到redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的，我们可以使用<code>lua</code>来操作</p><p>当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411447.png" alt="1653562234886"></p><h3 id="6-2-秒杀优化-Redis完成秒杀资格判断"><a href="#6-2-秒杀优化-Redis完成秒杀资格判断" class="headerlink" title="6.2 秒杀优化-Redis完成秒杀资格判断"></a>6.2 秒杀优化-Redis完成秒杀资格判断</h3><p>需求：</p><ul><li><p>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</p></li><li><p>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</p></li><li><p>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</p></li><li><p>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411471.png" alt="1656080546603"></p></li></ul><p>VoucherServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">    <span class="comment">// 保存秒杀库存到Redis中</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整lua表达式</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.参数列表</span></span><br><span class="line"><span class="comment">-- 1.1 优惠券Id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 1.2 用户id</span></span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.数据key</span></span><br><span class="line"><span class="comment">-- 2.1 库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">-- 2.2 订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.脚本业务</span></span><br><span class="line"><span class="comment">-- 3.1 判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 3.1.2 库存不足,返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.2 判断用户是否已经下过单</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 3.2.2 存在，说明重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.3 扣库存 incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.4 下单(保存用户) sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.5 用户有下单资格，返回0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>当以上lua表达式执行完毕后，剩下的就是根据步骤3,4来执行我们接下来的任务了</p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Lua脚本+消息队列实现秒杀下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 1.执行Lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">        SECKILL_SCRIPT,</span><br><span class="line">        Collections.emptyList(),</span><br><span class="line">        voucherId.toString(),</span><br><span class="line">        userId.toString()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.判断结果是否为0</span></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.1 不为0，代表没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(result == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TODO 保存阻塞队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>压力测试：</strong>因为目前前两步骤做完，后面的加入阻塞队列执行时间就很短了~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411483.png" alt="image-20230207165653386"></p><blockquote><p>可以看到并发性能大大提升，请求响应值在0.1s左右，吞吐量可达到1500&#x2F;sec~ 速度飞起</p></blockquote><h3 id="6-3-秒杀优化-基于阻塞队列实现秒杀优化"><a href="#6-3-秒杀优化-基于阻塞队列实现秒杀优化" class="headerlink" title="6.3 秒杀优化-基于阻塞队列实现秒杀优化"></a>6.3 秒杀优化-基于阻塞队列实现秒杀优化</h3><p>VoucherOrderServiceImpl</p><p>修改下单动作，现在我们去下单时，是通过lua表达式去原子执行判断逻辑，如果判断我出来不为0 ，则要么是库存不足，要么是重复下单，返回错误信息，如果是0，则把下单的逻辑保存到队列中去，然后异步执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将代理对象声明成全局</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> IVoucherOrderService proxy;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 存放任务的阻塞队列</span></span><br><span class="line"><span class="comment">  * 特点：当一个线程尝试从队列中获取元素，没有元素，线程就会被阻塞，直到队列中有元素，线程才会被唤醒，并去获取元素</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> BlockingQueue &lt;VoucherOrder&gt; orderTasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span> &lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 思考一个问题：为什么要使用线程池呢，而不是直接创建一个线程？</span></span><br><span class="line"><span class="comment">  * 其实直接创建一个线程也行，但是创建一个线程开销很大的，用阻塞队列+线程池的形式实现了线程的的复用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 由于用户秒杀的时间可能是随时的，所以需要我们项目已启动 线程池就应该从消息队列获取任务，然后工作...</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@PostConstruct</span>类初始花后立刻执行</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@PostConstruct</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">     SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// 1.获取队列中的订单信息</span></span><br><span class="line">                 <span class="comment">// take()：获取和删除该队列的头部，如果没有则阻塞等待，直到有元素可用。所以使用该方法，如果有元素，线程就工作，没有线程就阻塞（卡）在这里，不用担心CPU会空转~</span></span><br><span class="line">                 <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                 <span class="comment">// 2.创建订单</span></span><br><span class="line">                 handleVoucherOrder(voucherOrder);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                 log.error(<span class="string">&quot;处理订单异常：&quot;</span>, e);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 创建订单</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> voucherOrder</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 其实这里可以不加锁了:（方式一）</span></span><br><span class="line"><span class="comment">      * ①:前面的Lua脚本已经进判断过库存和一人一单了，并且也可以保证执行的原子性（一次只有一个线程执行）。</span></span><br><span class="line"><span class="comment">      * ②:此时线程池中只有一个线程,是单线程哦~</span></span><br><span class="line"><span class="comment">      * ③:之后从消息队列取任务执行并不需要保证其原子性，因为就不存在并发安全问题了</span></span><br><span class="line"><span class="comment">      * 加锁算是一种兜底~</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 方式一：加分布式锁再创建订单</span></span><br><span class="line">     <span class="comment">// // 1.获取用户</span></span><br><span class="line">     <span class="comment">// // 注意：这里userId不能从UserHolder中去取，因为当前并不是主线程，而是子线程，无法拿到父线程ThreadLocal中的数据</span></span><br><span class="line">     <span class="comment">// Long userId = voucherOrder.getUserId();</span></span><br><span class="line">     <span class="comment">// // 2.获取分布式锁</span></span><br><span class="line">     <span class="comment">// RLock lock = redissonClient.getLock(&quot;lock:order:&quot; + userId);</span></span><br><span class="line">     <span class="comment">// boolean isLock = lock.tryLock();</span></span><br><span class="line">     <span class="comment">// // 3.判断是否获取锁成功</span></span><br><span class="line">     <span class="comment">// if (!isLock) &#123;</span></span><br><span class="line">     <span class="comment">//     // 获取锁失败，返回错误和重试</span></span><br><span class="line">     <span class="comment">//     log.error(&quot;不允许重复下单~&quot;);</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line">     <span class="comment">// try &#123;</span></span><br><span class="line">     <span class="comment">//     // 获取代理对象（只有通过代理对象调用方法，事务才会生效）</span></span><br><span class="line">     <span class="comment">//     // 注意：这里直接通过以下方式获取肯定是不行的。因为方法底层也是基于ThreadLocal获取的，子线程是无法获取父线程ThreadLocal中的对象的</span></span><br><span class="line">     <span class="comment">//     // 解决办法：在seckillVoucher中提前获取，然后通过消息队列传入或者声明成全局变量，从而就可以使用了</span></span><br><span class="line">     <span class="comment">//     // IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();</span></span><br><span class="line">     <span class="comment">//     proxy.createVoucherOrder(voucherOrder.getVoucherId());</span></span><br><span class="line">     <span class="comment">// &#125; finally &#123;</span></span><br><span class="line">     <span class="comment">//     lock.unlock();</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 方式二：直接创建订单</span></span><br><span class="line">     proxy.createVoucherOrder(voucherOrder);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// RedisScript需要加载seckill.lua文件，为了避免每次释放锁时都加载，我们可以提前加载好。否则每次读取文件就会产生IO，效率很低</span></span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">     SECKILL_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span> &lt;&gt;();</span><br><span class="line">     SECKILL_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;seckill.lua&quot;</span>));</span><br><span class="line">     SECKILL_SCRIPT.setResultType(Long.class);</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用Lua脚本+消息队列实现秒杀下单</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">     <span class="comment">// 获取用户id</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">     <span class="comment">// 1.执行Lua脚本</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">             SECKILL_SCRIPT,</span><br><span class="line">             Collections.emptyList(),</span><br><span class="line">             voucherId.toString(),</span><br><span class="line">             userId.toString()</span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.判断结果是否为0</span></span><br><span class="line">     <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// 2.1 不为0，代表没有购买资格</span></span><br><span class="line">         <span class="keyword">return</span> Result.fail(result == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 2.2 为0，有购买资格，把下单信息保存到消息队列</span></span><br><span class="line">     <span class="comment">// 2.3 创建订单</span></span><br><span class="line">     <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">     <span class="comment">// 2.4 订单id</span></span><br><span class="line">     <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">     voucherOrder.setId(orderId);</span><br><span class="line">     <span class="comment">// 2.5 用户id</span></span><br><span class="line">     voucherOrder.setUserId(userId);</span><br><span class="line">     <span class="comment">// 2.6代金券id</span></span><br><span class="line">     voucherOrder.setVoucherId(voucherId);</span><br><span class="line">     <span class="comment">// 2.7放入阻塞队列【理论上只要放入消息队列就有购买资格】</span></span><br><span class="line">     orderTasks.add(voucherOrder);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 3.获取代理对象</span></span><br><span class="line">     proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 4. 返回订单id</span></span><br><span class="line">     <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//注意：因为我们在Lua中已经校验过库存和一人一单了，这里就不需要校验拉~</span></span><br><span class="line">     <span class="comment">// 1.扣减库存</span></span><br><span class="line">     <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).</span><br><span class="line">             eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())</span><br><span class="line">             .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">             .update();</span><br><span class="line">     <span class="comment">//这里其实不判断也是OK的，因为Lua脚本中校验过了，所以一定是充足的</span></span><br><span class="line">     <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">         log.error(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.保存订单</span></span><br><span class="line">     <span class="built_in">this</span>.save(voucherOrder);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>并发测试：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111411347.png" alt="image-20230208233049812"></p><blockquote><p>可以看出平均每个请求40ms，并发达到1000&#x2F;sec，速度非常快。</p></blockquote><p><strong>小总结：</strong></p><p>秒杀业务的优化思路是什么？</p><ul><li>先利用Redis完成库存余量、一人一单判断，完成抢单业务</li><li>再将下单业务放入阻塞队列，利用独立线程异步下单</li><li>基于阻塞队列的异步秒杀存在哪些问题？<ul><li><code>内存限制问题</code>：因为我们使用的是JDK的阻塞队列，它使用的是内存。不加以限制的时候，在高并发的情况下，无数订单进入队列，可能导致内存溢出。所以我们在创建队列的时候设置了上限。另外如果此时队列已经存满了，又有新的任务忘里面塞，就放不进去了。</li><li><code>数据安全问题</code>：目前是基于内存来保存这些订单信息的，<ul><li>①如果内存突然宕机，那么内存中所有的订单信息都丢失了。从而就可能出现用户下单成功但是数据库里面并没有订单记录，造成数据不一致的问题。</li><li>②如果有一个线程从队列中取出了下单的任务，即将执行的时候发生了严重的事故（异常等），那么这个任务就没有执行，而且因为这个任务已经取出队列了，以后就再也不会执行了。从而这个任务就丢失了，再次出现数据不一致的问题。</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零、带你走进Redis的世界 ⭐必看必看⭐</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC01%E7%AB%A0_%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9BRedis%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC01%E7%AB%A0_%E5%B8%A6%E4%BD%A0%E8%B5%B0%E8%BF%9BRedis%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-NoSQL数据库简介"><a href="#1-NoSQL数据库简介" class="headerlink" title="1. NoSQL数据库简介"></a>1. NoSQL数据库简介</h1><h2 id="1-1-技术发展"><a href="#1-1-技术发展" class="headerlink" title="1.1  技术发展"></a>1.1  技术发展</h2><p><font color=blue>技术的分类</font></p><p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</p><p>2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p><p>3、解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p><h3 id="1-1-1-Web1-0时代"><a href="#1-1-1-Web1-0时代" class="headerlink" title="1.1.1.  Web1.0时代"></a>1.1.1.  Web1.0时代</h3><p>​Web1.0的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035121.png" alt="image-20220127230749355"></p><h3 id="1-1-2-Web2-0时代"><a href="#1-1-2-Web2-0时代" class="headerlink" title="1.1.2  Web2.0时代"></a>1.1.2  Web2.0时代</h3><p>​随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p><p>​                                    <img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035319.png" alt="image-20220127231010869"></p><h3 id="1-1-3-解决CPU及内存压力-采用分布式"><a href="#1-1-3-解决CPU及内存压力-采用分布式" class="headerlink" title="1.1.3.  解决CPU及内存压力(采用分布式)"></a>1.1.3.  解决CPU及内存压力(采用分布式)</h3><pre><code>    但是Session存在哪里?因为每次访问的服务器可能不是同一台.上次用户的数据保存在服务器1,用户是登录状态,下一次可能访问的服务器2,没有该用户的session,用户显示的未登录状态.</code></pre><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035577.png" alt="image-20220127231230724"></p><h3 id="1-1-4-解决IO压力"><a href="#1-1-4-解决IO压力" class="headerlink" title="1.1.4.  解决IO压力"></a>1.1.4.  解决IO压力</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035165.png" alt="image-20220127231339820"></p><h2 id="1-2-NoSQL数据库"><a href="#1-2-NoSQL数据库" class="headerlink" title="1.2.  NoSQL数据库"></a>1.2.  NoSQL数据库</h2><h3 id="1-2-1-NoSQL数据库概述"><a href="#1-2-1-NoSQL数据库概述" class="headerlink" title="1.2.1.  NoSQL数据库概述"></a>1.2.1.  NoSQL数据库概述</h3><p><strong>NoSQL</strong>(NoSQL &#x3D; Not Only SQL )，意即“不仅仅是SQL”，泛指&#x3D;&#x3D;<strong>非关系型的数据库</strong>&#x3D;&#x3D;。 </p><p><font color=red>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</font></p><ul><li><p>不遵循SQL标准。</p></li><li><p>不支持ACID。</p></li><li><p>远超于SQL的性能。</p></li></ul><h3 id="1-2-2-NoSQL适用场景"><a href="#1-2-2-NoSQL适用场景" class="headerlink" title="1.2.2  NoSQL适用场景"></a>1.2.2  NoSQL适用场景</h3><ul><li><p>对数据高并发的读写</p></li><li><p>海量数据的读写</p></li><li><p>对数据高可扩展性的</p></li></ul><h3 id="1-2-3-NoSQL不适用场景"><a href="#1-2-3-NoSQL不适用场景" class="headerlink" title="1.2.3  NoSQL不适用场景"></a>1.2.3  NoSQL不适用场景</h3><ul><li><p>需要事务支持</p></li><li><p>基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p></li><li><p><font color=red>（用不着 sql 的和用了 sql 也不行的情况，请考虑用 NoSql）</font></p></li></ul><h3 id="1-2-4-Memcache"><a href="#1-2-4-Memcache" class="headerlink" title="1.2.4 Memcache"></a>1.2.4 Memcache</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035703.png" alt="image-20220127232722449"></p><h3 id="1-2-5-Redis"><a href="#1-2-5-Redis" class="headerlink" title="1.2.5 Redis"></a>1.2.5 Redis</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035489.png" alt="image-20220127232802506"></p><h3 id="1-2-6-MongoDB"><a href="#1-2-6-MongoDB" class="headerlink" title="1.2.6. MongoDB"></a>1.2.6. MongoDB</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035726.png" alt="image-20220127232953050"></p><h2 id="1-3-行式存储数据库（大数据时代）"><a href="#1-3-行式存储数据库（大数据时代）" class="headerlink" title="1.3. 行式存储数据库（大数据时代）"></a>1.3. 行式存储数据库（大数据时代）</h2><h3 id="1-3-1-行式数据库"><a href="#1-3-1-行式数据库" class="headerlink" title="1.3.1. 行式数据库"></a>1.3.1. 行式数据库</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035879.png" alt="image-20220127233719653"></p><h3 id="1-3-2-列式数据库"><a href="#1-3-2-列式数据库" class="headerlink" title="1.3.2. 列式数据库"></a>1.3.2. 列式数据库</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035423.png" alt="image-20220127233756939"></p><h2 id="1-4-图关系型数据库"><a href="#1-4-图关系型数据库" class="headerlink" title="1.4. 图关系型数据库"></a>1.4. 图关系型数据库</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020043512.png" alt="image-20220127233900089"></p><p>主要应用：社会关系，公共交通网络，地图及网络拓谱(n*(n-1)&#x2F;2)</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035305.png" alt="image-20220127233919283"></p><h2 id="1-5-DB-Engines-数据库排名"><a href="#1-5-DB-Engines-数据库排名" class="headerlink" title="1.5. DB-Engines 数据库排名"></a>1.5. DB-Engines 数据库排名</h2><p><a href="http://db-engines.com/en/ranking">http://db-engines.com/en/ranking</a></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035877.png" alt="image-20220127234052885"></p><h1 id="2-Redis-概述安装"><a href="#2-Redis-概述安装" class="headerlink" title="2. Redis 概述安装"></a>2. Redis 概述安装</h1><p>➢ Redis 是一个开源的 &#x3D;&#x3D;key-value 存储系统&#x3D;&#x3D;。 </p><p>➢ 和 Memcached 类似，它支持存储的 value 类型相对更多，包括 &#x3D;&#x3D;string(字符串)、 list(链表)、set(集合)、zset(sorted set –有序集合)和 hash（哈希类型）&#x3D;&#x3D;。</p><p> ➢ 这些数据类型都支持 push&#x2F;pop、add&#x2F;remove 及取交集并集和差集及更丰富的操作， 而且这些操作都是原子性的。 </p><p>➢ 在此基础上，Redis 支持各种不同方式的排序。 </p><p>➢ 与 memcached 一样，为了保证效率，&#x3D;&#x3D;数据都是缓存在内存中&#x3D;&#x3D;。 </p><p>➢ 区别的是 Redis 会&#x3D;&#x3D;周期性的把更新的数据写入磁盘&#x3D;&#x3D;或者把修改操作&#x3D;&#x3D;写入追加的记 录文件&#x3D;&#x3D;。 </p><p>➢ 并且在此基础上实现了 &#x3D;&#x3D;master-slave(主从)同步&#x3D;&#x3D;。</p><h2 id="2-1-应用场景"><a href="#2-1-应用场景" class="headerlink" title="2.1. 应用场景"></a>2.1. 应用场景</h2><h3 id="2-1-1-配合关系型数据库做高速缓存"><a href="#2-1-1-配合关系型数据库做高速缓存" class="headerlink" title="2.1.1. 配合关系型数据库做高速缓存"></a>2.1.1. 配合关系型数据库做高速缓存</h3><p>➢ 高频次，热门访问的数据，降低数据库 IO </p><p>➢ 分布式架构，做 session 共享</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020035920.png" alt="image-20220130164924992"></p><h3 id="2-1-2-多样的数据结构存储持久化数据"><a href="#2-1-2-多样的数据结构存储持久化数据" class="headerlink" title="2.1.2. 多样的数据结构存储持久化数据"></a>2.1.2. 多样的数据结构存储持久化数据</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036894.png" alt="image-20220130165019016"></p><h2 id="2-2-Redis-安装"><a href="#2-2-Redis-安装" class="headerlink" title="2.2. Redis 安装"></a>2.2. Redis 安装</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036223.png" alt="image-20220130165138807"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036750.png" alt="image-20220130165209747"></p><h3 id="2-2-1-安装版本"><a href="#2-2-1-安装版本" class="headerlink" title="2.2.1. 安装版本"></a>2.2.1. 安装版本</h3><p>➢ 6.2.1 for Linux（&#x3D;&#x3D;redis-6.2.1.tar.gz&#x3D;&#x3D;） </p><p>➢ 不用考虑在 windows 环境下对 Redis 的支持</p><h3 id="2-2-2-安装步骤"><a href="#2-2-2-安装步骤" class="headerlink" title="2.2.2. 安装步骤"></a>2.2.2. 安装步骤</h3><h4 id="2-2-2-1-准备工作：下载安装最新版的-gcc-编译器-安装-C-语言的编译环境"><a href="#2-2-2-1-准备工作：下载安装最新版的-gcc-编译器-安装-C-语言的编译环境" class="headerlink" title="2.2.2.1. 准备工作：下载安装最新版的 gcc 编译器  安装 C 语言的编译环境"></a>2.2.2.1. 准备工作：下载安装最新版的 gcc 编译器  安装 C 语言的编译环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl scl-utils-build </span><br><span class="line">yum install -y devtoolset-8-toolchain </span><br><span class="line">scl enable devtoolset-8 bash </span><br></pre></td></tr></table></figure><p>测试 gcc 版本</p><p><strong>gcc –version</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036159.png" alt="image-20220130170103407"></p><h4 id="2-2-2-2-下载-redis-6-2-1-tar-gz-放-opt-目录"><a href="#2-2-2-2-下载-redis-6-2-1-tar-gz-放-opt-目录" class="headerlink" title="2.2.2.2. 下载 redis-6.2.1.tar.gz 放&#x2F;opt 目录"></a>2.2.2.2. 下载 redis-6.2.1.tar.gz 放&#x2F;opt 目录</h4><h4 id="2-2-2-3-解压命令：tar-zxvf-redis-6-2-1-tar-gz"><a href="#2-2-2-3-解压命令：tar-zxvf-redis-6-2-1-tar-gz" class="headerlink" title="2.2.2.3. 解压命令：tar -zxvf redis-6.2.1.tar.gz"></a>2.2.2.3. 解压命令：tar -zxvf redis-6.2.1.tar.gz</h4><h4 id="2-2-2-4-解压完成后进入目录：cd-redis-6-2-1"><a href="#2-2-2-4-解压完成后进入目录：cd-redis-6-2-1" class="headerlink" title="2.2.2.4. 解压完成后进入目录：cd redis-6.2.1"></a>2.2.2.4. 解压完成后进入目录：cd redis-6.2.1</h4><h4 id="2-2-2-5-在-redis-6-2-1-目录下再次执行-make-命令（只-是编译好）"><a href="#2-2-2-5-在-redis-6-2-1-目录下再次执行-make-命令（只-是编译好）" class="headerlink" title="2.2.2.5. 在 redis-6.2.1 目录下再次执行 make 命令（只 是编译好）"></a>2.2.2.5. 在 redis-6.2.1 目录下再次执行 make 命令（只 是编译好）</h4><h4 id="2-2-2-6-如果没有准备好-C-语言编译环境，make-会报错-—Jemalloc-jemalloc-h：没有那个文件"><a href="#2-2-2-6-如果没有准备好-C-语言编译环境，make-会报错-—Jemalloc-jemalloc-h：没有那个文件" class="headerlink" title="2.2.2.6. 如果没有准备好 C 语言编译环境，make 会报错 —Jemalloc&#x2F;jemalloc.h：没有那个文件"></a>2.2.2.6. 如果没有准备好 C 语言编译环境，make 会报错 —Jemalloc&#x2F;jemalloc.h：没有那个文件</h4><p> 解决方案：先安装gcc,之后运行 <strong>make distclean</strong> </p><h4 id="2-2-2-8-在-redis-6-2-1-目录下再次执行-make-命令（只-是编译好）"><a href="#2-2-2-8-在-redis-6-2-1-目录下再次执行-make-命令（只-是编译好）" class="headerlink" title="2.2.2.8. 在 redis-6.2.1 目录下再次执行 make 命令（只 是编译好）"></a>2.2.2.8. 在 redis-6.2.1 目录下再次执行 make 命令（只 是编译好）</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036719.png" alt="image-20220130165912341"></p><h4 id="2-2-2-9-跳过-make-test-继续执行-make-install"><a href="#2-2-2-9-跳过-make-test-继续执行-make-install" class="headerlink" title="2.2.2.9. 跳过 make test 继续执行: make install"></a>2.2.2.9. 跳过 make test 继续执行: make install</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020044200.png" alt="image-20220130165934887"></p><h3 id="2-2-3-安装目录：-usr-local-bin"><a href="#2-2-3-安装目录：-usr-local-bin" class="headerlink" title="2.2.3. 安装目录：&#x2F;usr&#x2F;local&#x2F;bin"></a>2.2.3. 安装目录：&#x2F;usr&#x2F;local&#x2F;bin</h3><p>查看默认安装目录： </p><ul><li><p>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何 </p></li><li><p>redis-check-aof：修复有问题的 AOF 文件，rdb 和 aof 后面讲 </p></li><li><p>redis-check-dump：修复有问题的 dump.rdb 文件 </p></li><li><p>redis-sentinel：<strong>Redis 集群使用</strong> </p></li><li><p>redis-server：Redis 服务器启动命令</p></li><li><p>redis-cli：<strong>客户端，操作入口</strong></p></li></ul><h3 id="2-2-4-前台启动（不推荐）"><a href="#2-2-4-前台启动（不推荐）" class="headerlink" title="2.2.4. 前台启动（不推荐）"></a>2.2.4. 前台启动（不推荐）</h3><p>前台启动，命令行窗口不能关闭，否则服务器停止</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036078.png" alt="image-20220130170604162"></p><h3 id="2-2-5-后台启动（推荐）"><a href="#2-2-5-后台启动（推荐）" class="headerlink" title="2.2.5. 后台启动（推荐）"></a>2.2.5. 后台启动（推荐）</h3><h4 id="2-2-5-1-备份-redis-conf"><a href="#2-2-5-1-备份-redis-conf" class="headerlink" title="2.2.5.1.备份 redis.conf"></a>2.2.5.1.备份 redis.conf</h4><p>拷贝一份 redis.conf 到其他目录,防止后期把文件修改坏无法恢复.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/module/redis-6.2.6/redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure><h4 id="2-2-5-2-后台启动设置-daemonize-no-改成-yes"><a href="#2-2-5-2-后台启动设置-daemonize-no-改成-yes" class="headerlink" title="2.2.5.2.后台启动设置 &#x3D;&#x3D;daemonize no 改成 yes&#x3D;&#x3D;"></a>2.2.5.2.后台启动设置 &#x3D;&#x3D;daemonize no 改成 yes&#x3D;&#x3D;</h4><p>修改 redis.conf(257 行)文件将里面的 daemonize no 改成 yes，让服务在后台启动</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036350.png" alt="image-20220130171051853"></p><h4 id="2-2-5-3-Redis-启动"><a href="#2-2-5-3-Redis-启动" class="headerlink" title="2.2.5.3.Redis 启动"></a>2.2.5.3.Redis 启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure><h4 id="2-2-5-4-用客户端访问：redis-cli"><a href="#2-2-5-4-用客户端访问：redis-cli" class="headerlink" title="2.2.5.4.用客户端访问：redis-cli"></a>2.2.5.4.用客户端访问：redis-cli</h4><h4 id="2-2-5-5-多个端口可以：redis-cli-p6379"><a href="#2-2-5-5-多个端口可以：redis-cli-p6379" class="headerlink" title="2.2.5.5.多个端口可以：redis-cli -p6379"></a>2.2.5.5.多个端口可以：redis-cli -p6379</h4><h4 id="2-2-5-6-测试验证：-ping"><a href="#2-2-5-6-测试验证：-ping" class="headerlink" title="2.2.5.6.测试验证： ping"></a>2.2.5.6.测试验证： ping</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036830.png" alt="image-20220130171216335"></p><h4 id="2-2-5-7-Redis-关闭"><a href="#2-2-5-7-Redis-关闭" class="headerlink" title="2.2.5.7.Redis 关闭"></a>2.2.5.7.Redis 关闭</h4><p><font color=red>shutdown+quit</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036847.png" alt="image-20220130171304170"></p><p><font color=red>exit+kill</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036910.png" alt="image-20220130171340864"></p><h3 id="2-2-6-Redis-介绍相关知识"><a href="#2-2-6-Redis-介绍相关知识" class="headerlink" title="2.2.6. Redis 介绍相关知识"></a>2.2.6. Redis 介绍相关知识</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036919.png" alt="image-20220130171416048"></p><p>Redis 是**<font color=red>单线程+多路 IO 复用技术 </font>**</p><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则 阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启 动线程执行（比如使用线程池）</p><p>&#x3D;&#x3D;串行 vs 多线程+锁（memcached） vs 单线程+多路 IO 复用(Redis)&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036606.png" alt="image-20220130171454534"></p><h1 id="3-常用五大数据类型"><a href="#3-常用五大数据类型" class="headerlink" title="3. 常用五大数据类型"></a>3. 常用五大数据类型</h1><p>哪里去获得 redis 常见数据类型操作命令  <a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><h2 id="3-1-Redis-键-key"><a href="#3-1-Redis-键-key" class="headerlink" title="3.1. Redis 键(key)"></a>3.1. Redis 键(key)</h2><ul><li><p>**keys *** 查看当前库所有 key (匹配：keys *1)</p></li><li><p><strong>exists key</strong> 判断某个 key 是否存在 </p></li><li><p><strong>type key</strong> 查看你的 key 是什么类型 </p></li><li><p><strong>del key</strong> 删除指定的 key 数据</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036455.png" alt="image-20220130172127695"></p><ul><li>&#x3D;&#x3D;unlink key 根据 value 选择非阻塞删除&#x3D;&#x3D;</li></ul><p>仅将 keys 从 keyspace 元数据中删除，真正的删除会在后续异步操作。</p><ul><li><p><strong>expire key 10</strong> 10 秒钟：为给定的 key 设置过期时间</p></li><li><p><strong>ttl key</strong> 查看还有多少秒过期，-1 表示永不过期，-2 表示已过期</p></li><li><p><strong>select</strong> 命令切换数据库</p></li><li><p><strong>dbsize</strong> 查看当前数据库的 key 的数量</p></li><li><p><strong>flushdb</strong> 清空当前库 </p></li><li><p><strong>flushall</strong> 通杀全部库</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036813.png" alt="image-20220130172423322"></p><h2 id="3-2-Redis-字符串-String"><a href="#3-2-Redis-字符串-String" class="headerlink" title="3.2. Redis 字符串(String)"></a>3.2. Redis 字符串(String)</h2><h3 id="3-2-1-简介"><a href="#3-2-1-简介" class="headerlink" title="3.2.1. 简介"></a>3.2.1. 简介</h3><ul><li>&#x3D;&#x3D;String 是 Redis 最基本的类型&#x3D;&#x3D;，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</li><li>&#x3D;&#x3D;String 类型是二进制安全的&#x3D;&#x3D;。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片 或者序列化的对象。</li><li>String 类型是 Redis 最基本的数据类型，&#x3D;&#x3D;一个 Redis 中字符串 value 最多可以是 512M&#x3D;&#x3D;</li></ul><h3 id="3-2-2-常用命令"><a href="#3-2-2-常用命令" class="headerlink" title="3.2.2. 常用命令"></a>3.2.2. 常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set &lt;key&gt; &lt;value&gt; #添加键值对</span><br></pre></td></tr></table></figure><p>注意: 当数据库中 key 不存在时，可以将 key-value 添加数据,如果存在时，新value将覆盖旧value.</p><ul><li><p><strong>get</strong>  <key> 查询对应键值</p></li><li><p><strong>append</strong> <key> <value> 将给定的<value> 追加到原值的末尾</p></li><li><p><strong>strlen</strong> <key>获得值的长度</p></li><li><p><strong>setnx <key> <value></strong> 只有在 key 不存在时  设置 key 的值</p></li><li><p><strong>incr</strong> <key></p><p>将 key 中储存的数字值增1</p><p>只能对数字值操作，如果为空，新增值为1</p></li><li><p><strong>decr</strong> <key></p><p>将 key 中储存的数字值减1</p><p>只能对数字值操作，如果为空，新增值为-1</p></li><li><p><strong>incrby &#x2F; decrby</strong> <key>&lt;步长&gt; 将 key 中储存的数字值增减。自定义步长。</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036638.png" alt="image-20220130173641841"></p><ul><li><p><strong>mset</strong> <key1><value1><key2><value2> ….. </p><p>同时设置一个或多个 key-value对 </p></li><li><p><strong>mget</strong> <key1><key2><key3> …..</p><p>同时获取一个或多个 value </p></li><li><p><strong>msetnx</strong> <key1><value1><key2><value2> ….. </p><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p></li></ul><p><font color=red><strong>原子性，有一个失败则都失败</strong></font></p><ul><li><p><strong>getrange</strong> <key>&lt;起始位置&gt;&lt;结束位置&gt;</p><p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p></li><li><p><strong>setrange</strong> <key>&lt;起始位置&gt;<value></p><p>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0****开始</strong>)。</p></li><li><p><strong>setex <key>&lt;****过期时间****&gt;<value></strong></p><p>设置键值的同时，设置过期时间，单位秒。</p></li><li><p><strong>getset</strong> <key><value></p><p>以新换旧，设置了新值同时获得旧值。</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036591.png" alt="image-20220130174027591"></p><h3 id="3-2-3-数据结构"><a href="#3-2-3-数据结构" class="headerlink" title="3.2.3. 数据结构"></a>3.2.3. 数据结构</h3><p>String的数据结构为&#x3D;&#x3D;简单动态字符串&#x3D;&#x3D;(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用&#x3D;&#x3D;预分配冗余空间&#x3D;&#x3D;的方式来减少内存的频繁分配.</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020044463.png" alt="image-20220130174207172"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h2 id="3-3-Redis-列表-List"><a href="#3-3-Redis-列表-List" class="headerlink" title="3.3. Redis 列表(List)"></a>3.3. Redis 列表(List)</h2><h3 id="3-3-1-简介"><a href="#3-3-1-简介" class="headerlink" title="3.3.1. 简介"></a>3.3.1. 简介</h3><p><strong><font color=red>单键多值</font></strong></p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个&#x3D;&#x3D;双向链表&#x3D;&#x3D;，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036957.png" alt="image-20220130174353132"></p><h3 id="3-3-2-常用命令"><a href="#3-3-2-常用命令" class="headerlink" title="3.3.2. 常用命令"></a>3.3.2. 常用命令</h3><ul><li><p>&#x3D;&#x3D;<strong>lpush&#x2F;rpush</strong>&#x3D;&#x3D; <key><value1><value2><value3> …. 从左边&#x2F;右边插入一个或多个值。</p></li><li><p>&#x3D;&#x3D;<strong>lpop&#x2F;rpop</strong>&#x3D;&#x3D; <key>从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</p></li><li><p><strong>rpop&#x2F;lpush</strong> <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</p></li><li><p><strong>lrange</strong> <key><start><stop> 按照索引下标获得元素(从左到右)</p></li><li><p>&#x3D;&#x3D;<strong>lrange mylist 0 -1</strong>&#x3D;&#x3D;  0左边第一个，<font color=red>-1右边第一个，（0-1表示获取所有）</font></p></li><li><p><strong>lindex</strong> <key><index>按照索引下标获得元素(从左到右)</p></li><li><p><strong>llen</strong> <key> 获得列表长度 </p></li><li><p><strong>linsert <key> before</strong> <value><newvalue>在<value>的后面插入<newvalue>插入值</p></li><li><p><strong>lrem <key><n><value></strong> 从左边删除n个value(从左到右)</p></li><li><p><strong>lset</strong><key><index><value>将列表key下标为index的值替换成value</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036311.png" alt="image-20220130175139456"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020046384.png" alt="image-20220130201405991"></p><h3 id="3-2-3-数据结构-1"><a href="#3-2-3-数据结构-1" class="headerlink" title="3.2.3 数据结构"></a>3.2.3 数据结构</h3><p>List 的数据结构为&#x3D;&#x3D;快速链表 quickList&#x3D;&#x3D;。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也即是 压缩列表。 </p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。 当数据量比较多的时候才会改成 quicklist。 因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只 是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020036175.png" alt="image-20220210214301430"></p><p>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指 针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h3 id="3-2-4-补充：原子性"><a href="#3-2-4-补充：原子性" class="headerlink" title="3.2.4 补充：原子性"></a>3.2.4 补充：原子性</h3><p><font color=red>所谓原子操作是指不会被线程调度机制打断的操作</font> ；<br>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另<br>一个线程）。<br>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中<br>断只能发生于指令之间。<br>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。<br>Redis 单命令的原子性主要得益于 Redis的单线程。</p><p>案例：<br>java 中的 i++是否是原子操作？不是<br>i&#x3D;0;两个线程分别对 i进行++100次,值是多少？ </p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037909.png" alt="image-20220210223238563"></p><h2 id="3-4-Redis-集合-Set"><a href="#3-4-Redis-集合-Set" class="headerlink" title="3.4. Redis 集合(Set)"></a>3.4. Redis 集合(Set)</h2><h3 id="3-4-1-简介"><a href="#3-4-1-简介" class="headerlink" title="3.4.1. 简介"></a>3.4.1. 简介</h3><p>Redis set 对外提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以<font color=red>自动排重</font>的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选 择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</p><p>Redis 的 Set 是 &#x3D;&#x3D;string 类型的无序集合&#x3D;&#x3D;。它底层其实是一个 value 为 null 的 &#x3D;&#x3D;hash 表&#x3D;&#x3D;，所 以添加，删除，查找的复杂度都是 O(1)。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是 O(1)，数据增加，查找数据的 时间不变</p><h3 id="3-4-2-常用命令"><a href="#3-4-2-常用命令" class="headerlink" title="3.4.2. 常用命令"></a>3.4.2. 常用命令</h3><ul><li><p><strong>sadd  <key><value1><value2> …..</strong> 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p></li><li><p><strong>smembers</strong> 取出该集合的所有值</p></li><li><p><strong>sismember<key><value></strong> 判断集合是否为含有该值，有 1，没有 0</p></li><li><p><strong>scard <key></strong> 返回该集合的元素个数。</p></li><li><p><strong>srem  <key><value1><value2> …</strong> 删除集合中的某个元素。 </p></li><li><p>**spop <key>**随机从该集合中吐出一个值。</p></li><li><p>**srandmember <key><n>**随机从该集合中取出 n 个值。不会从集合中删除 。</p></li><li><p><strong>move <source><destination>value</strong> 把集合中一个值从一个集合移动到另一个集合</p></li><li><p>**sinter <key1><key2>**返回两个集合的&#x3D;&#x3D;交集&#x3D;&#x3D;元素。</p></li><li><p>**sunion <key1><key2>**返回两个集合的&#x3D;&#x3D;并集&#x3D;&#x3D;元素。</p></li><li><p>**sdiff <key1><key2>**返回两个集合的&#x3D;&#x3D;差集&#x3D;&#x3D;元素(key1 中的，不包含 key2中的)</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037224.png" alt="image-20220210215939742"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037551.png" alt="image-20220210220038515"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037926.png" alt="image-20220210220053731"></p><h3 id="3-4-3-数据结构"><a href="#3-4-3-数据结构" class="headerlink" title="3.4.3. 数据结构"></a>3.4.3. 数据结构</h3><p>Set 数据结构是 &#x3D;&#x3D;dict字典&#x3D;&#x3D;，字典是用&#x3D;&#x3D;哈希表&#x3D;&#x3D;实现的。<br>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。<br>Redis的 set结构也是一样，它的内部也使用 hash结构，所有的 value都指向同一个内部值。</p><h2 id="3-5-Redis-哈希-Hash"><a href="#3-5-Redis-哈希-Hash" class="headerlink" title="3.5. Redis 哈希(Hash)"></a>3.5. Redis 哈希(Hash)</h2><h3 id="3-5-1-简介"><a href="#3-5-1-简介" class="headerlink" title="3.5.1. 简介"></a>3.5.1. 简介</h3><p>Redis hash 是一个键值对集合。<br>Redis hash 是一个 &#x3D;&#x3D;string 类型的 field 和 value 的映射表&#x3D;&#x3D;，hash 特别适合用于存储对象。<br>类似 Java 里面的 Map&lt;String,Object&gt;<br>用户 ID 为查找的 key，存储的 value用户对象包含姓名，年龄，生日等信息，如果用<br>普通的 key&#x2F;value结构来存储<br><strong>主要有以下 3 种存储方式：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037072.png" alt="image-20220210220339056"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037639.png" alt="image-20220210220359629"></p><h3 id="3-5-2-常用命令"><a href="#3-5-2-常用命令" class="headerlink" title="3.5.2. 常用命令"></a>3.5.2. 常用命令</h3><ul><li><strong>hset <key><field><value>:</strong> 给<key>集合中的 <field>键赋值<value></li><li>**hget <key1><field>: **从<key1>集合<field>取出 value</li><li>**hmset <key1><field1><value1><field2><value2>… : ** 批量设置 hash 的值</li><li>**hexists<key1><field>: **查看哈希表 key 中，给定域 field 是否存在。</li><li>**hkeys <key>: **列出该 hash 集合的所有 field</li><li>**hvals <key>: **列出该 hash 集合的所有 value</li><li>**hincrby <key><field><increment>: **为哈希表 key 中的域 field 的值加上增量 1 -1</li><li>**hsetnx <key><field><value>: **将哈希表 key 中的域 field 的值设置为 value ，当且仅当域<br>field 不存在</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037710.png" alt="image-20220210220723448"></p><h3 id="3-5-3-数据结构"><a href="#3-5-3-数据结构" class="headerlink" title="3.5.3. 数据结构"></a>3.5.3. 数据结构</h3><p>Hash 类型对应的数据结构是两种：&#x3D;&#x3D;ziplist（压缩列表），hashtable（哈希表）&#x3D;&#x3D;。当field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p><h2 id="3-6-Redis-有序集合-Zset-sorted-set"><a href="#3-6-Redis-有序集合-Zset-sorted-set" class="headerlink" title="3.6. Redis 有序集合 Zset(sorted set)"></a>3.6. Redis 有序集合 Zset(sorted set)</h2><h3 id="3-6-1-简介"><a href="#3-6-1-简介" class="headerlink" title="3.6.1. 简介"></a>3.6.1. 简介</h3><p>Redis 有序集合 zset与普通集合 set 非常相似，是一个&#x3D;&#x3D;没有重复元素的字符串集合&#x3D;&#x3D;。<br>不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。<font color=red>集合的成员是唯一的，但是评分可以是重复了</font> 。<br>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。<br>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h3 id="3-6-2-常用命令"><a href="#3-6-2-常用命令" class="headerlink" title="3.6.2. 常用命令"></a>3.6.2. 常用命令</h3><ul><li><strong>zadd <key><score1><value1><score2><value2>… :</strong> 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</li><li><strong>zrange <key><start><stop> [WITHSCORES]:</strong> 返回有序集 key 中下标在<start><stop>之间的元素 . 带 WITHSCORES，可以让分数一起和值返回到结果集。</li><li>**zrangebyscore key minmax [withscores] [limit offset count]:**返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。 &#x3D;&#x3D;有序集成员按 score 值递增(从小到大)次序排列&#x3D;&#x3D;。</li><li><strong>zrevrangebyscore key maxmin [withscores] [limit offset count]:</strong> 同上，改为从大到小排列。</li><li><strong>zincrby <key><increment><value>:</strong> 为元素的 score加上增量</li><li><strong>zrem <key><value>:</strong> 删除该集合下，指定值的元素</li><li><strong>zcount <key><min><max>:</strong> 统计该集合，分数区间内的元素个数</li><li><strong>zrank <key><value>:</strong> 返回该值在集合中的排名，从 0 开始。</li></ul><p>案例：<font color=red>如何利用 zset 实现一个文章访问量的排行榜？</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037958.png" alt="image-20220210221727819"></p><h3 id="3-6-3-数据结构"><a href="#3-6-3-数据结构" class="headerlink" title="3.6.3. 数据结构"></a>3.6.3. 数据结构</h3><p>SortedSet(zset)是 Redis 提供的一个非常特别的数据结构，一方面它<font color=red>等价于 Java的数据结构 Map&lt;String, Double&gt;</font>，可以给每一个元素 value 赋予一个权重 score，另一方面它又<font color=red>类似于 TreeSet</font>，<strong>内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</strong></p><p><strong>zset 底层使用了两个数据结构:</strong><br>（1）hash，hash 的作用就是关联元素 value 和权重 score，保障元素 &#x3D;&#x3D;value 的唯一性&#x3D;&#x3D;，可以通过元素 value 找到相应的 score 值。<br>（2）跳跃表，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。</p><h3 id="3-6-4-跳跃表（跳表）"><a href="#3-6-4-跳跃表（跳表）" class="headerlink" title="3.6.4. 跳跃表（跳表）"></a>3.6.4. 跳跃表（跳表）</h3><p><font color=blue>1、简介</font><br>有序集合在生活中比较常见，例如&#x3D;&#x3D;根据成绩对学生排名，根据得分对玩家排名等&#x3D;&#x3D;。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><p><font color=blue>2、实例</font><br>对比有序链表和跳跃表，从链表中查询出 51</p><p>（1） 有序链表</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037399.png" alt="image-20220210222530470"></p><p>（2） 跳跃表</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037294.png" alt="image-20220210222735699"></p><p>从此可以看出&#x3D;&#x3D;跳跃表比有序链表效率要高&#x3D;&#x3D;</p><p><a href="https://www.aliyundrive.com/s/ebUnLzhokVr">https://www.aliyundrive.com/s/ebUnLzhokVr</a></p><h1 id="4-Redis-Redis-配置文件介绍"><a href="#4-Redis-Redis-配置文件介绍" class="headerlink" title="4. Redis Redis 配置文件介绍"></a>4. Redis Redis 配置文件介绍</h1><p>自定义目录：<code>/etc/redis.conf</code></p><h2 id="4-1-Units-单位"><a href="#4-1-Units-单位" class="headerlink" title="4.1. ###Units 单位###"></a>4.1. ###Units 单位###</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037567.png" alt="image-20220214234408885"></p><h2 id="4-2-INCLUDES-包含"><a href="#4-2-INCLUDES-包含" class="headerlink" title="4.2. ###INCLUDES 包含###"></a>4.2. ###INCLUDES 包含###</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037584.png" alt="image-20220214234519712"></p><p>类似 jsp 中的 include，多实例的情况可以把公用的配置文件提取出来</p><h2 id="4-3-网络相关配置"><a href="#4-3-网络相关配置" class="headerlink" title="4.3. ### 网络相关配置"></a>4.3. ### 网络相关配置</h2><h3 id="4-3-1-bind"><a href="#4-3-1-bind" class="headerlink" title="4.3.1. bind"></a>4.3.1. bind</h3><p>默认情况 <strong>bind&#x3D;127.0.0.1</strong> 只能接受本机的访问请求. 不写的情况下，无限制接受任何 ip 地址的访问<br>生产环境肯定要写你应用服务器的地址；<strong>服务器是需要远程访问的，所以需要将其注释掉</strong></p><p><strong><font color=red>如果开启了 protected-mode，那么在没有设定 bind ip且没有设密码的情况下，Redis<br>只允许接受本机的响应</font></strong>(后续将对其进行关闭)</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037102.png" alt="image-20220216215546907"></p><h3 id="4-3-2-protected-mode"><a href="#4-3-2-protected-mode" class="headerlink" title="4.3.2. protected- -mode"></a>4.3.2. protected- -mode</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037550.png" alt="image-20220216220224864"></p><h3 id="4-3-3-Port"><a href="#4-3-3-Port" class="headerlink" title="4.3.3. Port"></a>4.3.3. Port</h3><p>端口号，默认 6379</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020037319.png" alt="image-20220216220542814"></p><h3 id="4-3-4-tcp–backlog"><a href="#4-3-4-tcp–backlog" class="headerlink" title="4.3.4. tcp–backlog"></a>4.3.4. tcp–backlog</h3><p>设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog队列总和&#x3D;未完成三次握手队列 + 已经完成三次握手队列。<br>在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题。<br>注意 Linux内核会将这个值减小到&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn 的值（128），所以需要确认增大&#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn 和&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog（128）两个值来达到想要的效果</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038133.png" alt="image-20220216220745374"></p><h3 id="4-3-5-timeout"><a href="#4-3-5-timeout" class="headerlink" title="4.3.5. timeout"></a>4.3.5. timeout</h3><p>一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能。即永不关闭。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038542.png" alt="image-20220216221234044"></p><h3 id="4-3-6-tcp—keepalive"><a href="#4-3-6-tcp—keepalive" class="headerlink" title="4.3.6. tcp—keepalive"></a>4.3.6. tcp—keepalive</h3><p>对访问客户端的一种心跳检测，每隔n 秒检测一次。<br>单位为秒，如果设置为 0，则不会进行 Keepalive检测，建议设置成 60</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038855.png" alt="image-20220216221701077"></p><h2 id="4-4-GENERAL-通用"><a href="#4-4-GENERAL-通用" class="headerlink" title="4.4. ###GENERAL 通用###"></a>4.4. ###GENERAL 通用###</h2><h3 id="4-4-1-daemonize"><a href="#4-4-1-daemonize" class="headerlink" title="4.4.1. daemonize"></a>4.4.1. daemonize</h3><p>是否为后台进程，设置为 yes. 守护进程，后台启动</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038309.png" alt="image-20220216222015341"></p><h3 id="4-4-2-pidfile"><a href="#4-4-2-pidfile" class="headerlink" title="4.4.2. pidfile"></a>4.4.2. pidfile</h3><p>存放 pid 文件的位置，每个实例会产生一个不同的 pid文件</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038949.png" alt="image-20220216222549532"></p><h3 id="4-4-3-loglevel"><a href="#4-4-3-loglevel" class="headerlink" title="4.4.3. loglevel"></a>4.4.3. loglevel</h3><p>指定日志记录级别，Redis 总共支持四个级别：&#x3D;&#x3D;debug、verbose、notice、warning&#x3D;&#x3D;，默认为 notice<br>四个级别根据使用阶段来选择，生产环境选择 notice 或者 warning</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038461.png" alt="image-20220216222621998"></p><h3 id="4-4-4-logfile"><a href="#4-4-4-logfile" class="headerlink" title="4.4.4. logfile"></a>4.4.4. logfile</h3><p>日志文件名称</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038574.png" alt="image-20220216222740748"></p><h3 id="4-4-5-databases-16"><a href="#4-4-5-databases-16" class="headerlink" title="4.4.5. databases 16"></a>4.4.5. databases 16</h3><p>设定库的数量 默认 16，默认数据库为 0，可以使用 SELECT <dbid>命令在连接上指定数据库 id</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038333.png" alt="image-20220216222829307"></p><h2 id="4-5-SECURITY-安全"><a href="#4-5-SECURITY-安全" class="headerlink" title="4.5. ###SECURITY 安全###"></a>4.5. ###SECURITY 安全###</h2><h3 id="4-5-1-设置密码"><a href="#4-5-1-设置密码" class="headerlink" title="4.5.1. 设置密码"></a>4.5.1. 设置密码</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038311.png" alt="image-20220216224220227"></p><p>&#x3D;&#x3D;访问密码的查看、设置和取消在命令中设置密码，只是临时的&#x3D;&#x3D;。重启 redis服务器，密码就还原了。<br>永久设置，需要再配置文件中进行设置。</p><h2 id="4-6-LIMITS-限制"><a href="#4-6-LIMITS-限制" class="headerlink" title="4.6. #### LIMITS 限制"></a>4.6. #### LIMITS 限制</h2><h3 id="4-6-1-maxclients"><a href="#4-6-1-maxclients" class="headerlink" title="4.6.1. maxclients"></a>4.6.1. maxclients</h3><p>➢ 设置 redis 同时可以与多少个客户端进行连接。<br>➢ 默认情况下为 <font color=red>10000 </font>个客户端。<br>➢ 如果达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038647.png" alt="image-20220216224547099"></p><h3 id="4-6-2-maxmemory"><a href="#4-6-2-maxmemory" class="headerlink" title="4.6.2. maxmemory"></a>4.6.2. maxmemory</h3><p>➢ 建议**<font color=red>必须设置</font>**，否则，将内存占满，造成服务器宕机<br>➢ 设置 redis 可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过 <strong><font color=red>maxmemory-policy</font></strong> 来指定。<br>➢ 如果 redis 无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么 redis则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH等。 但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。<br>➢如果你的 redis 是主redis（说明你的 redis 有从 redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038432.png" alt="image-20220216224927129"></p><h3 id="4-6-3-maxmemory—policy"><a href="#4-6-3-maxmemory—policy" class="headerlink" title="4.6.3. maxmemory—policy"></a>4.6.3. maxmemory—policy</h3><p>➢ volatile-lru：使用 LRU算法移除 key，只对设置了过期时间的键；（最近最少使用）<br>➢ allkeys-lru：在所有集合 key中，使用 LRU算法移除 key<br>➢ volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键<br>➢ allkeys-random：在所有集合 key中，移除随机的 key<br>➢ volatile-ttl：移除那些 TTL值最小的 key，即那些最近要过期的 key<br>➢ noeviction：不进行移除。针对写操作，只是返回错误信息</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038174.png" alt="image-20220216225459951"></p><h3 id="4-6-4-maxmemory—samples"><a href="#4-6-4-maxmemory—samples" class="headerlink" title="4.6.4. maxmemory—samples"></a>4.6.4. maxmemory—samples</h3><p>➢ 设置样本数量，LRU 算法和最小 TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis 默认会检查这么多个 key 并选择其中 LRU 的那个。<br>➢ 一般设置 3 到 7的数字，数值越小样本越不准确，但 性能消耗越小。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038494.png" alt="image-20220216225631696"></p><h1 id="5-Redis-Redis-的发布和订阅"><a href="#5-Redis-Redis-的发布和订阅" class="headerlink" title="5. Redis Redis 的发布和订阅"></a>5. Redis Redis 的发布和订阅</h1><h2 id="5-1-什么是发布和订阅"><a href="#5-1-什么是发布和订阅" class="headerlink" title="5.1. 什么是发布和订阅"></a>5.1. 什么是发布和订阅</h2><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：&#x3D;&#x3D;发送者 (pub) 发送消息，订阅者(sub) 接收消息&#x3D;&#x3D;。<br>Redis 客户端可以订阅任意数量的频道。</p><h2 id="5-2-Redis-的发布和订阅"><a href="#5-2-Redis-的发布和订阅" class="headerlink" title="5.2. Redis 的发布和订阅"></a>5.2. Redis 的发布和订阅</h2><p>1、客户端可以订阅频道如下图</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038615.png" alt="image-20220216225959304"></p><p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038446.png" alt="image-20220216230015561"></p><h2 id="5-3-发布订阅命令行实现"><a href="#5-3-发布订阅命令行实现" class="headerlink" title="5.3. 发布订阅命令行实现"></a>5.3. 发布订阅命令行实现</h2><p>1、 打开一个客户端订阅 channel1— <code>SUBSCRIBE channel1</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038182.png" alt="image-20220216230107720"></p><p>2、打开另一个客户端，给 channel1 发布消息 hello —<code>publish channel1 hello</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038399.png" alt="image-20220216230140160"></p><p><strong>返回的 1 是订阅者数量</strong></p><p>3、打开第一个客户端可以看到发送的消息</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038478.png" alt="image-20220216230219641"></p><p>注：&#x3D;&#x3D;发布的消息没有持久化，如果在订阅的客户端收不到 hello，只能收到订阅后发布的消息&#x3D;&#x3D;</p><h1 id="6-Redis常见命令"><a href="#6-Redis常见命令" class="headerlink" title="6.Redis常见命令"></a>6.Redis常见命令</h1><h2 id="6-1-Redis数据结构介绍"><a href="#6-1-Redis数据结构介绍" class="headerlink" title="6.1 Redis数据结构介绍"></a>6.1 Redis数据结构介绍</h2><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038047.png" alt="1652887393157"></p><p><strong>贴心小建议：命令不要死记，学会查询就好啦</strong></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands</a> ）可以查看到不同的命令：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038726.png" alt="1652887648826"></p><p>当然我们也可以通过Help命令来帮助我们去查看命令</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039047.png" alt="1652887748279"></p><h2 id="6-2-Redis-通用命令"><a href="#6-2-Redis-通用命令" class="headerlink" title="6.2 Redis 通用命令"></a>6.2 Redis 通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020038367.png" alt="1652887865189"></p><p>课堂代码如下</p><ul><li>KEYS</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询以a开头的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：在生产环境下，不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高</strong></p><ul><li>DEL</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> del</span><br><span class="line"></span><br><span class="line">  DEL key [key ...]</span><br><span class="line">  summary: Delete a key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除单个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  <span class="comment">#成功删除1个</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 <span class="comment">#批量添加数据</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3 k4</span><br><span class="line">(<span class="built_in">integer</span>) 3   <span class="comment">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#再查询全部的key</span></span><br><span class="line">1) <span class="string">&quot;age&quot;</span><span class="comment">#只剩下一个了</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：同学们在拷贝代码的时候，只需要拷贝对应的命令哦~</strong></p><ul><li>EXISTS</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> EXISTS</span><br><span class="line"></span><br><span class="line">  EXISTS key [key ...]</span><br><span class="line">  summary: Determine <span class="keyword">if</span> a key exists</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><ul><li>EXPIRE</li></ul><p><strong>贴心小提示</strong>：内存非常宝贵，对于一些数据，我们应当给他一些过期时间，当过期时间到了之后，他就会自动被删除~</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire age 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2  <span class="comment">#当这个key过期了，那么此时查询出来就是-2 </span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 10 <span class="comment">#如果没有设置过期时间</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -1  <span class="comment"># ttl的返回值就是-1</span></span><br></pre></td></tr></table></figure><h2 id="6-3-Redis命令-String命令"><a href="#6-3-Redis命令-String命令" class="headerlink" title="6.3 Redis命令-String命令"></a>6.3 Redis命令-String命令</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增.自减操作</li><li>float：浮点类型，可以做自增.自减操作</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039967.png" alt="1652890121291"></p><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><p><strong>贴心小提示</strong>：以上命令除了INCRBYFLOAT 都是常用命令</p><ul><li>SET 和GET: 如果key不存在则是新增，如果存在则是修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Rose  <span class="comment">//原来不存在</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name </span><br><span class="line"><span class="string">&quot;Rose&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Jack <span class="comment">//原来存在，就是修改</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br></pre></td></tr></table></figure><ul><li>MSET和MGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MSET k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MGET name age k1 k2 k3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Jack&quot;</span> <span class="comment">//之前存在的name</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;10&quot;</span>   <span class="comment">//之前存在的age</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;v1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;v2&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><ul><li>INCR和INCRBY和DECY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age </span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incr age <span class="comment">//增加1</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age <span class="comment">//获得age</span></span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">2</span> <span class="comment">//一次增加2</span></span><br><span class="line">(integer) <span class="number">13</span> <span class="comment">//返回目前的age的值</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">15</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age -<span class="number">1</span> <span class="comment">//也可以增加负数，相当于减</span></span><br><span class="line">(integer) <span class="number">14</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age -<span class="number">2</span> <span class="comment">//一次减少2个</span></span><br><span class="line">(integer) <span class="number">12</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DECR age <span class="comment">//相当于 incr 负数，减少正常用法</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age </span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>SETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help setnx</span><br><span class="line"></span><br><span class="line">  SETNX key value</span><br><span class="line">  summary: Set the value of a key, only <span class="keyword">if</span> the key does not exist</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  group: string</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Jack  <span class="comment">//设置名称</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name lisi <span class="comment">//如果key不存在，则添加成功</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name <span class="comment">//由于name已经存在，所以lisi的操作失败</span></span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name2 lisi <span class="comment">//name2 不存在，所以操作成功</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name2 </span><br><span class="line"><span class="string">&quot;lisi&quot;</span></span><br></pre></td></tr></table></figure><ul><li>SETEX</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex name 10 jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><h2 id="6-4-Redis命令-Key的层级结构"><a href="#6-4-Redis命令-Key的层级结构" class="headerlink" title="6.4 Redis命令-Key的层级结构"></a>6.4 Redis命令-Key的层级结构</h2><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户.商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039600.png" alt="1652941631682"></p><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>heima:user:1</strong></p></li><li><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039261.png" alt="1652941883537"></p><h2 id="6-5-Redis命令-Hash命令"><a href="#6-5-Redis命令-Hash命令" class="headerlink" title="6.5 Redis命令-Hash命令"></a>6.5 Redis命令-Hash命令</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039150.png" alt="1652941995945"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039782.png" alt="1652942027719"></p><p><strong>Hash类型的常见命令</strong></p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><p><strong>贴心小提示</strong>：哈希结构也是我们以后实际开发中常用的命令哟</p><ul><li>HSET和HGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> name Lucy<span class="comment">//大key是 heima:user:3 小key是name，小value是Lucy</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">21</span><span class="comment">// 如果操作不存在的数据，则是新增</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">17</span> <span class="comment">//如果操作存在的数据，则是修改</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> name </span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> age</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HMSET和HMGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name HanMeiMei</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name LiLei age <span class="number">20</span> sex man</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMGET heima:user:<span class="number">4</span> name age sex</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HGETALL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HKEYS和HVALS</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HINCRBY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age -<span class="number">2</span></span><br><span class="line">(integer) <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>HSETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user4 sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user:<span class="number">3</span> sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;woman&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-6-Redis命令-List命令"><a href="#6-6-Redis命令-List命令" class="headerlink" title="6.6 Redis命令-List命令"></a>6.6 Redis命令-List命令</h2><p>**<font color=red>Redis中的List类型与Java中的LinkedList类似</font>**，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039446.png" alt="1652943604992"></p><ul><li>LPUSH和RPUSH</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH users <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH users <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">(integer) <span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>LPOP和RPOP</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPOP users</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOP users</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><ul><li>LRANGE</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE users <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-7-Redis命令-Set命令"><a href="#6-7-Redis命令-Set命令" class="headerlink" title="6.7 Redis命令-Set命令"></a>6.7 Redis命令-Set命令</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的差集</li><li>SUNION key1 key2 ..：求key1和key2的并集</li></ul><p>例如两个集合：s1和s2:</p><p><img src="https://i.imgur.com/ha8x86R.png"></p><p>求交集：SINTER s1 s2</p><p>求s1与s2的不同：SDIFF s1 s2</p><p><img src="https://i.imgur.com/L9vTv2X.png"></p><p><strong>具体命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s1 a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">b</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">s1</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><ul><li>将下列数据用Redis的Set集合来存储：</li><li>张三的好友有：李四.王五.赵六</li><li>李四的好友有：王五.麻子.二狗</li><li>利用Set的命令实现下列功能：</li><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD zs lisi wangwu <span class="title function_">zhaoliu</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD ls wangwu mazi <span class="title function_">ergou</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">zs</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SINTER zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SDIFF zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SUNION zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;mazi&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER ls <span class="title function_">zhangsan</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SREM zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS zs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-8-Redis命令-SortedSet类型"><a href="#6-8-Redis命令-SortedSet类型" class="headerlink" title="6.8 Redis命令-SortedSet类型"></a>6.8 Redis命令-SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li><li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul><h1 id="7-Redis的Java客户端-Jedis"><a href="#7-Redis的Java客户端-Jedis" class="headerlink" title="7.Redis的Java客户端-Jedis"></a>7.Redis的Java客户端-Jedis</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p><img src="https://i.imgur.com/9f68ivq.png"></p><p>其中Java客户端也包含很多：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212012343760.png" alt="image-20220609102817435"></p><p>标记为❤的就是推荐使用的java客户端，包括：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><h2 id="7-1-Jedis快速入门"><a href="#7-1-Jedis快速入门" class="headerlink" title="7.1 Jedis快速入门"></a>7.1 Jedis快速入门</h2><p><strong>入门案例详细步骤</strong></p><p>案例分析：</p><p>0）创建工程：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039686.png" alt="1652959239813"></p><p>1）引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）建立连接</p><p>新建一个单元测试类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.建立连接</span></span><br><span class="line">    <span class="comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span></span><br><span class="line">    jedis = JedisConnectionFactory.getJedis();</span><br><span class="line">    <span class="comment">// 2.设置密码</span></span><br><span class="line">    jedis.auth(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.选择库</span></span><br><span class="line">    jedis.select(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 存入数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 插入hash数据</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user:1&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-Jedis连接池"><a href="#7-2-Jedis连接池" class="headerlink" title="7.2 Jedis连接池"></a>7.2 Jedis连接池</h2><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式</p><p>有关池化思想，并不仅仅是这里会使用，很多地方都有，比如说我们的数据库连接池，比如我们tomcat中的线程池，这些都是池化思想的体现。</p><h3 id="7-2-1-创建Jedis的连接池"><a href="#7-2-1-创建Jedis的连接池" class="headerlink" title="7.2.1.创建Jedis的连接池"></a>7.2.1.创建Jedis的连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/27 21:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">//最大连接数 （最多允许创建的连接数）</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 最大空闲连接 （最多预备的连接数）</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">//最小空闲连接（在一段时间内，没有人使用，则可释放连接数到MinIdle）</span></span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置最长等待时间，ms (连接池中没有连接时，等待的时长。默认是 -1，无限制的等待)</span></span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、（密码）</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig, <span class="string">&quot;192.168.174.128&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Jedis对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><ul><li><p>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p></li><li><p>2）静态代码块：<font color=red>随着类的加载而加载，确保只能执行一次</font>，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p></li><li><p>3）最后提供返回连接池中连接的方法.</p></li></ul><h3 id="7-2-2-改造原始代码"><a href="#7-2-2-改造原始代码" class="headerlink" title="7.2.2.改造原始代码"></a>7.2.2.改造原始代码</h3><p><strong>代码说明:</strong></p><p>1.在我们完成了使用工厂设计模式来完成代码的编写之后，我们在获得连接时，就可以通过工厂来获得。而不用直接去new对象，降低耦合，并且使用的还是连接池对象。</p><p>2.当我们使用了连接池后，当我们关闭连接其实并不是关闭，而是将Jedis还回连接池的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@BeforeEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//建立连接</span></span><br><span class="line">     <span class="comment">/*jedis = new Jedis(&quot;127.0.0.1&quot;,6379);*/</span></span><br><span class="line">     jedis = JedisConnectionFacotry.getJedis();</span><br><span class="line">      <span class="comment">//选择库</span></span><br><span class="line">     jedis.select(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">         jedis.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意此时<code>jedis.close();</code>的底层调用的不再是关闭连接，而是将连接放回到连接池中</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039599.png" alt="image-20221015201419871"></p><h1 id="8-Redis的Java客户端-SpringDataRedis"><a href="#8-Redis的Java客户端-SpringDataRedis" class="headerlink" title="8.Redis的Java客户端-SpringDataRedis"></a>8.Redis的Java客户端-SpringDataRedis</h1><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现（基于Redis重新实现）</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020039975.png" alt="1652976773295"></p><h2 id="8-1-快速入门"><a href="#8-1-快速入门" class="headerlink" title="8.1.快速入门"></a>8.1.快速入门</h2><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单：</p><h3 id="8-1-1-导入pom坐标"><a href="#8-1-1-导入pom坐标" class="headerlink" title="8.1.1 导入pom坐标"></a>8.1.1 导入pom坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>redis-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-1-2-配置文件"><a href="#8-1-2-配置文件" class="headerlink" title="8.1.2 配置文件"></a>8.1.2 配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.128</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span>  <span class="comment">#最大连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span>   <span class="comment">#最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>   <span class="comment">#最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure><h3 id="8-1-3-测试代码"><a href="#8-1-3-测试代码" class="headerlink" title="8.1.3 测试代码"></a>8.1.3 测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 写入一条String数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取string数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>贴心小提示：SpringDataJpa使用起来非常简单，记住如下几个步骤即可</strong></p><p>SpringDataRedis的使用步骤：</p><ul><li>引入spring-boot-starter-data-redis依赖</li><li>在application.yml配置Redis信息</li><li>注入RedisTemplate</li></ul><h2 id="8-2-数据序列化器"><a href="#8-2-数据序列化器" class="headerlink" title="8.2 .数据序列化器"></a>8.2 .数据序列化器</h2><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p><img src="https://i.imgur.com/OEMcbuu.png"></p><p>当我们执行完上面6.1 的测试方法后，从redis-cli下 获取name的值，结果如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040324.png" alt="image-20221030174718267"></p><p>为啥我们存入的值 和我们看到的不一样呢？</p><p>因为写入前后会把 Java对象 利用 JDK序列化器转成可处理的字节 来存储到Redis中，而序列化器底层是ObjectOutputStream。得到的结果就是上面那样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplate</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">RedisAccessor</span> <span class="keyword">implements</span> <span class="title class_">RedisOperations</span>&lt;K, V&gt;, BeanClassLoaderAware &#123;</span><br><span class="line"><span class="comment">//四个序列化器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="type">RedisSerializer</span> <span class="variable">keySerializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="type">RedisSerializer</span> <span class="variable">valueSerializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="type">RedisSerializer</span> <span class="variable">hashKeySerializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="type">RedisSerializer</span> <span class="variable">hashValueSerializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">super</span>.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">defaultUsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defaultSerializer == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">defaultSerializer = <span class="keyword">new</span> <span class="title class_">JdkSerializationRedisSerializer</span>(</span><br><span class="line">classLoader != <span class="literal">null</span> ? classLoader : <span class="built_in">this</span>.getClass().getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JdkSerializationRedisSerializer底层</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>分析系统中的序列化器：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040102.png" alt="image-20221112182438644"></p><p>**<font color=red>我们可以自定义RedisTemplate的序列化方式</font>**，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/12 18:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 配置Redis的序列化器 </span></span><br><span class="line"><span class="comment"> * key：使用字符串序列化器，value的类型不确定，也就是Object，所以我们使用JSON序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate &lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) &#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate &lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span> &lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化器</span></span><br><span class="line">        <span class="comment">//RedisSerializer.string(),RedisSerializer.json() 也可以得到对应的序列化器.</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置key的序列化</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果如图：</p><ul><li>当存储字符串时</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040981.png" alt="image-20221120172922088"></p><ul><li>当存储对象时</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040085.png" alt="image-20221120174216014"></p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><p><strong><font color=blue>注意：如果运行后报下面的错误，可能是需要引入 <code>jackson-databind</code></font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040391.png" alt="image-20221120172000470"></p><h2 id="8-3-StringRedisTemplate"><a href="#8-3-StringRedisTemplate" class="headerlink" title="8.3 StringRedisTemplate"></a>8.3 StringRedisTemplate</h2><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040566.png" alt="image-20221120180904416"></p><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>&#x3D;&#x3D;为了减少内存的消耗，我们可以采用手动序列化的方式&#x3D;&#x3D;。换句话说，就是不借助默认的序列化器，而是我们自己来控制序列化的动作，同时，我们只采用String的序列化器，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040470.png" alt="1653054744832"></p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：**<font color =red>StringRedisTemplate</font>**，它的key和value的序列化方式默认就是String方式。</p><p><img src="https://i.imgur.com/zXH6Qn6.png"></p><p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisTemplateTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 写入一条String数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;大李&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取String数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;大李&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">//手动序列化（这里也可以使用fastjson的相关方法）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//写入数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>,json);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span>  stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1:&quot;</span>+user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再来看一看存储的数据，小伙伴们就会发现那个class数据已经不在了，节约了我们的空间~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040613.png" alt="image-20221120181737759"></p><p>总结：RedisTemplate的两种序列化实践方案</p><ul><li><p>方案一：</p><ul><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ul></li><li><p>方案二：</p><ul><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ul></li></ul><h2 id="8-4-Hash结构操作"><a href="#8-4-Hash结构操作" class="headerlink" title="8.4 Hash结构操作"></a>8.4 Hash结构操作</h2><p>在基础篇的最后，咱们对Hash结构操作一下，收一个小尾巴，这个代码咱们就不再解释啦</p><p>马上就开始新的篇章~~~进入到我们的Redis实战篇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;大李&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;21&quot;</span>);</span><br><span class="line"><span class="comment">// 获取所有的键值对</span></span><br><span class="line">        Map &lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;entries = &quot;</span>+entries);</span><br><span class="line"><span class="comment">// 获取所有的keys</span></span><br><span class="line">        Set &lt;Object&gt; keys = stringRedisTemplate.opsForHash().keys(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;keys = &quot;</span>+keys);</span><br><span class="line">        <span class="comment">//获取所有的values</span></span><br><span class="line">        List &lt;Object&gt; values = stringRedisTemplate.opsForHash().values(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;values = &quot;</span>+values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212020040638.png" alt="image-20221120182810267"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、Redis消息队列</title>
      <link href="/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC08%E7%AB%A0_Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2024/04/05/Redis%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC08%E7%AB%A0_Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="7、Redis消息队列"><a href="#7、Redis消息队列" class="headerlink" title="7、Redis消息队列"></a>7、Redis消息队列</h2><h3 id="7-1-Redis消息队列-认识消息队列"><a href="#7-1-Redis消息队列-认识消息队列" class="headerlink" title="7.1 Redis消息队列-认识消息队列"></a>7.1 Redis消息队列-认识消息队列</h3><p>什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：</p><ul><li>消息队列：存储和管理消息，也被称为消息代理（Message Broker）</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列获取消息并处理消息</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007695.png" alt="1653574849336"></p><p>使用队列的好处在于 <strong>解耦：</strong>所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快递柜里边(Message Queue)去，我们(消费者)从快递柜里边去拿东西，这就是一个异步，如果耦合，那么这个快递员相当于直接把快递交给你，这事固然好，但是万一你不在家，那么快递员就会一直等你，这就浪费了快递员的时间，所以这种思想在我们日常开发中，是非常有必要的。</p><p>这种场景在我们秒杀中就变成了：我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p><p>这里我们可以使用一些现成的mq，比如kafka，rabbitmq等等，但是呢，如果没有安装mq，我们也可以直接使用redis提供的mq方案，降低我们的部署和学习成本。</p><h3 id="7-2-Redis消息队列-基于List实现消息队列"><a href="#7-2-Redis消息队列-基于List实现消息队列" class="headerlink" title="7.2 Redis消息队列-基于List实现消息队列"></a>7.2 Redis消息队列-基于List实现消息队列</h3><p><strong>基于List结构模拟消息队列</strong></p><p>消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。</p><p>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007676.png" alt="1653575176451"></p><p><strong>案例演示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####生产者######</span></span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH l1 e1 e2; </span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####消费者######</span></span></span><br><span class="line">127.0.0.1:6379&gt; BRPOP l1 20</span><br><span class="line">1) &quot;l1&quot;</span><br><span class="line">2) &quot;e1&quot;</span><br><span class="line">(11.81s)</span><br><span class="line">127.0.0.1:6379&gt; BRPOP l1 20</span><br><span class="line">1) &quot;l1&quot;</span><br><span class="line">2) &quot;e2;&quot;</span><br><span class="line">127.0.0.1:6379&gt; BRPOP l1 20 #队列没有元素会被阻塞，到超时时间还没有就返货null，结束获取</span><br><span class="line">(nil)</span><br><span class="line">(20.10s)</span><br></pre></td></tr></table></figure><p><strong>基于List的消息队列有哪些优缺点？</strong><br>优点：</p><ul><li>利用Redis存储，不受限于JVM内存上限</li><li>基于Redis的持久化机制，数据安全性有保证</li><li>可以满足消息有序性</li></ul><p>缺点：</p><ul><li>无法避免消息丢失【比如刚从消息队列取出一条消息，还没来得及处理，Redis就发生宕机，这个消息就会丢失】</li><li>只支持单消费者【一条消息只能被一个消费者消费，无法被多个消费者消费】</li></ul><h3 id="7-3-Redis消息队列-基于PubSub的消息队列"><a href="#7-3-Redis消息队列-基于PubSub的消息队列" class="headerlink" title="7.3 Redis消息队列-基于PubSub的消息队列"></a>7.3 Redis消息队列-基于PubSub的消息队列</h3><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，<code>消费者可以订阅一个或多个channel</code>，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p><p><code>SUBSCRIBE channel [channel]</code>：订阅一个或多个频道<br> <code>PUBLISH channel msg </code>：向一个频道发送消息<br> <code>PSUBSCRIBE pattern[pattern]</code> ：订阅与pattern格式匹配的所有频道</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007701.png" alt="1653575506373"></p><p><strong>案例演示</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007699.png"></p><p><strong>基于PubSub的消息队列有哪些优缺点？</strong><br>优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费【一个消息可以发给多个&#x2F;部分消费者，不同生产者往相同的频道发】</li></ul><p>缺点：</p><ul><li>不支持数据持久化<ul><li>为什么list作为消息队列可以持久化？是因为list本身是一个链表，用来做数据存储的。而我们把他当做消息队列来用了。而Redis中所有用来做数据存储的结构都支持持久化~ 而Pubsub就是用来做消息发送的，因此当我们发送一条消息，而这个消息没有被任何人订阅，频道没有被任何人订阅，那么这个消息就直接丢失了。</li></ul></li><li>无法避免消息丢失<ul><li>有人订阅消息就会被使用，没人订阅消息就会丢失~</li></ul></li><li>消息堆积有上限，超出时数据丢失<ul><li>如果发送消息时，有消费者在监听，在消费者那里有一个缓存区域，把消息缓存下来，让消费者去处理。如果消息处理的很慢，并且还有源源不断的消息到来，因为消费者那里的空间是有上限的，超出就会消息丢失~</li></ul></li></ul><blockquote><p>总结：这种模式的缺点较多，不适合做可靠性较高的消息模式~</p></blockquote><h3 id="7-4-Redis消息队列-基于Stream的消息队列"><a href="#7-4-Redis消息队列-基于Stream的消息队列" class="headerlink" title="7.4 Redis消息队列-基于Stream的消息队列"></a>7.4 Redis消息队列-基于Stream的消息队列</h3><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p>发送消息的命令：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007706.png" alt="1653577301737"></p><p>例如：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007722.png" alt="1653577349691"></p><p>读取消息的方式之一：XREAD</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007385.png" alt="1653577445413"></p><p>例如，使用XREAD读取第一个消息：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007441.png" alt="1653577643629"></p><p>XREAD阻塞方式，读取最新的消息：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007485.png" alt="1653577659166"></p><p>在业务开发中，我们可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007529.png" alt="1653577689129"></p><p>注意：当我们指定起始ID为$时，代表<code>读取最新的消息</code>，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现<code>漏读消息</code>的问题</p><p><strong>案例演示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##生产者</span></span></span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k1 v1 # 向队列中发送消息</span><br><span class="line">&quot;1675947993952-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XLEN s1 #查看队列中的消息个数</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##消费者1&amp;&amp;消费者2</span></span></span><br><span class="line">127.0.0.1:6379&gt; XREAD COUNT 1 STREAMS s1 0 #读取队列中的第一条消息 [可以说明消息可回溯]</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1675947993952-0&quot;</span><br><span class="line">         2) 1) &quot;k1&quot;</span><br><span class="line">            2) &quot;v1&quot;</span><br><span class="line">            </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##生产者</span></span></span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k2 v2 # 向队列中发送消息</span><br><span class="line">&quot;1675948153658-0&quot;</span><br><span class="line">                   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##消费者1</span></span></span><br><span class="line">127.0.0.1:6379&gt; XREAD COUNT 1 BLOCK 0 STREAMS s1 $ #阻塞读</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1675948153658-0&quot;</span><br><span class="line">         2) 1) &quot;k2&quot;</span><br><span class="line">            2) &quot;v2&quot;</span><br></pre></td></tr></table></figure><p><strong>STREAM类型消息队列的XREAD命令特点：</strong></p><ul><li>消息可回溯【消息读完不消失，永久的保存在消息队列中，啥时候还想看可以随时回来】</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险【在消息处理的过程中，如果来了很多消息，我看不到，只能看到最新的消息】</li></ul><h3 id="7-5-Redis消息队列-基于Stream的消息队列-消费者组"><a href="#7-5-Redis消息队列-基于Stream的消息队列-消费者组" class="headerlink" title="7.5 Redis消息队列-基于Stream的消息队列-消费者组"></a>7.5 Redis消息队列-基于Stream的消息队列-消费者组</h3><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007578.png" alt="image-20230210142845558"></p><p>创建消费者组：<br><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007629.png" alt="1653577984924"><br>key：队列名称<br>groupName：消费者组名称<br>ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息<br>MKSTREAM：队列不存在时自动创建队列<br>其它常见命令：</p><p> <strong>删除指定的消费者组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP DESTORY key groupName</span><br></pre></td></tr></table></figure><p> <strong>给指定的消费者组添加消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATECONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><p> <strong>删除消费者组中的指定消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP DELCONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><p>从消费者组读取消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</span><br></pre></td></tr></table></figure><ul><li><p>group：消费组名称</p></li><li><p>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</p></li><li><p>count：本次查询的最大数量</p></li><li><p>BLOCK milliseconds：当没有消息时最长等待时间</p></li><li><p>NOACK：无需手动ACK，获取到消息后自动确认</p></li><li><p>STREAMS key：指定队列名称</p></li><li><p>ID：获取消息的起始ID：</p><ul><li>“&gt;”：从下一个未消费的消息开始 【正常情况下】</li><li>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始 【异常情况下】</li></ul></li></ul><p><strong>案例演示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##生产者</span></span></span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k1 v1  #向s1中加入消息</span><br><span class="line">&quot;1676013442138-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k2 v2</span><br><span class="line">&quot;1676013446154-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k3 v3</span><br><span class="line">&quot;1676013453085-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k4 v4</span><br><span class="line">&quot;1676013459707-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k5 v5</span><br><span class="line">&quot;1676013469043-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k6 v6</span><br><span class="line">&quot;1676013473875-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XADD s1 * k7 v7</span><br><span class="line">&quot;1676013478635-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; XLEN s1 # 查看队列长度</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; XGROUP CREATE s1 g1 0 # 创建消费者组</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 消费者1</span></span></span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013442138-0&quot;</span><br><span class="line">         2) 1) &quot;k1&quot;</span><br><span class="line">            2) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013446154-0&quot;</span><br><span class="line">         2) 1) &quot;k2&quot;</span><br><span class="line">            2) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013469043-0&quot;</span><br><span class="line">         2) 1) &quot;k5&quot;</span><br><span class="line">            2) &quot;v5&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 消费者2</span></span></span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt; </span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013453085-0&quot;</span><br><span class="line">         2) 1) &quot;k3&quot;</span><br><span class="line">            2) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013459707-0&quot;</span><br><span class="line">         2) 1) &quot;k4&quot;</span><br><span class="line">            2) &quot;v4&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##根据消费者1&amp;消费者2的消费，可以看出消费组中的消费者是竞争关系的，并且同一个消费组中不会出现重复消费~</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 消费者1</span></span></span><br><span class="line">127.0.0.1:6379&gt; XACK s1 g1 1676013442138-0 1676013446154-0 1676013453085-0 1676013459707-0 1676013469043-0</span><br><span class="line">(integer) 5 #对前五条消息进行ACK确认</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt; #继续消费消息</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013473875-0&quot;</span><br><span class="line">         2) 1) &quot;k6&quot;</span><br><span class="line">            2) &quot;v6&quot;</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013478635-0&quot;</span><br><span class="line">         2) 1) &quot;k7&quot;</span><br><span class="line">            2) &quot;v7&quot;</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br><span class="line">(nil)</span><br><span class="line">(2.08s)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于1676013473875-0 和 1676013478635-0 被消费者消费后并没有ACK确认，会进入pending_list</span></span><br><span class="line">127.0.0.1:6379&gt; XPENDING s1 g1 - + 10 #查看pending_list中的消息，可以看出共两条消费失败的消息</span><br><span class="line">1) 1) &quot;1676013473875-0&quot;</span><br><span class="line">   2) &quot;c1&quot;</span><br><span class="line">   3) (integer) 37154</span><br><span class="line">   4) (integer) 1</span><br><span class="line">2) 1) &quot;1676013478635-0&quot;</span><br><span class="line">   2) &quot;c1&quot;</span><br><span class="line">   3) (integer) 35353</span><br><span class="line">   4) (integer) 1</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0 #从pending_list中获取消息</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013473875-0&quot;</span><br><span class="line">         2) 1) &quot;k6&quot;</span><br><span class="line">            2) &quot;v6&quot;</span><br><span class="line">127.0.0.1:6379&gt; XACK s1 g1 1676013473875-0 # 消费完进行ACK确认</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0 #从pending_list中获取消息</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) 1) 1) &quot;1676013478635-0&quot;</span><br><span class="line">         2) 1) &quot;k7&quot;</span><br><span class="line">            2) &quot;v7&quot;</span><br><span class="line">127.0.0.1:6379&gt; XACK s1 g1 1676013478635-0 # 消费完进行ACK确认</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0 #再次获取，pending_list已经为空</span><br><span class="line">1) 1) &quot;s1&quot;</span><br><span class="line">   2) (empty array)</span><br></pre></td></tr></table></figure><p>消费者监听消息的基本思路：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007036.png" alt="image-20230210153808554"></p><p>STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险[因为读取过的消息会有标记，下次直接从有标记的下一条消息读取即可]</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>最后我们来个小对比</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007085.png" alt="image-20230210145602447"></p><blockquote><p>Redis的Stream基本满足中小项目的需求，如果是大型项目，则可以使用专门的MQ：RocketMQ、RabbitMQ、Kfaka等</p></blockquote><h3 id="7-6-基于Redis的Stream结构作为消息队列，实现异步秒杀下单"><a href="#7-6-基于Redis的Stream结构作为消息队列，实现异步秒杀下单" class="headerlink" title="7.6 基于Redis的Stream结构作为消息队列，实现异步秒杀下单"></a>7.6 基于Redis的Stream结构作为消息队列，实现异步秒杀下单</h3><p>需求：</p><ul><li><p>创建一个Stream类型的消息队列，名为stream.orders</p></li><li><p>修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</p></li><li><p>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单</p></li></ul><p>①创建消息队列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; XGROUP CREATE stream.orders g1 0 MKSTREAM</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>②修改lua表达式，新增3.5</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302140007125.png" alt="image-20230211163737153"></p><p>③VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优惠券订单处理器【基于消息队列】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;stream.orders&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1.获取消息队列中的订单信息  XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS stream.orders &gt;</span></span><br><span class="line">                List &lt;MapRecord &lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                    Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                    StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                    StreamOffset.create(queueName, ReadOffset.lastConsumed())</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 2.判断消息是否获取成功</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 如果获取失败，说明没有消息，继续下一次循环</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 3.解析消息中的订单信息</span></span><br><span class="line">                MapRecord &lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map &lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(),<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 4.如果获取成功，可以下单</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">// 5.ACK确认 SACK strea.orders g1 id</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单异常：&quot;</span>, e);</span><br><span class="line">                handlePendingList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理PendingList中的订单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePendingList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1.获取pending-list中的订单信息  XREADGROUP GROUP g1 c1 COUNT 1  STREAMS stream.orders 0</span></span><br><span class="line">                List &lt;MapRecord &lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                    Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                    StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                    StreamOffset.create(queueName, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 2.判断消息是否获取成功</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 如果获取失败，说明pending-list没有异常消息，结束循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 3.解析消息中的订单信息</span></span><br><span class="line">                MapRecord &lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map &lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(),<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 4.如果获取成功，可以下单</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">// 5.ACK确认 SACK stream.orders g1 id</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理pending-list订单异常：&quot;</span>, e);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果出现异常,休眠一会再尝试,避免一直尝试一直异常~</span></span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">                    interruptedException.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Lua脚本 + Stream消息队列实现秒杀下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 获取订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.执行Lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">        SECKILL_SCRIPT,</span><br><span class="line">        Collections.emptyList(),</span><br><span class="line">        voucherId.toString(),</span><br><span class="line">        userId.toString(),</span><br><span class="line">        String.valueOf(orderId)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.判断结果是否为0</span></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.1 不为0，代表没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(result == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.2 为0，有购买资格，把下单信息保存到消息队列【已经在LUA做过了】</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.获取代理对象</span></span><br><span class="line">    proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秒杀压测</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302111636814.png" alt="image-20230211163645535"></p><blockquote><p>可以看出咱们秒杀的接口性能非常好~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、MySQL的数据目录</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC01%E7%AB%A0_MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC01%E7%AB%A0_MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL8的主要目录结构"><a href="#1-MySQL8的主要目录结构" class="headerlink" title="1. MySQL8的主要目录结构"></a>1. MySQL8的主要目录结构</h2><p>以 Linux 系统为例进行讲解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xue ~]# find / -name mysql</span><br></pre></td></tr></table></figure><p>安装好MySQL 8之后，我们查看如下的目录结构:</p><h3 id="1-1-数据库文件的存放路径"><a href="#1-1-数据库文件的存放路径" class="headerlink" title="1.1 数据库文件的存放路径"></a>1.1 数据库文件的存放路径</h3><p>&#x3D;&#x3D;MySQL数据库文件的存放路径：&#x3D;&#x3D;<code>/var/lib/mysql/</code></p><p>MySQL服务器程序在启动时会到文件系统的某个目录下加载一些文件，之后在运行过程中产生的数据也都会存储到这个目录下的某些文件中，这个目录就称为 <code>数据目录</code>。</p><p>MySQL把数据都存到哪个路径下呢？其实 <code>数据目录</code> 对应这一个系统变量 <code>datadir</code>，我们在使用客户端与服务器建立连接之后查看这个系统变量的值就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;datadir&#x27;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir       | /var/lib/mysql/ |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>从结果中可以看出，在我的计算机上MySQL的数据目录就是 <code>/var/lib/mysql</code>&#x2F; 。</p><h3 id="1-2-相关命令目录"><a href="#1-2-相关命令目录" class="headerlink" title="1.2 相关命令目录"></a>1.2 相关命令目录</h3><p>&#x3D;&#x3D;相关命令目录：&#x2F;usr&#x2F;bin（mysqladmin、mysqlbinlog、mysqldump等命令）和&#x2F;usr&#x2F;sbin&#x3D;&#x3D;。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733159.png" alt="image-20220709112725420"></p><h3 id="1-3-配置文件目录"><a href="#1-3-配置文件目录" class="headerlink" title="1.3 配置文件目录"></a>1.3 <strong>配置文件目录</strong></h3><p>&#x3D;&#x3D;配置文件目录：&#x2F;usr&#x2F;share&#x2F;mysql-8.0（命令及配置文件），&#x2F;etc&#x2F;mysql（如 my.cnf）&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733524.png" alt="image-20220709112825432"></p><h2 id="2-数据库和文件系统的关系"><a href="#2-数据库和文件系统的关系" class="headerlink" title="2. 数据库和文件系统的关系"></a>2. 数据库和文件系统的关系</h2><p>像<code>InnoDB</code>、<code>MyISAM </code>这样的存储引擎都是把表存储在磁盘上的，操作系统用来管理磁盘的结构被称为&#x3D;&#x3D;文件系统&#x3D;&#x3D;，所以用专业一点的话来表述就是:像<strong>InnoDB、MyISAM</strong> 这样的存储引擎都是把&#x3D;&#x3D;表存储在文件系统上&#x3D;&#x3D;的。当我们想读取数据的时候，这些存储引擎会从文件系统中把数据读出来返回给我们，当我们想写入数据的时候,这些存储弓擎会把这些数据又写回文件系统。本章学习一下<code>InnoDB</code>和<code>MyISAM</code>这两个存储弓|擎的数据如何在文件系统中存储。</p><h3 id="2-1-查看默认数据库"><a href="#2-1-查看默认数据库" class="headerlink" title="2.1 查看默认数据库"></a>2.1 查看默认数据库</h3><p>查看一下在我的计算机上当前有哪些数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES; </span><br></pre></td></tr></table></figure><p>可以看到有 4 个数据库是属于 MySQL 自带的系统数据库。</p><ul><li><p><code>mysql</code></p><p>MySQL 系统自带的核心数据库，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定 义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</p></li><li><p><code>information_schema</code></p><p>MySQL 系统自带的数据库，这个数据库保存着 MySQL 服务器 <code>维护的所有其他数据库的信息</code> ，比如有哪些表、哪些视图、哪些触发器、哪些列、哪些索引。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为 <code>元数据</code> 。在系统数据库 <code>information_schema</code> 中提供了一些以 <code>innodb_sys</code> 开头的表，用于表示内部系统表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE information_schema;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> TABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_sys%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_information_schema (innodb_sys<span class="operator">%</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_DATAFILES                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_VIRTUAL                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_INDEXES                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLES                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FIELDS                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESPACES                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN_COLS                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_COLUMNS                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESTATS                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p><code>performance_schema</code></p><p>MySQL 系统自带的数据库，这个数据库里主要保存 MySQL 服务器运行过程中的一些状态信息，可以用来 <code>监控 MySQL 服务的各类性能指标</code> 。包括统计最近执行了哪些语句，在执行过程的每个阶段都花费了多长时间，内存的使用情况等信息。</p></li><li><p><code>sys</code></p><p>MySQL 系统自带的数据库，这个数据库主要是通过 <code>视图</code> 的形式把 <code>information_schema</code> 和 <code>performance_schema</code> 结合起来，帮助系统管理员和开发人员监控 MySQL 的技术性能。</p></li></ul><h3 id="2-2-数据库在文件系统中的表示"><a href="#2-2-数据库在文件系统中的表示" class="headerlink" title="2.2 数据库在文件系统中的表示"></a>2.2 数据库在文件系统中的表示</h3><p>使用<code>CREATE DATABASE 数据库名</code>语句创建一个数据库的时候， 在文件系统上实际发生了什么呢?其实很简单,每个数据库都对应数据目录下的一个子目录，或者说对应一个文件夹，每当新建一 个数据库时, MySQL会帮我们做这两件事儿:</p><ol><li>在<code>数据目录</code>下创建一个和数据库名同名的子目录。</li><li>在与该数据库名同名的子目录下创建一个名为<code> db.opt</code>的文件(仅限MySQL5.7及之前版本)，这个文件中包含了<code>该数据库的各种属性</code>，比如该数据库的字符集和比较规则。</li></ol><p>我们再看一下我的计算机上的数据目录下的内容:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> <span class="operator">~</span>]# cd <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql</span><br><span class="line">[root<span class="variable">@hadoop102</span> mysql]# ll</span><br><span class="line">总用量 <span class="number">188880</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql       56 5月   9 21:36 auto.cnf</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql      156 6月  13 18:50 binlog.000005</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql      156 7月   9 13:05 binlog.000006</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql      156 7月   9 13:05 binlog.000007</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql       48 7月   9 13:05 binlog.index</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1676 5月   9 21:36 ca-key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql     1112 5月   9 21:36 ca.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql     1112 5月   9 21:36 client-cert.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1680 5月   9 21:36 client-key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql   196608 7月   9 13:05 #ib_16384_0.dblwr</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql  8585216 5月   9 21:36 #ib_16384_1.dblwr</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql     3357 5月  10 22:47 ib_buffer_pool</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 12582912 7月   9 13:05 ibdata1</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 50331648 7月   9 13:05 ib_logfile0</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 50331648 5月   9 21:36 ib_logfile1</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 12582912 7月   9 13:05 ibtmp1</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 7月   9 13:05 #innodb_temp</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 5月   9 21:36 mysql</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 25165824 7月   9 13:05 mysql.ibd</span></span><br><span class="line">srwxrwxrwx. <span class="number">1</span> mysql mysql        <span class="number">0</span> <span class="number">7</span>月   <span class="number">9</span> <span class="number">13</span>:<span class="number">05</span> mysql.sock</span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql        5 7月   9 13:05 mysql.sock.lock</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 5月   9 21:36 performance_schema</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1680 5月   9 21:36 private_key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql      452 5月   9 21:36 public_key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql     1112 5月   9 21:36 server-cert.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1680 5月   9 21:36 server-key.pem</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 5月   9 21:36 sys</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 16777216 7月   9 13:05 undo_001</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 16777216 7月   9 13:05 undo_002</span></span><br></pre></td></tr></table></figure><p>这个数据目录下的文件和子目录比较多，除了 <code>information_schema</code> 这个系统数据库外，其他的数据库在 <code>数据目录</code> 下都有对应的子目录。</p><h3 id="2-3-表在文件系统中的表示"><a href="#2-3-表在文件系统中的表示" class="headerlink" title="2.3 表在文件系统中的表示"></a>2.3 表在文件系统中的表示</h3><h4 id="2-3-1-InnoDB存储引擎模式"><a href="#2-3-1-InnoDB存储引擎模式" class="headerlink" title="2.3.1 InnoDB存储引擎模式"></a>2.3.1 InnoDB存储引擎模式</h4><p><strong>1、表结构</strong></p><p>为了保存表结构， <code>InnoDB</code>在 <code>数据目录</code> 下对应的数据库子目录下创建了一个专门用于 <code>描述表结构的文件</code>，文件名是这样：<code>表名.frm</code></p><p>比方说我们在 <code>test</code>数据库下创建一个名为<code>test</code>的表</p><p>那在数据库 <code>test</code> 对应的子目录下就会创建一个名为 <code>test.frm</code> 的用于描述表结构的文件。<code>.frm</code> 文件的格式在不同的平台上都是相同的。这个后缀名为 <code>.frm</code> 是以 <code>二进制格式</code> 存储的，我们直接打开是乱码的。</p><p><strong>2、表中数据和索引</strong></p><p><font color=#880000><strong>①系统表空间（system tablespace）</strong></font></p><p>默认情况下，InnoDB 会在数据目录下创建一个名为 <code>ibdata1</code>、大小为 <code>12M</code> 的文件，这个文件就是对应的 <code>系统表空间</code> 在文件系统上的表示。怎么才12M？</p><p>注意这个文件是 <code>自扩展文件</code> ，当不够用的时候它会自己增加文件大小。</p><p>当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的 <code>ibdata1</code> 这个文件名难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下my.cnf 配置文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_data_file_path=data1:512M;data2:512M:autoextend</span><br></pre></td></tr></table></figure><p>这样在MySQL启动之后就会创建这两个512M大小的文件作为<code>系统表空间</code>，其中的<code>autoextend</code>表明这两个文件如果不够用会自动扩展data2文件的大小。</p><p>需要注意的一点是,&#x3D;&#x3D;在一个MySQL服务器中，系统表空间只有一份&#x3D;&#x3D;。从MySQL5.5.7到MySQL5.6.6之间的各个版本中，我们<strong>表中的数据都会被默认存储到这个系统表空间</strong>。</p><p><strong><font color=#880000>②独立表空间（file-per-table tablespace）</font></strong></p><p>在 MySQL 5.6.6 以及之后的版本中，InnoDB 并不会默认的把各个表的数据存储到系统表空间中，而是为 <code>每一个表建立一个独立表空间</code>，也就是说我们创建了多少个表，就有多少个独立表空间。使用 <code>独立表空间</code> 来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个 <code>.ibd</code> 的扩展名而已，所以完整的文件名称长这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表名.ibd</span><br></pre></td></tr></table></figure><p>比如：我们使用了 <code>独立表空间</code> 去存储<code>test</code>数据库下的 <code>test</code> 表的话，那么在该表所在数据库<code>atguigu</code>对应的 test 目录下会为 test 表创建这两个文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.frm</span><br><span class="line">test.ibd</span><br></pre></td></tr></table></figure><p>其中 <code>test.ibd</code> 文件就用来存储 <code>test</code> 表中的数据和索引；而<code>text.frm</code> 描述表的结构。</p><p><strong><font color=#880000>③系统表空间与独立表空间的设置</font></strong></p><p>我们可以自己指定使用 <code>系统表空间</code> 还是 <code>独立表空间</code> 来存储数据，这个功能由启动参数 <code>innodb_file_per_table</code> 控制，比如说我们想刻意将表数据都存储到 <code>系统表空间</code> 时，可以在启动MySQL服务器的时候这样配置:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_file_per_table<span class="operator">=</span><span class="number">0</span> # <span class="number">0</span>:代表使用系统表空间; <span class="number">1</span>:代表使用独立表空间</span><br></pre></td></tr></table></figure><p>默认情况:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_file_per_table&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name         <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_file_per_table <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec) # <span class="keyword">on</span>：代表独立表空间</span><br></pre></td></tr></table></figure><p><strong><font color=#880000>④其他类型的表空间</font></strong></p><p>随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。</p><p><strong>3、图解</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733845.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733587.png"></p><p><strong>4、疑问</strong></p><p><code>.frm</code> 在MySQL8中不存在了，去哪里了？</p><p>这就需要解析 <code>ibd 文件</code>。Oracle官方将 <code>frm文件</code> 的信息及更多信息移动到叫做序列化字典信息（Serialized Dictionary Information,SDI），SDI 被写在 ibd 文件内部，MySQL 8.0 属于 Oracle 旗下，同理。</p><p>为了从 IBD 文件中提取 SDI 信息，Oracle 提供了一个应用程序 ibd2sdi</p><p>这个工具不需要下载，MySQL8自带的有，只需要你配好环境变量就能到处用。</p><p>查看表结构：到存储ibd文件的目录下，执行下面的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibd2sdi <span class="comment">--dump-file=student.txt student.ibd</span></span><br></pre></td></tr></table></figure><p>这样 ibd2sdi 就会把 <code>xxx.ibd</code> 里存储的表结构以 json 的格式保存在 student.txt 中</p><h4 id="2-3-2-MyISAM-存储引擎模式"><a href="#2-3-2-MyISAM-存储引擎模式" class="headerlink" title="2.3.2 MyISAM 存储引擎模式"></a>2.3.2 MyISAM 存储引擎模式</h4><p><strong>1、表结构</strong></p><p>在存储表结构方面， <code>MyISAM</code> 和 <code>InnoDB</code> 一样，也是在 <code>数据目录</code> 下对应的数据库子目录下创建了一个专 门用于描述表结构的文件：<code>表名.frm</code></p><p><strong>2、表中数据和索引</strong></p><p>在 MyISAM 中的索引全部都是 <code>二级索引</code> ，该存储引擎的 <code>数据和索引是分开存放</code> 的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如 <code>test</code> 表使用 MyISAM 存储引擎的话，那么在它所在数据库对应的 <code>test</code> 目录下会为 test 表创建这三个文件：</p><ul><li><code>test.frm</code> 存储表结构</li><li><code>test.MYD</code> 存储数据 (MYData)</li><li><code>test.MYI</code> 存储索引 (MYIndex)</li></ul><p><strong>3、图解</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091734468.png"></p><h3 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h3><p>举例：<code>数据库 a</code> ， <code>表b</code> 。</p><ol><li><p>如果表 b 采用 <code>InnoDB</code> ，data&#x2F;a 中会产生 1 个或者 2 个文件:</p><ul><li><code>b.frm</code>：描述表结构文件，字段长度等</li><li>如果采用 <code>系统表空间</code> 模式的，数据信息和索引信息都存储在 <code>ibdata1</code> 中</li><li>如果采用 <code>独立表空间</code> 存储模式，data&#x2F;a中还会产生 <code>b.ibd</code> 文件（存储数据信息和索引信息）</li></ul><blockquote><p>MySQL 5.7 中会在 data&#x2F;a 的目录下生成 <code>db.opt</code> 文件用于保存数据库的相关配置。比如：字符集、比较规则。而 MySQL 8.0 不再提供 db.opt 文件。</p><p>MySQL 8.0 中 不再单独提供 <code>b.frm</code>，而是合并在 <code>b.ibd</code> 文件中。</p></blockquote></li><li><p>如果表 b 采用 <code>MyISAM</code> ，data&#x2F;a中会产生 3 个文件:</p><ul><li>MySQL5.7 中 <code>b.frm</code> ：描述表结构文件，字段长度等。</li><li>MySQL8.0 中 <code>b.xxx.sdi</code> ：描述表结构文件，字段长度等</li><li><code>b.MYD</code> (MYData)：数据信息文件，存储数据信息(如果采用独立表存储模式)</li><li><code>b.MYI</code> (MYIndex)：存放索引信息文件</li></ul></li></ol><h3 id="2-5-视图在文件系统中的表示"><a href="#2-5-视图在文件系统中的表示" class="headerlink" title="2.5 视图在文件系统中的表示"></a>2.5 视图在文件系统中的表示</h3><p>我们知道MySQL中的<code>视图</code>其实是<code>虚拟的表</code>，也就是某个查询语句的一一个别名而已，所以在存储视图的时候是不要存储真实的数据的，只需要把它的结构存储起来就行了。和表一样，描述视图结构的文件也会被存储到所属数据库对应的子目录下边，只会存储一个<code>视图名. frm</code>的文件。如下图中的: <code>emp_details_view.frm</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091735198.png" alt="image-20220709125100055"></p><h3 id="2-6-其他的文件"><a href="#2-6-其他的文件" class="headerlink" title="2.6 其他的文件"></a>2.6 其他的文件</h3><p>除了我们上边说的这些用户自己存储的数据以外，<code>数据目录</code>下还包括为了更好运行程序的一些额外文件,主要包括这几种类型的文件:</p><ul><li><p><strong>服务器进程文件</strong></p><p>我们知道每运行一个MySQL服务器程序,都意味着启动一个进程。MySQL服务器会把自己的进程ID写入到一个文件中。</p></li><li><p><strong>服务器日志文件</strong></p><p>在服务器运行过程中，会产生各种各样的日志，比如常规的查询日志、错误日志、二进制日志、redo日志等。这些日志各有各的用途。后面讲解。</p></li><li><p><strong>默认&#x2F;自动生成的SSL和RSA证书和密钥文件</strong></p><p>主要是为了客户端和服务器安全通信而创建的一些文件。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、存储引擎</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC03%E7%AB%A0_%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC03%E7%AB%A0_%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335455.png" alt="image-20220713231227788"></p><h1 id="1-查看存储引擎"><a href="#1-查看存储引擎" class="headerlink" title="1. 查看存储引擎"></a>1. 查看存储引擎</h1><p>查看mysql提供什么存储引擎:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335257.png" alt="image-20220713223052510"></p><h1 id="2-设置系统默认的存储引擎"><a href="#2-设置系统默认的存储引擎" class="headerlink" title="2. 设置系统默认的存储引擎"></a>2. 设置系统默认的存储引擎</h1><ul><li><p>查看默认的存储引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%storage_engine%&#x27;; </span><br><span class="line">#或</span><br><span class="line">SELECT @@default_storage_engine;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335167.png" alt="image-20220713223312035"></p></li><li><p>修改默认的存储引擎</p><p>如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用 <code>InnoDB</code> 作为表的存储引擎。 如果我们想改变表的默认存储引擎的话，可以这样写启动服务器的命令行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET DEFAULT_STORAGE_ENGINE=MyISAM;</span><br></pre></td></tr></table></figure><p>或者修改 <code>my.cnf</code> 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=MyISAM</span><br><span class="line"># 重启服务</span><br><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-设置表的存储引擎"><a href="#3-设置表的存储引擎" class="headerlink" title="3. 设置表的存储引擎"></a>3. 设置表的存储引擎</h1><p>存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为 <code>不同的表设置不同的存储引擎</code> ，也就是说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</p><h2 id="3-1-创建表时指定存储引擎"><a href="#3-1-创建表时指定存储引擎" class="headerlink" title="3.1 创建表时指定存储引擎"></a>3.1 创建表时指定存储引擎</h2><p>我们之前创建表的语句都没有指定表的存储引擎，那就会使用默认的存储引擎 <code>InnoDB</code> 。如果我们想显式的指定一下表的存储引擎，那可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名( </span><br><span class="line">  建表语句;</span><br><span class="line">) ENGINE = 存储引擎名称;</span><br></pre></td></tr></table></figure><h2 id="3-2-修改表的存储引擎"><a href="#3-2-修改表的存储引擎" class="headerlink" title="3.2 修改表的存储引擎"></a>3.2 修改表的存储引擎</h2><p>如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ENGINE = 存储引擎名称; </span><br></pre></td></tr></table></figure><p>比如我们修改一下 <code>engine_demo_table</code> 表的存储引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE engine_demo_table ENGINE = InnoDB;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p>这时我们再查看一下 <code>engine_demo_table</code> 的表结构:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> engine_demo_table\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">Table</span>: engine_demo_table</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `engine_demo_table` (</span><br><span class="line">  `i` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到该表的存储引擎已经改为<code>InnoDB</code>了。</p><h1 id="4-引擎介绍"><a href="#4-引擎介绍" class="headerlink" title="4. 引擎介绍"></a>4. 引擎介绍</h1><h2 id="4-1-InnoDB-引擎：具备-外键-支持功能的事务存储引擎"><a href="#4-1-InnoDB-引擎：具备-外键-支持功能的事务存储引擎" class="headerlink" title="4.1 InnoDB 引擎：具备&#x3D;&#x3D;外键&#x3D;&#x3D;支持功能的事务存储引擎"></a>4.1 InnoDB 引擎：具备&#x3D;&#x3D;外键&#x3D;&#x3D;支持功能的事务存储引擎</h2><ul><li>MySQL 从 3.23.34a 开始就包含 InnoDB 存储引擎。<code>大于等于 5.5 之后，默认采用 InnoDB 引擎</code> </li><li>InnoDB 是 MySQL 的 &#x3D;&#x3D;默认事务型引擎&#x3D;&#x3D; ，它被设计用来处理大量的短期（short-lived）事务。可以确保事务的完整提交（Commit）和回滚（Rollback）。</li><li>&#x3D;&#x3D;除了增加和查询外，还需要更新、删除操作&#x3D;&#x3D;，那么，应优先选择 InnoDB 存储引擎。</li><li><strong>除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎</strong>。 数据文件结构：</li><li><code>表名.frm</code> 存储表结构（MySQL8.0时，合并在表名.ibd中）</li><li><code>表名.ibd</code> 存储数据和索引</li><li>&#x3D;&#x3D;InnoDB是 为处理巨大数据量的最大性能设计&#x3D;&#x3D;。<ul><li>在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了。比如：<code>.frm</code> ， <code>.par</code> ， <code>.trn</code> ， <code>.isl</code> ， 等都在 MySQL 8.0 中不存在了。</li></ul></li><li>对比 MyISAM 的存储引擎，<code>InnoDB写的处理效率差一些</code> ，并且会占用更多的磁盘空间以保存数据和索引。</li><li>MyISAM 只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据(加载数据时，也要加载索引)，<code>对内存要求较高</code> ，而且内存大小对性能有决定性的影响。</li></ul><h2 id="4-2-MyISAM-引擎：主要的非事务处理存储引擎"><a href="#4-2-MyISAM-引擎：主要的非事务处理存储引擎" class="headerlink" title="4.2 MyISAM 引擎：主要的非事务处理存储引擎"></a>4.2 MyISAM 引擎：主要的非事务处理存储引擎</h2><ul><li>MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数（GIS）等，但 MyISAM <code>不支持事务、行级锁、外键</code>，有一个毫无疑问的缺陷就是 <code>崩溃后无法安全恢复</code>。</li><li><code>5.5 之前默认的存储引擎</code></li><li>优势是访问的 <code>速度快</code> ，对事务完整性没有要求或者以 SELECT、INSERT 为主的应用</li><li>针对数据统计有额外的常数存储。故而<code>count(*)</code> 的查询效率很高</li><li>数据文件结构<ul><li><code>表名.frm</code> 存储表结构</li><li><code>表名.MYD</code> 存储数据（MYData）</li><li><code>表名.MYI</code> 存储索引（MYIndex）</li></ul></li><li>应用场景:只读应用或者以读为主的业务</li></ul><h2 id="4-3-Archive-引擎：用于数据存档"><a href="#4-3-Archive-引擎：用于数据存档" class="headerlink" title="4.3 Archive 引擎：用于数据存档"></a>4.3 Archive 引擎：用于数据存档</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335661.png" alt="image-20220713231445827"></p><p>下表展示了 ARCHIVE 存储引擎功能：</p><table><thead><tr><th align="left">特征</th><th align="left">支持</th></tr></thead><tbody><tr><td align="left">B树索引</td><td align="left">不支持</td></tr><tr><td align="left"><code>备份/时间点恢复</code>(在服务器中实现，而不是在存储引擎中)</td><td align="left">支持</td></tr><tr><td align="left">集群数据库支持</td><td align="left">不支持</td></tr><tr><td align="left">聚集索引</td><td align="left">不支持</td></tr><tr><td align="left">压缩数据</td><td align="left">支持</td></tr><tr><td align="left">数据缓存</td><td align="left">不支持</td></tr><tr><td align="left">加密数据(加密功能在服务器中实现)</td><td align="left">支持</td></tr><tr><td align="left">外键支持</td><td align="left">不支持</td></tr><tr><td align="left">全文检索索引</td><td align="left">不支持</td></tr><tr><td align="left">地理空间数据类型支持</td><td align="left">支持</td></tr><tr><td align="left">地理空间索引支持</td><td align="left">不支持</td></tr><tr><td align="left">哈希索引</td><td align="left">不支持</td></tr><tr><td align="left">索引缓存</td><td align="left">不支持</td></tr><tr><td align="left"><code>锁粒度</code></td><td align="left">行锁</td></tr><tr><td align="left">MVCC</td><td align="left">不支持</td></tr><tr><td align="left">存储限制</td><td align="left">没有任何限制</td></tr><tr><td align="left">交易</td><td align="left">不支持</td></tr><tr><td align="left">更新数据字典的统计信息</td><td align="left">支持</td></tr></tbody></table><h2 id="4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容"><a href="#4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容" class="headerlink" title="4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容"></a>4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335029.png" alt="image-20220713231926786"></p><h2 id="4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项"><a href="#4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项" class="headerlink" title="4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项"></a>4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335774.png" alt="image-20220713232053842"></p><p>使用案例如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (i <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, c <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>) ENGINE <span class="operator">=</span> CSV;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.06</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;record one&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;record two&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test; </span><br><span class="line"><span class="operator">+</span><span class="comment">---+------------+</span></span><br><span class="line"><span class="operator">|</span>i  <span class="operator">|</span>c           <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> record <span class="keyword">one</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> record two <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建 CSV 表还会创建相应的 <code>元文件</code> ，用于 <code>存储表的状态</code> 和 <code>表中存在的行数</code> 。此文件的名称与表的名称相 同，后缀为 <code>CSM</code>。如图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335054.png" alt="image-20220713232615402"></p><p>如果检查 <code>test.CSV</code> 通过执行上述语句创建的数据库目录中的文件，其内容使用Notepad++打开如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;1&quot;,&quot;record one&quot;</span><br><span class="line">&quot;2&quot;,&quot;record two&quot;</span><br></pre></td></tr></table></figure><p>这种格式可以被 Microsoft Excel 等电子表格应用程序读取，甚至写入。使用 Microsoft Excel 打开如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335502.png" alt="image-20220713232637071"></p><h2 id="4-6-Memory-引擎：置于内存的表"><a href="#4-6-Memory-引擎：置于内存的表" class="headerlink" title="4.6 Memory 引擎：置于内存的表"></a>4.6 Memory 引擎：置于内存的表</h2><p><strong>概述:</strong></p><p>Memory 采用的逻辑介质是 <code>内存 ， 响应速度很快</code> ，但是当mysqld守护进程崩溃的时候 <code>数据会丢失</code> 。另 外，要求存储的数据是数据长度不变的格式，比如，Blob 和 Text 类型的数据不可用。</p><p><strong>主要特征:</strong></p><ul><li>Memory 同时 <code>支持哈希（HASH）索引</code>和 <code>B+树索引</code> 。</li><li>Memory 表至少比 MyISAM表 要 <code>快一个数量级</code>。</li><li>MEMORY <code>表的大小是受限制</code>的。表的大小主要取决于两个参数，分别是 <code>max_rows</code> 和<code>max_heap_table_size</code>。其中，max_rows可以在创建表时指定；max_heap_table_size 的大小默认为 16 MB，可以按需要进行扩大。</li><li>数据文件与索引文件分开存储。</li><li>缺点：其数据易丢失，生命周期短。基于这个缺陷，选择 MEMORY 存储引擎时需要特别小心。</li></ul><p><strong>使用Memory存储引擎的场景:</strong></p><ol><li><code>目标数据比较小</code>，而且非常 <code>频繁的进行访问</code>，在内存中存放数据，如果太大的数据会造成 <code>内存溢出</code> 。可以通过参数 <code>max_heap_table_size</code> 控制 Memory 表的大小，限制 Memory 表的最大的大小。</li><li>如果 <code>数据是临时的</code> ，而且 <code>必须立即可用</code> 得到，那么就可以放在内存中。</li><li>存储在 Memory 表中的数据如果突然间 <code>丢失的话也没有太大的关系</code>。</li></ol><h2 id="4-7-Federated-引擎：访问远程表"><a href="#4-7-Federated-引擎：访问远程表" class="headerlink" title="4.7 Federated 引擎：访问远程表"></a>4.7 Federated 引擎：访问远程表</h2><p>Federated 引擎是访问其他MySQL服务器的一个 代理 ，尽管该引擎看起来提供了一种很好的跨服务器的灵活性 ，但也经常带来问题，因此默认是禁用的 。</p><h2 id="4-8-Merge-引擎：管理多个MyISAM表构成的表集合"><a href="#4-8-Merge-引擎：管理多个MyISAM表构成的表集合" class="headerlink" title="4.8 Merge 引擎：管理多个MyISAM表构成的表集合"></a>4.8 Merge 引擎：管理多个MyISAM表构成的表集合</h2><h2 id="4-9-NDB引擎：MySQL集群专用存储引擎"><a href="#4-9-NDB引擎：MySQL集群专用存储引擎" class="headerlink" title="4.9 NDB引擎：MySQL集群专用存储引擎"></a>4.9 NDB引擎：MySQL集群专用存储引擎</h2><p>也叫做 NDB Cluster 存储引擎，主要用于 <code>MySQL Cluster 分布式集群</code> 环境。</p><h2 id="4-10-引擎对比"><a href="#4-10-引擎对比" class="headerlink" title="4.10 引擎对比"></a>4.10 引擎对比</h2><p>MySQL中同一个数据库，不同的表可以选择不同的存储引擎。如下表对常用存储引擎做出了对比。</p><table><thead><tr><th align="left">特点</th><th align="left">MyISAM</th><th align="left">InnoDB</th><th align="left">MEMORY</th><th align="left">MERGE</th><th align="left">NDB</th></tr></thead><tbody><tr><td align="left">存储限制</td><td align="left">有</td><td align="left">64TB</td><td align="left">有</td><td align="left">没有</td><td align="left">有</td></tr><tr><td align="left"><code>事务安全性</code></td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>锁机制</code></td><td align="left">表锁，即使操作一条 记录也会锁住整个表，不适合高并发的操作</td><td align="left">行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td><td align="left">表锁</td><td align="left">表锁</td><td align="left">行锁</td></tr><tr><td align="left">B树索引</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">哈希索引</td><td align="left"></td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left">支持</td></tr><tr><td align="left">全文索引</td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">集群索引</td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">数据缓存</td><td align="left"></td><td align="left">支持</td><td align="left">支持</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>索引缓存</code></td><td align="left">只缓存索引，不缓存真实数据</td><td align="left">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">数据可压缩</td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">空间使用</td><td align="left">低</td><td align="left">高</td><td align="left">N&#x2F;A</td><td align="left">低</td><td align="left">低</td></tr><tr><td align="left">内存使用</td><td align="left">低</td><td align="left">高</td><td align="left">中等</td><td align="left">低</td><td align="left">高</td></tr><tr><td align="left">批量插入的速度</td><td align="left">高</td><td align="left">低</td><td align="left">高</td><td align="left">高</td><td align="left">高</td></tr><tr><td align="left"><code>支持外键</code></td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h1 id="5-MyISAM-和-InnoDB"><a href="#5-MyISAM-和-InnoDB" class="headerlink" title="5. MyISAM 和 InnoDB"></a>5. MyISAM 和 InnoDB</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132336896.png" alt="image-20220713230507218"></p><table><thead><tr><th align="center">对比项</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="center">外键</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">事务</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">行表锁</td><td align="center">表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td align="center">行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td></tr><tr><td align="center">缓存</td><td align="center">只缓存索引，不缓存真实数据</td><td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td align="center">自带系统表使用</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">关注点</td><td align="center">性能：节省资源、消耗少、简单业务</td><td align="center">事务：并发写、事务、更大资源</td></tr><tr><td align="center">默认安装</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">默认使用</td><td align="center">N</td><td align="center">Y</td></tr></tbody></table><h1 id="6-阿里巴巴、淘宝用哪个"><a href="#6-阿里巴巴、淘宝用哪个" class="headerlink" title="6. 阿里巴巴、淘宝用哪个"></a>6. 阿里巴巴、淘宝用哪个</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132336908.png" alt="image-20220713230922017"></p><ul><li><strong>Percona</strong> 为 MySQL 数据库服务器进行了改进，在功能和性能上较 MySQL 有很显著的提升。</li><li>该版本提升了在高负载情况下的 InnoDB 的性能、为 DBA 提供一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务器行为。</li><li>该公司新建了一款存储引擎叫 <code>Xtradb</code> 完全可以替代<code>Innodb</code> ，并且在性能和并发上做得更好</li><li>阿里巴巴大部分 MySQL 数据库其实使用的 percona 的原型加以修改。</li></ul><h1 id="7-补充"><a href="#7-补充" class="headerlink" title="7. 补充:"></a>7. 补充:</h1><h2 id="7-1-InnoDB-表的优势"><a href="#7-1-InnoDB-表的优势" class="headerlink" title="7.1 InnoDB 表的优势"></a>7.1 InnoDB 表的优势</h2><p>InnoDB 存储引擎在实际应用中拥有诸多优势，比如操作便利、提高了数据库的性能、维护成本低等。如果由于硬件或软件的原因导致服务器崩溃，那么在重启服务器之后不需要进行额外的操作。InnoDB 崩溃恢复功能自动将之前提交的内容定型，然后撤销没有提交的进程，重启之后继续从崩溃点开始执行。</p><p>InnoDB 存储引擎在主内存中维护缓冲池，高频率使用的数据将在内存中直接被处理。这种缓存方式应用于多种信息，加速了处理进程。</p><p>在专用服务器上，物理内存中高达 80% 的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃， 在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被自动优化。插入、更新和删除操作通过做改变缓冲自动机制进行优化。<code>InnoDB 不支持当前读写，也会缓冲改变的数据到数据流磁盘</code>.</p><p>InnoDB 的性能优势不只存在于长时运行查询的大型表。在同一列多次被查询时，自适应哈希索引会提高查询的速度。使用 InnoDB 可以压缩表和相关的索引，可以 <code>在不影响性能和可用性的情况下创建或删除索引</code>。对于大型文本和 BLOB 数据，使用动态行形式，这种存储布局更高效。通过查询 INFORMATION_SCHEMA 库中的表可以监控存储引擎的内部工作。在同一个语句中，InnoDB 表可以与其他存储引擎表混用。即使有些操作系统限制文件大小为 2GB，InnoDB 仍然可以处理。<code>当处理大数据量时，InnoDB 兼顾 CPU，以达到最大性能</code></p><h2 id="7-2-InnoDB-和-ACID-模型"><a href="#7-2-InnoDB-和-ACID-模型" class="headerlink" title="7.2 InnoDB 和 ACID 模型"></a>7.2 InnoDB 和 ACID 模型</h2><p>ACID 模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应用非常重要。MySQL 包含类似 InnoDB 存储引擎的组件，与 ACID 模型紧密相连，这样出现意外时，数据不会崩溃，结果不会失真。如果依赖 ACID 模型，可以不使用一致性检查和崩溃恢复机制。如果拥有额外的软件保护，极可靠的硬件或者应用可以容忍一小部分的数据丢失和不一致，可以将 MySQL 设置调整为只依赖部分 ACID 特性，以达到更高的性能。下面讲解 InnoDB 存储引擎与 ACID 模型相同作用的四个方面。</p><ol><li><strong>原子方面</strong> ACID 的原子方面主要涉及 InnoDB 事务，与 MySQL 相关的特性主要包括:<ul><li>自动提交设置。</li><li>COMMIT 语句。</li><li>ROLLBACK 语句。</li><li>操作 INFORMATION_SCHEMA 库中的表数据。</li></ul></li><li><strong>一致性方面</strong> ACID 模型的一致性主要涉及保护数据不崩溃的内部 InnoDB 处理过程，与 MySQL 相关的特性主要包括:<ul><li>InnoDB 双写缓存。</li><li>InnoDB 崩溃恢复。</li></ul></li><li><strong>隔离方面</strong> 隔离是应用于事务的级别，与 MySQL 相关的特性主要包括:<ul><li>自动提交设置。</li><li>SET ISOLATION LEVEL 语句。</li><li>InnoDB 锁的低级别信息。</li></ul></li><li><strong>耐久性方面</strong> ACID 模型的耐久性主要涉及与硬件配置相互影响的 MySQL 软件特性。由于硬件复杂多样化，耐久性方面没有具体的规则可循。与 MySQL 相关的特性有:<ul><li>InnoDB 双写缓存，通过 innodb_doublewrite 配置项配置。</li><li>配置项 innodb_flush_log_at_trx_commit。</li><li>配置项 sync_binlog。</li><li>配置项 innodb_file_per_table。</li><li>存储设备的写入缓存。</li><li>存储设备的备用电池缓存。</li><li>运行 MySQL 的操作系统。</li><li>持续的电力供应。</li><li>备份策略。</li><li>对分布式或托管的应用，最主要的在于硬件设备的地点以及网络情况。</li></ul></li></ol><h2 id="7-3-InnoDB架构"><a href="#7-3-InnoDB架构" class="headerlink" title="7.3 InnoDB架构"></a>7.3 InnoDB架构</h2><ol><li><strong>缓冲池</strong> 缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的数据能够直接在内存中获得，从而提高速度。</li><li><strong>更改缓存</strong> 更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁 盘。更新缓存合并期间，可能会大大降低查询的性能。在内存中，更新缓存占用一部分 InnoDB 缓冲池。 在磁盘中，更新缓存是系统表空间的一部分。更新缓存的数据类型由 innodb_change_buffering 配置项管理。</li><li><strong>自适应哈希索引</strong> 自适应哈希索引将负载和足够的内存结合起来，使得 InnoDB 像内存数据库一样运行， 不需要降低事务上的性能或可靠性。这个特性通过 innodb_adaptive_hash_index 选项配置，或者通过 <code>-- skip-innodb_adaptive_hash_index</code> 命令行在服务启动时关闭。</li><li><strong>重做日志缓存</strong> 重做日志缓存存放要放入重做日志的数据。重做日志缓存大小通过 innodb_log_buffer_size 配置项配置。重做日志缓存会定期地将日志文件刷入磁盘。大型的重做日志缓存使得大型事务能够正常运行而不需要写入磁盘。</li><li><strong>系统表空间</strong> 系统表空间包括 InnoDB 数据字典、双写缓存、更新缓存和撤销日志，同时也包括表和索引数据。多表共享，系统表空间被视为共享表空间。</li><li><strong>双写缓存</strong> 双写缓存位于系统表空间中，用于写入从缓存池刷新的数据页。只有在刷新并写入双写缓存后，InnoDB 才会将数据页写入合适的位置。</li><li><strong>撤销日志</strong> 撤销日志是一系列与事务相关的撤销记录的集合，包含如何撤销事务最近的更改。如果其他事务要查询原始数据，可以从撤销日志记录中追溯未更改的数据。撤销日志存在于撤销日志片段中，这些片段包含于回滚片段中。</li><li><strong>每个表一个文件的表空间</strong> 每个表一个文件的表空间是指每个单独的表空间创建在自身的数据文件中， 而不是系统表空间中。这个功能通过 innodb_file_per_table 配置项开启。每个表空间由一个单独的 <code>.ibd</code> 数据文件代表，该文件默认被创建在数据库目录中。</li><li><strong>通用表空间</strong> 使用 CREATE TABLESPACE 语法创建共享的 InnoDB 表空间。通用表空间可以创建在 MySQL 数据目录之外能够管理多个表并支持所有行格式的表。</li><li><strong>撤销表空间</strong> 撤销表空间由一个或多个包含撤销日志的文件组成。撤销表空间的数量由 innodb_undo_tablespaces 配置项配置。</li><li><strong>临时表空间</strong> 用户创建的临时表空间和基于磁盘的内部临时表都创建于临时表空间。 innodb_temp_data_file_path 配置项定义了相关的路径、名称、大小和属性。如果该值为空，默认会在 innodb_data_home_dir 变量指定的目录下创建一个自动扩展的数据文件。</li><li><strong>重做日志</strong> 重做日志是基于磁盘的数据结构，在崩溃恢复期间使用，用来纠正数据。正常操作期间， 重做日志会将请求数据进行编码，这些请求会改变 InnoDB 表数据。遇到意外崩溃后，未完成的更改会自动在初始化期间重新进行。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、索引的数据结构</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC04%E7%AB%A0_%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC04%E7%AB%A0_%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么使用索引"><a href="#1-为什么使用索引" class="headerlink" title="1. 为什么使用索引"></a>1. 为什么使用索引</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191612413.png" alt="image-20220714094507900"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171922032.png" alt="image-20220714094315112"></p><p>假如给数据使用 <code>二叉树</code> 这样的数据结构进行存储，如下图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171922692.png" alt="image-20220714095339210"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191612830.png" alt="image-20220714095625048"></p><h1 id="2、索引及其优缺点"><a href="#2、索引及其优缺点" class="headerlink" title="2、索引及其优缺点"></a>2、索引及其优缺点</h1><h2 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171922811.png" alt="image-20220714100123298"></p><h2 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h2><ol><li>类似大学图书馆建书目索引，提高数据检索的效率，&#x3D;&#x3D;降低 数据库的 IO 成本&#x3D;&#x3D; 这也是创建索引的主要的原因。</li><li>通过创建唯一索引，可以保证数据库表中每一行 <code>数据的唯一性</code> (唯一约束)</li><li>在实现数据的参考完整性方面，可以 <code>加速表和表之间的连接</code>。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度。</li><li>在使用分组和排序子句进行数据查询时，可以显著<code>减少查询中分组和排序的时间</code>，降低了 CPU 的消耗。</li></ol><h2 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3 缺点"></a>2.3 缺点</h2><p>增加索引也有许多不利的方面，主要表现在如下几个方面:</p><ol><li>创建索引和维护索引要 <code>耗费时间</code> （因为索引是排好序的），并且随着数据量的增加，所耗费的时间也会增加。</li><li>索引需要占 磁盘空间，除了数据表占数据空间之 外，每一个索引还要占一定的物理空间，<code>存储在磁盘上</code> ，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</li><li>虽然索引大大提高了查询速度，同时却会<code>降低更新表的速度</code>。当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</li></ol><p><strong>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171922637.png" alt="image-20220714101826957"></p><h1 id="3-InnoDB-中索引的推演"><a href="#3-InnoDB-中索引的推演" class="headerlink" title="3. InnoDB 中索引的推演"></a>3. InnoDB 中索引的推演</h1><h2 id="3-1-索引之前的查找"><a href="#3-1-索引之前的查找" class="headerlink" title="3.1 索引之前的查找"></a>3.1 索引之前的查找</h2><p>先来看一个精确匹配的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT [列名列表] FROM 表名 WHERE 列名 = xxx;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-在一个页中的查找"><a href="#3-1-1-在一个页中的查找" class="headerlink" title="3.1.1 在一个页中的查找"></a>3.1.1 在一个页中的查找</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923988.png" alt="image-20220714102440500"></p><p><strong>注意：</strong></p><ul><li><p>数据表中记录之间物理上是不连续的，但是逻辑上是连续的，之间通过单链表进行连接；数据页之间通过双向链表进行连接</p></li><li><p>以主键为搜索条件：$O(log2^n)$，以其他列为搜索条件：$O(n)$</p></li></ul><h3 id="3-1-2-在很多页中查找"><a href="#3-1-2-在很多页中查找" class="headerlink" title="3.1.2 在很多页中查找"></a>3.1.2 在很多页中查找</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923474.png" alt="image-20220714103545824"></p><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能 <code>从第一个页</code> 沿着 <code>双向链表</code>一直往下找，在每一个页中根据我们上面的查找方式去查找指定的记录。因为要遍历所有的数据页，所以这种方式显然是 <code>超级耗时</code> 的。此时 <code>索引</code> 应运而生。</p><p>我们可以联想下学校的图书馆：所有书架上有着对应的编号，每个书架中有着分区从A-Z。借书时，先根据书的类型找到对应的书架，再从书架中对应的分区找到目标书籍。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923442.png" alt="image-20220714103858008"></p><h2 id="3-2-设计索引"><a href="#3-2-设计索引" class="headerlink" title="3.2 设计索引"></a>3.2 设计索引</h2><p>建一个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE index_demo(</span><br><span class="line">        -&gt; c1 INT,</span><br><span class="line">        -&gt; c2 INT,</span><br><span class="line">    -&gt;     c3 CHAR(1),</span><br><span class="line">    -&gt;     PRIMARY KEY(c1)</span><br><span class="line">    -&gt; ) ROW_FORMAT = Compact;</span><br></pre></td></tr></table></figure><p>这个新建的 <code>index_demo</code> 表中有 2 个 INT 类型的列，1 个 CHAR(1) 类型的列，而且我们规定了 c1 列为主键， 这个表使用 <code>Compact</code> 行格式来实际存储记录的。这里我们简化了 index_demo 表的行格式示意图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923843.png" alt="image-20220714104547667"></p><p>我们只在示意图里展示记录的这几个部分：</p><ul><li><code>record_type</code>：记录头信息的一项属性，<strong>表示记录的类型</strong>， <code>0</code> 表示普通记录、 <code>2</code> 表示最小记 录、 <code>3</code> 表示最大记录、 <code>1</code>  表示目录项的记录，暂时还没用过，下面讲。</li><li><code>next_record</code>：记录头信息的一项属性，<strong>表示下一条地址相对于本条记录的地址偏移量</strong>，我们用<br>箭头来表明下一条记录是谁。（用来保证数据逻辑上的连续）</li><li><code>各个列的值</code>：这里只记录在 <code>index_demo</code> 表中的三个列，分别是 <code>c1 、 c2 和 c3</code>。</li><li><code>其他信息</code>：除了上述 3 种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923379.png" alt="image-20220714104641376"></p><p>把一些记录放到页里的示意图就是：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923794.png" alt="image-20220714104659573"></p><h3 id="3-2-1一个简单的索引设计方案"><a href="#3-2-1一个简单的索引设计方案" class="headerlink" title="3.2.1一个简单的索引设计方案"></a>3.2.1一个简单的索引设计方案</h3><p>我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢？因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以不得不依次遍历所有的数据页。所以如果我们 <code>想快速的定位到需要查找的记录在哪些数据页</code> 中该咋办？我们可以为快速定位记录所在的数据页而 <code>建立一个目录</code> 。 建这个目录必须完成下边这些事：</p><ul><li><strong><font color=red>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。</font></strong></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923427.png" alt="image-20220714112538569"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923153.png" alt="image-20220714112856589"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923762.png" alt="image-20220714113025543"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191613261.png" alt="image-20220714113113065"></p><ul><li><strong><font color=red>给所有的页建立一个目录项。</font></strong></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923242.png" alt="image-20220714113248419"></p><p><strong>注意：</strong>不建立目录项前，每次进行查询（插入）数据时，都要从前往后一个个数据页、一条条记录查找。需要先加载数据页，再二分查找对应的数据。甚至有时候，加载数据页的速度比查找速度还耗时，这样就非常得不偿失了。才有了 为所有的页建立目录项的操作。</p><p><strong><font color=blue>所以我们为上边几个页做好的目录就像这样子：</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923741.png" alt="image-20220714113526840"></p><p>以 <code>页 28</code> 为例，它对应 <code>目录项 2</code> ，这个目录项中包含着该页的页号 <code>28</code> 以及该页中用户记录的最小主键值 <code>5</code> 。我们只需要把几个目录项在物理存储器上连续存储（比如：<strong>数组</strong>），就可以实现根据主键值快速查找某条记录的功能了。比如：查找主键值为 <code>20</code> 的记录，具体查找过程分两步：</p><ol><li>先从目录项中根据 <code>二分法</code> 快速确定出主键值为 <code>20</code> 的记录在 <code>目录项 3</code> 中（因为 12 &lt; 20 &lt; 209 ），它对应的页是 <code>页 9</code>。</li><li>再根据前边说的在页中查找记录的方式（二分法）去 <code>页 9</code> 中定位具体的记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为&#x3D;&#x3D;索引&#x3D;&#x3D; 。</p><h3 id="3-2-2-InnoDB-中的索引方案"><a href="#3-2-2-InnoDB-中的索引方案" class="headerlink" title="3.2.2 InnoDB 中的索引方案"></a>3.2.2 InnoDB 中的索引方案</h3><p>&#x3D;&#x3D;思考一下，我们之前的设计方案有什么问题？&#x3D;&#x3D; </p><p>如下图：比如我们要插入三条数据且恰好在页28和页29之间的，那么需要重新创建个数据页，同时创建对应的目录项，但是目录项是保存在数组中的。目录项3、4都需要向后移动，然后才能插入新的目录项。这样的话效率是非常低的。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923849.png" alt="image-20220714113526840"></p><p>解决办法：为多个目录项建立目录页，目录项之间通过指针方式进行连接（链表），目录页上建立当前页的目录信息，便于后续的二分查找。同时目录项之间指针连接也方便进行插入和删除操作。</p><p>具体细节看下面的第一次迭代！</p><h4 id="①-迭代-1-次：目录项纪录的页"><a href="#①-迭代-1-次：目录项纪录的页" class="headerlink" title="① 迭代 1 次：目录项纪录的页"></a>① 迭代 1 次：目录项纪录的页</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923731.png" alt="image-20220715184655930"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923346.png" alt="image-20220715184437264"></p><p>我们把前边使用到的目录项放到数据页中的样子就是这样：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171923523.png" alt="image-20220715182931843"></p><p>从图中可以看出来，我们新分配了一个编号为 30 的页来专门存储目录项记录。这里再次强调 <code>目录项记录</code> 和普通的 <code>用户记录</code> 的<strong>不同点</strong>：</p><ul><li><code>目录项记录</code> 的 <code>record_type</code> 值是 1，而 <code>普通用户记录</code> 的 <code>record_type</code> 值是 0。</li><li>目录项记录只有 <code>主键值和页的编号</code> 两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列 ，另外还有 InnoDB 自己添加的隐藏列。</li><li>了解：记录头信息里还有一个叫 <code>min_rec_mask</code> 的属性，只有在存储 <code>目录项记录</code> 的页中的主键值最小的<code>目录项记录</code> 的 <code>min_rec_mask</code> 值为 1 ，其他别的记录的 <code>min_rec_mask</code> 值都是 0 。</li></ul><p><strong>相同点：</strong>两者用的是一样的数据页，都会为主键值生成 <code>Page Directory</code> （页目录），从而在按照主键值进行查找时可以使用 <code>二分法</code> 来加快查询速度 (如果没有页目录，链表是无法进行 二分查找)</p><p>现在以查找主键为 <code>20</code> 的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：</p><ol><li>先到存储 <code>目录项记录</code>的页，也就是页 30 中通过 <code>二分法</code> 快速定位到对应目录项，因为 12 &lt; 20 &lt; 209，所以定位到对应的记录所在的页就是页 9。</li><li>再到存储用户记录的页9中根据 <code>二分法</code> 快速定位到主键值为 20 的用户记录。</li></ol><p><strong>注意：</strong>建立目录页后，IO次数也会降低。比如上面的查找只有两次IO</p><h4 id="②-迭代-2-次：多个目录项纪录的页"><a href="#②-迭代-2-次：多个目录项纪录的页" class="headerlink" title="② 迭代 2 次：多个目录项纪录的页"></a>② 迭代 2 次：多个目录项纪录的页</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171924274.png" alt="image-20220715194903736"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171924587.png"></p><p>从图中可以看出，我们插入了一条主键值为 320 的用户记录之后需要两个新的数据页：</p><ul><li>为存储该用户记录而新生成了 <code>页 31</code> 。</li><li>因为原先存储目录项记录的 <code>页 30 的容量已满</code>（我们前边假设只能存储 4 条目录项记录），所以不得不需要一个新的 <code>页 32</code> 来存放 <code>页 31</code> 对应的目录项。(目录页之间用双向链表连接)</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要 3 个步骤，以查找主键值为 <code>20</code> 的记录为例：</p><ol><li><p>确定 <code>目录项记录页</code></p><p>我们现在的存储目录项记录的页有两个，即 <code>页 30</code> 和 <code>页 32</code> ，又因为页 30 表示的目录项的主键值的范围是 <code>[1, 320)</code>，<code>页 32</code> 表示的目录项的主键值不小于 <code>320</code> ，所以主键值为 <code>20</code> 的记录对应的目录项记录在 <code>页 30</code> 中。</p></li><li><p>通过目录项记录页 <code>确定用户记录真实所在的页</code> 。在一个存储 <code>目录项记录</code> 的页中通过主键值定位一条目录项记录的方式说过了。</p></li><li><p>在真实存储用户记录的页中定位到具体的记录。</p></li></ol><p><strong>存在的问题：</strong>查找数据第一步，判断数据是在哪个目录项记录页中时，由于目录项记录页之间是双链表连接的，所以只能从前往后进行遍历查找（<code>过程中IO次数较多</code>），之后找到了再二分查找到对应的数据页… </p><p><strong>改进办法：</strong>&#x3D;&#x3D;为数据项记录页 建立目录页&#x3D;&#x3D;</p><h4 id="③-迭代-3-次：目录项记录页的目录页"><a href="#③-迭代-3-次：目录项记录页的目录页" class="headerlink" title="③ 迭代 3 次：目录项记录页的目录页"></a>③ 迭代 3 次：目录项记录页的目录页</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191613637.png" alt="image-20220715195038044"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171924115.png"></p><p>如图，我们生成了一个存储更高级目录项的 <code>页 33</code> ，这个页中的两条记录分别代表页 30 和页 32，如果用户记录的主键值在 <code>[1, 320)</code> 之间，则到页 30 中查找更详细的目录项记录，如果主键值 <code>不小于 320</code> 的话，就到页 32 中查找更详细的目录项记录。</p><p>我们可以用下边这个图来描述它：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171924978.png" alt="image-20220715191318626"></p><p>这个数据结构，它的名称是 <code>B+ 树</code> 。</p><h4 id="④-B-Tree"><a href="#④-B-Tree" class="headerlink" title="④ B+Tree"></a>④ B+Tree</h4><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171924249.png" alt="image-20220715195450204"></p><p>一个 B+ 树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第 <code>0</code> 层， 之后依次往上加。之前我们做了一个非常极端的假设：存放用户记录的页 <code>最多存放 3 条记录</code> ，存放目录项 记录的页 <code>最多存放 4 条记录</code> 。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录 的叶子节点代表的数据页可以存放 <code>100 条用户记录</code> ，所有存放目录项记录的内节点代表的数据页可以存 放 <code>1000 条目录项记录</code> ，那么：</p><ul><li>如果 B+ 树只有 1 层，也就是只有 1 个用于存放用户记录的节点，最多能存放 <code>100</code> 条记录。</li><li>如果 B+ 树有 2 层，最多能存放 <code>1000×100=10,0000</code>条记录。</li><li>如果 B+ 树有 3 层，最多能存放 <code>1000×1000×100=1,0000,0000</code>条记录。 1亿</li><li>如果 B+ 树有 4 层，最多能存放 <code>1000×1000×1000×100=1000,0000,0000</code>条记录。相当多的记录！！！ 1000亿</li></ul><p>你的表里能存放 <code>100000000000</code> 条记录吗？所以一般情况下，我们 <code>用到的 B+ 树都不会超过 4 层</code> ，那我们通过主键值去查找某条记录最多只需要做 4 个页面内的查找（查找 3 个目录项页和一个用户记录页），又因为在每个页面内有所谓的 <code>Page Directory</code> （页目录），所以在页面内也可以通过二分法实现快速定位记录。</p><p>&#x3D;&#x3D;为啥B+ 树都不会超过 4 层呢？&#x3D;&#x3D;</p><p><strong><font color=red>树的层次达到4的时候，可以存储的数据量足够多了（1000亿）。树的层次越低，IO次数就越少，从而效率越高</font></strong></p><h2 id="3-3-常见索引概念"><a href="#3-3-常见索引概念" class="headerlink" title="3.3 常见索引概念"></a>3.3 常见索引概念</h2><p>索引按照物理实现方式，索引可以分为 2 种：&#x3D;&#x3D;聚簇（聚集）和非聚簇（非聚集）索引&#x3D;&#x3D;。我们也把非聚集索引称为二级索引或者辅助索引。</p><h3 id="3-3-1-聚簇索引"><a href="#3-3-1-聚簇索引" class="headerlink" title="3.3.1 聚簇索引"></a>3.3.1 聚簇索引</h3><p><strong>特点：</strong></p><ol><li>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义:<ul><li><code>页内</code> 的记录是按照主键的大小顺序排成一个 <code>单向链表</code> 。</li><li>各个存放存放 <code>用户记录的页</code>，也是根据页中用户记录的主键大小顺序排成一个 <code>双向链表</code>.</li><li>存放<code>目录项记录的页</code>分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个<code>双向链表</code></li></ul></li><li><strong>B+ 树的叶子节点存储的是完整的用户记录。</strong><ul><li>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li></ul></li></ol><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191614852.png" alt="image-20220715232925683"></p><p><strong>优点：</strong></p><ul><li><code>数据访问更快</code> ，因为聚簇索引将索引和数据保存在同一个 B+ 树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于主键的 <code>排序查找</code> 和 <code>范围查找</code> 速度非常快 (因为数据本身就是有序的)</li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取数据，所以 <code>节省了大量的 io 操作</code> 。</li></ul><p><strong>缺点:</strong></p><ul><li><code>插入速度严重依赖于插入顺序</code> ，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于 InnoDB 表，我们一般都会定义一个 <strong>自增的 ID 列为主键</strong> <ul><li>前半句分析。比如我们在<code>上上幅图</code>中页9和页20中间插入个 主键为200的数据，这就会导致页20及其后面的需要进行逻辑上的移动，然后插入新数据。同时上层目录页中的数据以及指针也可能变动，依次往上推，从而会降低性能！</li><li>后半句思考：删除的时候通常不真正删除，而是弄一个删除标记是不是和这个有关？</li></ul></li><li>更新主键的代价很高 ，因为将会导致被更新的行移动。因此，对于 InnoDB 表，我们一般定义<strong>主键为不可更新</strong><ul><li>比如我们将 <code>上上幅图</code> 中的 209 改为 409，也会导致数据的移动。同时对上层目录页中的数据以及指针也可能变动，依次往上推，从而影响性能！</li></ul></li><li><code>二级索引访问需要两次索引查找</code> ，第一次找到主键值，第二次根据主键值找到行数据 （下文细讲）</li></ul><p><strong>限制：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171924851.png" alt="image-20220715233902014"></p><h3 id="3-3-2-二级索引（辅助索引、非聚簇索引）"><a href="#3-3-2-二级索引（辅助索引、非聚簇索引）" class="headerlink" title="3.3.2 二级索引（辅助索引、非聚簇索引）"></a>3.3.2 二级索引（辅助索引、非聚簇索引）</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171933867.png" alt="image-20220715234340429"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171926371.png" alt="image-20220715231734736"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927771.png" alt="image-20220715234935943"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927908.png" alt="image-20220715235447064"></p><p><strong>概念：&#x3D;&#x3D;回表&#x3D;&#x3D;</strong> 我们根据这个以 c2 列大小排序的 B+ 树只能确定我们要查找记录的主键值，所以如果我们想根据 c2 列的值查找到完整的用户记录的话，仍然需要到 <code>聚簇索引</code> 中再查一遍，这个过程称为 <code>回表</code> 。也就是根据 &#x3D;&#x3D;c2 列的值查询一条完整的用户记录需要使用到 <code>2</code> 棵 B+ 树&#x3D;&#x3D;！</p><p><strong><font color=red>问题：为什么我们还需要一次回表操作呢？直接把完整的用户记录放到叶子节点不 OK 吗？</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927961.png" alt="image-20220715235754879"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927850.png" alt="image-20220715231752138"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927931.png" alt="image-20220716000732454"></p><p>第三点的解释：聚簇索引中存放的是记录的所有字段，一旦进行修改，聚簇索引上的数据是一定需要修改的。而非聚簇索引存放的是主键+单个字段，相对来说修改的少，效率也就高。</p><h3 id="3-3-3-联合索引"><a href="#3-3-3-联合索引" class="headerlink" title="3.3.3 联合索引"></a>3.3.3 联合索引</h3><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让 B+ 树按照 <code>c2 和c3 列</code> 的大小进行排序，这个包含两层含义：</p><ul><li>先把各个记录和页按照 c2 列进行排序。</li><li>在记录的 c2 列相同的情况下，采用 c3 列进行排序</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927898.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927913.png" alt="image-20220716002008182"></p><p>注意一点，以 c2 和 c3 列的大小为排序规则建立的 B+ 树称为 &#x3D;&#x3D;联合索引 ，本质上也是一个二级索引&#x3D;&#x3D;。它的意思与分别为 c2 和 c3 列分别建立索引的表述是不同的，不同点如下:</p><ul><li>建立 <code>联合索引</code> 只会建立如上图一样的 1 棵 B+ 树。</li><li>为 c2 和 c3 列分别建立索引会分别以 c2 和 c3 列的大小为排序规则建立 2 棵 B+ 树。</li></ul><h2 id="3-4-InnoDB-的-B-树索引的注意事项"><a href="#3-4-InnoDB-的-B-树索引的注意事项" class="headerlink" title="3.4 InnoDB 的 B+ 树索引的注意事项"></a>3.4 InnoDB 的 B+ 树索引的注意事项</h2><p><strong><font color=blue>1. 根页面位置万年不动</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927355.png" alt="image-20220717153401761"></p><p><strong>注意：</strong>B+树的构建是自上往下构建的</p><p><strong><font color=blue>2. 内节点中目录项记录的唯一性</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927754.png" alt="image-20220717154200568"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927402.png" alt="image-20220717154111061"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191618131.png" alt="image-20220717155054555"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927042.png" alt="image-20220717154649228"></p><p><strong>注意：</strong>页号虽然也可以保证列的唯一性，但是没有实际意义。而其他的列比如c3、c 4我们也不能保证唯一性。所以我们增添的是主键值，再进行判断时也是根据 <code>列号+主键 </code>来选择向哪一页插入数据</p><p><strong><font color=blue>3. 一个页面最少存储 2 条记录</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191614926.png" alt="image-20220717155342368"></p><h1 id="4-MyISAM-中的索引方案"><a href="#4-MyISAM-中的索引方案" class="headerlink" title="4. MyISAM 中的索引方案"></a>4. MyISAM 中的索引方案</h1><p><strong>B 树索引适用存储引擎如表所示：</strong></p><table><thead><tr><th align="left"><strong>索引</strong> &#x2F; <strong>存储引擎</strong></th><th align="left">MyISAM</th><th align="left">InnoDB</th><th align="left">Memory</th></tr></thead><tbody><tr><td align="left">B-Tree 索引</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr></tbody></table><p>即使多个存储引擎支持同一种类型的索引，但是他们的实现原理也是不同的。Innodb 和 MyISAM 默认的索引是 B-tree 索引；而 Memory 默认的索引是 Hash 索引。</p><p>&#x3D;&#x3D;MyISAM 引擎使用 <code>B+Tree</code> 作为索引结构&#x3D;&#x3D;，叶子节点的 data 域存放的是 <code>数据记录的地址</code>  （所以MyISAM把索引和数据分开存储了）</p><p><strong>注意：</strong> 在MySQL中，B 树实际上还是B+树。但是在选择谈到选择MySQL的数据结构时，这两者就区别大了</p><h2 id="4-1-MyISAM-索引的原理"><a href="#4-1-MyISAM-索引的原理" class="headerlink" title="4.1 MyISAM 索引的原理"></a>4.1 MyISAM 索引的原理</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927588.png" alt="image-20220717161900703"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927035.png" alt="image-20220715231824610"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191615572.png" alt="image-20220717162146794"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171927564.png" alt="image-20220715231837968"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191616598.png" alt="image-20220717162348210"></p><p><strong>注意：</strong>对于MYISAM来说，无论是主键索引还是非主键索引都属于非聚簇索引，因为数据和索引是分离的</p><h2 id="4-2-MyISAM-与-InnoDB-对比"><a href="#4-2-MyISAM-与-InnoDB-对比" class="headerlink" title="4.2 MyISAM 与 InnoDB 对比"></a>4.2 MyISAM 与 InnoDB 对比</h2><p><strong><font color=red>MyISAM 的索引方式都是“非聚簇”的，与 InnoDB 包含 1 个聚簇索引是不同的</font></strong></p><p><strong>两种引擎中索引的区别：</strong></p><ol><li>在 InnoDB 存储引擎中，我们只需要根据主键值对 <code>聚簇索引</code> 进行一次查找就能找到对应的记录，而在 <code>MyISAM</code> 中却需要进行一次 <code>回表</code> 操作，意味着 MyISAM 中建立的索引相当于全部都是 <code>二级索引</code> 。（<code>MyISAM</code>的回表就是根据地址到data表中查找数据）</li><li>InnoDB 的数据文件本身就是索引文件，而 MyISAM 索引文件和数据文件是 <code>分离的</code> ，索引文件仅保存数据记录的地址。</li><li>InnoDB 的非聚簇索引 data 域存储相应记录 <code>主键的值</code> ，而 MyISAM 索引记录的是 <code>地址</code> 。换句话说， InnoDB 的所有非聚簇索引都引用主键作为 data 域。</li><li>MyISAM 的回表操作是十分 <code>快速</code> 的，因为是拿着地址偏移量直接到文件中取数据的，反观 InnoDB 是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</li><li>InnoDB 要求表 <code>必须有主键 ( MyISAM 可以没有 )</code>。如果没有显式指定，则 MySQL 系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则 MySQL 自动为 InnoDB 表生成一个隐含字段作为主键，这个字段长度为 6 个字节，类型为长整型。<ul><li>InnoDB的主键是为了生成聚簇索引，所以必须有；MyISAM 中的索引都是非聚簇的，数据和索引分离，所以对MyISAM没有要求。但是为了查询方便，还是建议指定某一字段为主键，从而方便存储引擎为其构建索引，提升查询效率。</li></ul></li></ol><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928739.png" alt="image-20220717163934737"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928059.png" alt="image-20220715231909478"></p><h1 id="5-索引的代价"><a href="#5-索引的代价" class="headerlink" title="5. 索引的代价"></a>5. 索引的代价</h1><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p><ul><li><p><strong>空间上的代价</strong></p><p>每建立一个索引都要为它建立一棵 B+ 树，每一棵 B+ 树的每一个节点都是一个数据页，一个页默认会占用 16KB 的存储空间，一棵很大的 B+ 树由许多数据页组成，那就是很大的一片存储空间。</p></li><li><p><strong>时间上的代价</strong></p><p>每次对表中的数据进行 <code>增</code>、<code>删</code>、<code>改</code>操作时，都需要去修改各个 B+ 树索引。而且我们讲过，B+ 树每层节点都是按照索引列的值 <code>从小到大的顺序排序</code> 而组成了 <code>双向链表</code> 。不论是叶子节点中的记录，还是内节点中的记录（也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些 <code>记录移位</code> ， <code>页面分裂</code> 、 <code>页面回收</code> 等操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的 B+ 树都要进行相关的维护操作，会给性能拖后腿。</p></li></ul><blockquote><p>一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了建立又好又少的索引，我们得学学这些索引在哪些条件下起作用的。</p></blockquote><h1 id="6-MySQL-数据结构选择的合理性"><a href="#6-MySQL-数据结构选择的合理性" class="headerlink" title="6. MySQL 数据结构选择的合理性"></a>6. MySQL 数据结构选择的合理性</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191616637.png" alt="image-20220717165213800"></p><h2 id="6-1-全表遍历"><a href="#6-1-全表遍历" class="headerlink" title="6.1 全表遍历"></a>6.1 全表遍历</h2><p>这里都懒得说了（加载所有页到内存，进行遍历查找，非常耗时，性能极差）</p><h2 id="6-2-Hash-结构"><a href="#6-2-Hash-结构" class="headerlink" title="6.2 Hash 结构"></a>6.2 Hash 结构</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928395.png" alt="image-20220717170503380"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928978.png" alt="image-20220715231924996"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928498.png" alt="image-20220717171015638"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928194.png" alt="image-20220715231940599"></p><p>上图中哈希函数 h 有可能将两个不同的关键字映射到相同的位置，这叫做 <code>碰撞</code> ，在数据库中一般采用<code>链接法</code> 来解决。在链接法中，将散列到同一槽位的元素放在一个链表中，如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928762.png" alt="image-20220715231955539"></p><p><strong><font color=red>Hash 结构效率高，那为什么索引结构要设计成树型呢？</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928921.png" alt="image-20220717171419076"></p><p><strong>Hash 索引适用存储引擎如表所示：</strong></p><table><thead><tr><th align="left"><strong>索引</strong> &#x2F; <strong>存储引擎</strong></th><th align="left">MyISAM</th><th align="left">InnoDB</th><th align="left">Memory</th></tr></thead><tbody><tr><td align="left">HASH 索引</td><td align="left">不支持</td><td align="left">不支持</td><td align="left"><code>支持</code></td></tr></tbody></table><p>&#x3D;&#x3D;<strong>Hash索引的适用性</strong>&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928321.png" alt="image-20220717172136557"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928874.png" alt="image-20220715232011897"></p><p>采用自适应 Hash 索引目的是方便根据 SQL 的查询条件加速定位到叶子节点，特别是当 B+ 树比较深的时候，通过自适应 Hash 索引可以明显提高数据的检索效率。</p><p>我们可以通过 <code>innodb_adaptive_hash_index</code> 变量来查看是否开启了自适应 Hash，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%adaptive_hash_index&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928818.png" alt="image-20220715232023427"></p><h2 id="6-3-二叉搜索树"><a href="#6-3-二叉搜索树" class="headerlink" title="6.3 二叉搜索树"></a>6.3 二叉搜索树</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928584.png" alt="image-20220717181604411"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928608.png" alt="image-20220715232037198"></p><p>创造出来的二分搜索树如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928202.png" alt="image-20220715232048465"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928642.png" alt="image-20220717182128622"></p><h2 id="6-4-AVL-树"><a href="#6-4-AVL-树" class="headerlink" title="6.4 AVL 树"></a>6.4 AVL 树</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929504.png" alt="image-20220717182241429"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171928128.png" alt="image-20220715232059135"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929849.png" alt="image-20220717182343402"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929985.png" alt="image-20220715232108965"></p><p>你能看到此时树的高度降低了，当数据量N大的时候，以及树的分叉数M大的时候，M叉树的高度会远小于二叉树的高度(M&gt;2)。所以，我们需要把树<code>从“瘦高&quot;变&quot;矮胖”</code>。</p><h2 id="6-5-B-Tree"><a href="#6-5-B-Tree" class="headerlink" title="6.5 B-Tree"></a>6.5 B-Tree</h2><p>B树的英文是Balance Tree,也就是&#x3D;&#x3D;多路平衡查找树&#x3D;&#x3D;。简写为B-Tree (注意横杠表示这两个单词连起来的意思，不是减号)。它的高度远小于平衡二叉树的高度。</p><p>B 树的结构如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929257.png" alt="image-20220715232120451"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929433.png" alt="image-20220717182836451"></p><p>一个 M 阶的 B 树（M&gt;2）有以下的特性：</p><ol><li>根节点的儿子数的范围是 [2,M]。</li><li>每个中间节点包含 k-1 个关键字和 k 个孩子，孩子的数量 &#x3D; 关键字的数量 +1，k 的取值范围为 [ceil（M &#x2F; 2）, M]。</li><li>叶子节点包括 k-1 个关键字（叶子节点没有孩子），k 的取值范围为 [ceil（M &#x2F; 2）, M]。</li><li>假设中间节点节点的关键字为：Key[1]，Key[2]，…，Key[k-1]，且关键字按照升序排序，即 Key[i] &lt; Key[i+1]。此时 k-1 个关键字相当于划分了 k 个范围，也就是对应着 k 个指针，即为：P[1]，P[2]，…，P[k]，其中 P[1] 指向关键字小于 Key[1] 的子树，P[i] 指向关键字属于 (Key[i-1], Key[i]）的子树，P[k] 指向关键字大于 Key[k-1] 的子树。</li><li>所有叶子节点位于同一层。</li></ol><p>上面那张图所表示的 B 树就是一棵 3 阶的 B 树。我们可以看下磁盘块 2，里面的关键字为（8，12），它 有 3 个孩子 (3，5)，(9，10) 和 (13，15)，你能看到 (3，5) 小于 8，(9，10) 在 8 和 12 之间，而 (13，15) 大于 12，刚好符合刚才我们给出的特征。</p><p>然后我们来看下如何用 B 树进行查找。假设我们想要 <code>查找的关键字是 9</code>，那么步骤可以分为以下几步：</p><ol><li>我们与根节点的关键字 (17，35)进行比较，9 小于 17 那么得到指针 P1;</li><li>按照指针 P1 找到磁盘块 2，关键字为（8，12)，因为 9 在 8 和 12 之间，所以我们得到指针 P2;</li><li>按照指针 P2 找到磁盘块 6，关键字为（9，10)，然后我们找到了关键字 9。</li></ol><p>你能看出来在 B 树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比较，这个时间就是可以忽略不计的。而读取磁盘块本身需要进行 I&#x2F;O 操作，消耗的时间比在内存中进行比较所需要的时间要多，是数据查找用时的重要因素。<code>B 树相比平衡二叉树来说磁盘 I/O 操作更少</code>， 在数据查询中比平衡二叉树效率要高。所以<code>只要树的高度足够低，IO 次数足够少，就可以提高查询性能</code> 。</p><p><strong>小结</strong></p><ol><li><p>B树在插入和删除节点的时候如果导致树不平衡，就通过自动调整节点的位置来保持树的自平衡。</p></li><li><p>&#x3D;&#x3D;关键字集合分布在整棵树中，即叶子节点和非叶子节点都存放数据&#x3D;&#x3D;。搜索有可能在非叶子节点结束</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找。</p></li></ol><p><strong>再举例 1：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929907.png" alt="image-20220715232133122"></p><p><strong>注意：</strong>叶子节点和非叶子节点都存放数据。我们要查找C1:8，通过比较在磁盘块2中有对应的，那么数据就存在磁盘块2中</p><h2 id="6-6-B-Tree"><a href="#6-6-B-Tree" class="headerlink" title="6.6 B+Tree"></a>6.6 B+Tree</h2><p>B+树也是一种多路搜索树，<code>基于B树做出了改进</code>，主流的DBMS都支持B+树的索引方式,比如MySQL。相比于B-Tree，&#x3D;&#x3D;B+Tree适合文件索引 系统&#x3D;&#x3D;。</p><ul><li>MySQL 官网说明：</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929089.png" alt="image-20220715232146550"></p><p><strong>B+ 树和 B 树的差异：</strong></p><ol><li>有 k 个孩子的节点就有 k 个关键字。也就是孩子数量 &#x3D; 关键字数，而 B 树中，孩子数量 &#x3D; 关键字数 +1。</li><li>非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大（或最小)。</li><li>非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而 B 树中，<code>非叶子节点既保存索引，也保存数据记录</code> 。</li><li>所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。而B树中，叶子节点组成的链表是不完整的，还包含目录页中的数据</li></ol><p>下图就是一棵B+树，阶数为3，根节点中的关键字1、18、 35分别是子节点(1, 8，14) ，(18, 24, 31)和(35， 41， 53) 中的最小值。每一层父节点的关键字都会出现在下一层的子节点的关键字中，因此在叶子节点中包括了所有的关键字信息，并且每一个叶子节点都有一个指向下一个节点的指针，这样就形成了一个链表。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929073.png" alt="image-20220717184500555"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207191617500.png" alt="image-20220717184652033"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929217.png" alt="image-20220717184830228"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929914.png" alt="image-20220717184924406"></p><blockquote><p>B 树和 B+ 树都可以作为索引的数据结构，在 MySQL 中采用的是 B+ 树。</p><p>但 B 树和 B+ 树各有自己的应用场景，不能说 B+ 树完全比 B 树好，反之亦然。</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929537.png" alt="image-20220717185506036"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929115.png" alt="image-20220717185610352"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929801.png" alt="image-20220717185938636"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929401.png" alt="image-20220717190325041"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929857.png" alt="image-20220717190638630"></p><h2 id="6-7-R-树"><a href="#6-7-R-树" class="headerlink" title="6.7 R 树"></a>6.7 R 树</h2><p>R-Tree 在 MySQL 很少使用，仅支持 <code>geometry 数据类型</code> ，支持该类型的存储引擎只有 myisam、bdb、 innodb、ndb、archive 几种。举个 R 树在现实领域中能够解决的例子：查找 20 英里以内所有的餐厅。如果没有 R 树你会怎么解决？一般情况下我们会把餐厅的坐标（x,y）分为两个字段存放在数据库中，一个字段记录经度，另一个字段记录纬度。这样的话我们就需要遍历所有的餐厅获取其位置信息，然后计算是否满足要求。如果一个地区有 100 家餐厅的话，我们就要进行 100 次位置计算操作了，如果应用到谷歌、百度地图这种超大数据库中，这种方法便必定不可行了。R 树就很好的 <code>解决了这种高维空间搜索问题</code>。它把 B 树的思想很好的扩展到了多维空间，采用了 B 树分割空间的思想，并在添加、删除操作时采用合并、分解结点的方法，保证树的平衡性。因此，R 树就是一棵用来 <code>存储高维数据的平衡树</code> 。相对于 B-Tree，R-Tree 的优势在于范围查找。</p><table><thead><tr><th align="left"><strong>索引</strong> &#x2F; <strong>存储引擎</strong></th><th align="left">MyISAM</th><th align="left">InnoDB</th><th align="left">Memory</th></tr></thead><tbody><tr><td align="left">R-Tree 索引</td><td align="left">支持</td><td align="left">支持</td><td align="left"><code>不支持</code></td></tr></tbody></table><h2 id="6-8-小结"><a href="#6-8-小结" class="headerlink" title="6.8 小结"></a>6.8 小结</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929306.png" alt="image-20220717190902117"></p><p>&#x3D;&#x3D;面试中常考点：B+树和B-树的区别、B+树和Hash的区别&#x3D;&#x3D;</p><h2 id="6-9-附录：算法的时间复杂度"><a href="#6-9-附录：算法的时间复杂度" class="headerlink" title="6.9 附录：算法的时间复杂度"></a>6.9 附录：算法的时间复杂度</h2><p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207171929602.png" alt="image-20220715232212165"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、逻辑架构剖析</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC02%E7%AB%A0_%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC02%E7%AB%A0_%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1. &#x3D;&#x3D;逻辑架构剖析&#x3D;&#x3D;"></a>1. &#x3D;&#x3D;逻辑架构剖析&#x3D;&#x3D;</h1><h2 id="1-1-服务器处理客户端请求"><a href="#1-1-服务器处理客户端请求" class="headerlink" title="1.1 服务器处理客户端请求"></a>1.1 服务器处理客户端请求</h2><p>首先MySQL是典型的C&#x2F;S架构，即<code>Client/Server</code> 架构‘ ， 服务器端程序使用的mysqld。</p><p>不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:<strong>客户端进程向服务器进程发送一段文本(SQL语句) ,服务器进程处理后再向客户端进程发送一段文本(处理结果)</strong></p><p>那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢?这里以查询请求为例展示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116081.png" alt="image-20220709175522383"></p><p>下面具体展开看一下:(针对MySQL5.7)</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116304.png" alt="image-20220115171412362"></p><p><strong>分析</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116078.png"></p><h2 id="1-2-Connectors"><a href="#1-2-Connectors" class="headerlink" title="1.2 Connectors"></a>1.2 Connectors</h2><p>Connectors指的是不同语言中与SQL的交互。MySQL首先是一 个网络程序，在TCP之上定义了自己的应用层协议。所以要使用MySQL,我们可以编写代码，跟MySQL Server<code>建立TCP连接</code>，之后按照其定义好的协议进行交互。或者比较方便的办法是调用SDK，比如Native C API、JDBC、 PHP等各语 言MySQL Connector,或者通过ODBC。 但&#x3D;&#x3D;通过SDK来访问MySQL，本质上还是在TCP连接上通过MySQL协议跟MySQL进行交互&#x3D;&#x3D;。</p><p>接下来的MySQL Server结构可以分为如下的三层：</p><h2 id="1-3-第-1-层：连接层"><a href="#1-3-第-1-层：连接层" class="headerlink" title="1.3 第 1 层：连接层"></a>1.3 第 1 层：连接层</h2><p>系统(客户端)访问 MySQL 服务器前，做的第一件事就是建立 <code>TCP</code> 连接。 经过三次握手建立连接成功后，MySQL 服务器对 <code>TCP</code> 传输过来的账号密码做身份认证、权限获取。</p><ul><li>用户名或密码不对，会收到一个 Access denied for user 错误，客户端程序结束执行</li><li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li></ul><p><code>TCP</code> 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><p><strong>接着我们来思考一个问题</strong></p><p>&#x3D;&#x3D;一个系统只会和MySQL服务器建立一个连接吗？只能有一个系统和MySQL服务 器建立连接吗？&#x3D;&#x3D;<br>当然不是，多个系统都可以和MySQL服务器建立连接，每个系统建立的连接肯定不止一个。所以，为了解决TCP无限创建与TCP频繁创建销毁带来的资源耗尽、性能下降问题。MySQL服务器里有专门的<code>TCP连接池</code>限制连接数，采用<code>长连接模式</code>复用TCP连接,来解决上述问题。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116686.png" alt="image-20220709192708094"></p><p><code>TCP</code>连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><p>这些内容我们都归纳到<code>MySQL</code>的连接管理组件中。</p><p>所以&#x3D;&#x3D;连接管理的职责是负责认证、管理连接、获取权限信息&#x3D;&#x3D;。</p><h2 id="1-4-第-2-层：服务层"><a href="#1-4-第-2-层：服务层" class="headerlink" title="1.4 第 2 层：服务层"></a>1.4 第 2 层：服务层</h2><p>第二层架构主要完成大多数的核心服务功能，如SQL接口， 并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。</p><p>在该层，服务器会<strong>解析查询</strong>并创建相应的内部<strong>解析树</strong>，并对其完成相应的<strong>优化</strong>：如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。</p><p>&#x3D;&#x3D;如果是SELECT语句，服务器还会查询内部的缓存&#x3D;&#x3D;。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><ul><li><p><strong>SQL Interface：SQL接口</strong></p><ul><li>接收用户的 SQL 命令，并且返回用户需要查询的结果。比如 <code>SELECT ... FROM</code> 就是调用 SQL Interface</li><li>MySQL 支持 DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种 SQL 语言接口</li></ul></li><li><p><strong>Parser：解析器</strong></p><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将 SQL 语句分解成数据结构，并将这个结构传递到后续步骤，以后 SQL 语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个 SQL 语句是不合理的。</li><li>在 SQL 命令传递到解析器的时候会被解析器验证和解析，并为其创建 <code>语法树</code>，并根据数据字典丰富查询语法树，会 <code>验证该客户端是否具有执行该查询的权限</code> 。创建好语法树后，MySQL 还会对 SQL 查询进行语法上的优化，进行查询重写。</li></ul></li><li><p><strong>Optimizer：查询优化器</strong></p><ul><li><p>SQL 语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 <code>执行计划</code> 。</p></li><li><p>这个执行计划表明应该 <code>使用哪些索引</code> 进行查询（全表检索还是使用索引检索），表之间的连接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。</p></li><li><p>它使用“ <code>选取-投影-连接</code> ”策略进行查询。例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个 SELECT 查询先根据 WHERE 语句进行选取 ，而不是将表全部查询出来以后再进行 gender 过滤。 这个 SELECT 查询先根据 id 和 name 进行属性投影 ，而不是将属性全部取出以后再进行过滤，将这两个查询条件 连接起来生成最终查询结果。</p></li></ul></li><li><p><strong>Caches &amp; Buffers: 查询缓存组件</strong></p><ul><li>MySQL内部维持着一些 Cache 和 Buffer，比如 Query Cache 用来缓存一条 SELECT 语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在 <code>不同客户端之间共享</code> 。</li><li>从 MySQL 5.7.20 开始，不推荐使用查询缓存，并在 <code>MySQL 8.0中删除</code> 。</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小故事：</span><br><span class="line">如果我问你9+8×16-3×2×17的值是多少，你可能会用计算器去算一下，最终结果35。如果再问你一遍9+8×16-</span><br><span class="line">3×2×17的值是多少，你还用再傻呵呵的再算一遍吗？我们刚刚已经算过了，直接说答案就好了。</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-5-第-3-层：引擎层"><a href="#1-5-第-3-层：引擎层" class="headerlink" title="1.5 第 3 层：引擎层"></a>1.5 第 3 层：引擎层</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用，主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。同时开源的 MySQL还<strong>允许开发人员设置自己的存储引擎</strong>。</p><p>这种高效的模块化架构为那些希望专门针对特定应用程序需求(例如数据仓库、事务处理或高可用性情况)的人提供了巨大的好处，同时享受使用一组独立于任何接口和服务的优势存储引擎。</p><p>插件式存储引擎层（Storage Engines），&#x3D;&#x3D;真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作&#x3D;&#x3D; ，服务器通过 API 与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p><p>MySQL 8.0.25 默认支持的存储引擎如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116558.png" alt="image-20220115171937681"></p><h2 id="1-6-存储层"><a href="#1-6-存储层" class="headerlink" title="1.6 存储层"></a>1.6 存储层</h2><p>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在 <code>文件系统</code> 上，以 <code>文件</code> 的方式存 在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用 DAS、NAS、SAN等各种存储系统。</p><h2 id="1-7-小结"><a href="#1-7-小结" class="headerlink" title="1.7 小结"></a>1.7 小结</h2><p>MySQL 架构图本节开篇所示。下面为了熟悉 SQL 执行流程方便，我们可以简化如下:</p><p><img src="https://blog-images-1309598269.cos.ap-beijing.myqcloud.com/blogImgs/202206300055402.png" alt="image-20220115172118991"></p><p>简化为三层结构：</p><ol><li>连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端;</li><li>SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关;</li><li>存储引擎层：与数据库文件打交道，负责数据的存储和读取。</li></ol><h1 id="2-SQL-执行流程"><a href="#2-SQL-执行流程" class="headerlink" title="2. SQL 执行流程"></a>2. SQL 执行流程</h1><h2 id="2-1-MySQL-中的-SQL执行流程"><a href="#2-1-MySQL-中的-SQL执行流程" class="headerlink" title="2.1 MySQL 中的 SQL执行流程"></a>2.1 MySQL 中的 SQL执行流程</h2><p>&#x3D;&#x3D;MySQL的查询流程:&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116406.png" alt="image-20220115172223043"></p><h3 id="2-1-1-查询缓存"><a href="#2-1-1-查询缓存" class="headerlink" title="2.1.1 查询缓存"></a>2.1.1 <strong>查询缓存</strong></h3><p>Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端;如果没 有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL 8.0 之后就抛弃 了这个功能。</p><p><strong>大多数情况查询缓存就是个鸡肋，为什么呢?</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure><p>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的 <code>鲁棒性大大降低</code>，只有 <code>相同的查询操作才会命中查询缓存</code>。两个查询请求在任何字符上的不同（例如：空格、注释、 大小写），都会导致缓存不会命中。因此 MySQL 的 <code>查询缓存命中率不高</code> 。</p><p>同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql 、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。以某些系统函数举例，可能同样的函数的两次调用会产生不一样的结果，比如函数 <code>NOW</code> ，每次调用都会产生最新的当前时间，如果在一个查询请求中调用了这个函数，那即使查询请求的文本信息都一样，那不同时间的两次查询也应该得到不同的结果，如果在第一次查询时就缓存了，那第二次查询的时候直接使用第一次查询的结果就是错误的!</p><p>此外，既然是缓存，那就有它 <code>缓存失效的时候</code>。MySQL 的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE TABLE</code>、<code>ALTER TABLE</code>、<code>DROP TABLE</code>或 <code>DROP DATABASE</code> 语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除！对于 <code>更新压力大的数据库</code>来说，查询缓存的命中率会非常低。</p><p><strong><font color=red>总之，因为查询缓存往往弊大于利，查询缓存的失效非常频繁。</font></strong></p><p>一般建议大家在静态表里使用查询缓存，什么叫<code>静态表</code>呢?就是一般我们极少更新的表。比如，一个系统配置表、字典表，这张表上的查询才适合使用查询缓存。好在MySQL也提供了这种“<code>按需使用</code>”的方式。你可以将my.cnf参数 query_ <em>cache</em> type  设置成DEMAND，代表当sql语句中有SQL_ CACHE关键词时才缓存。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">query_ cache_ <span class="built_in">type</span>有3个值0代表关闭查询缓存0FF，1代表开启ON，2 (DEMAND)</span></span><br><span class="line">query_cache_ type=2</span><br></pre></td></tr></table></figure><p>这样对于默认的SQL语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用SQL_CACHE显式指定，像下面这个语句一样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL. CACHE <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">5</span> ;<span class="operator">|</span></span><br></pre></td></tr></table></figure><p>查看当前mysq|实例是否开启缓存机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># MySQL5.7 中：</span><br><span class="line">mysql&gt; show global variables like &quot;%query_cache_type%&quot;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| query_cache_type | OFF   |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># MySQL8.0 中：</span><br><span class="line">mysql&gt; show global variables like &quot;%query_cache_type%&quot;;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>监控查询缓存的命中率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;%Qcache%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116898.png" alt="image-20220712222507959"></p><ul><li><code>Qcache_free_blocks</code> ：表示查询缓存中还有多少剩余的blocks,如果该值显示较大,则说明查询缓存中的<code>内存碎片</code>过多了，可能在一定的时间进行整理。</li><li><code>Qcache_free_memory</code> ：查询缓存的内存大小，通过这个参数可以很清晰的知道当前系统的查询内存是否够用，是多了，还是不够用，DBA可以根据实际情况做出调整。</li><li><code>Qcache_hits</code> ：表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</li><li><code>Qcache_inserts</code> ：表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理,执行查询处理后把结果insert到查询缓存中。这样的情况的次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这很正常。</li><li><code>Qcache_lowmem_prunes</code> ：该参数记录有多少条查询因为内存不足而被移除出查询缓存。通过这个值，用户可以适当的调整缓存大小。</li><li><code>Qcache_not_cached</code> ：表示因为query_cache_type的设置而没有被缓存的查询数量。</li><li><code>Qcache_queries_in_cache</code>：当前缓存中<code>缓存的查询数量</code>。</li><li><code>Qcache_total_blocks</code> ：当前缓存的block数量。</li></ul><h3 id="2-1-2-解析器"><a href="#2-1-2-解析器" class="headerlink" title="2.1.2 解析器"></a>2.1.2 <strong>解析器</strong></h3><p>在解析器中对 SQL 语句进行语法分析、语义分析。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116982.png" alt="image-20220115172951498"></p><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对SQL语句做解析。SQL语句的分析分为词法分析与语法分析。</p><p>分析器先做“<code>词法分析</code> ”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面 的字符串分别是什么，代表什么。</p><p> MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>接着，要做“<code>词法分析</code> ”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输 入的这个 SQL 语句是否 <code>满足 MySQL 语法</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> department_id,job_id,<span class="built_in">avg</span>(salary) <span class="keyword">from</span> employees <span class="keyword">group</span> <span class="keyword">by</span> department_id; </span><br></pre></td></tr></table></figure><p>如果你的语句不对，就会收到“”的错误提醒，比如这个语句from写成了rom。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * fro user;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;fro user&#x27; at line 1</span><br></pre></td></tr></table></figure><p>如果SQL语句正确，则会生成一个这样的语法树:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117140.png" alt="image-20220115173057415"></p><p>下图是SQL词法分析的过程步骤：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117605.png" alt="image-20220712223741324"></p><p>至此我们解析器的工作任务也基本圆满了。接下来进入到优化器。</p><h3 id="2-1-3-优化器"><a href="#2-1-3-优化器" class="headerlink" title="2.1.3 优化器"></a>2.1.3 优化器</h3><p>在优化器中会确定 SQL 语句的执行路径，比如是根据 <code>全表检索</code> ，还是根据 <code>索引检索</code> 等。</p><p>经过了解析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<strong>一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划</strong>。</p><p>举例：如下语句是执行两个表的 join:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">join</span> test2 <span class="keyword">using</span>(ID)</span><br><span class="line"><span class="keyword">where</span> test1.name<span class="operator">=</span><span class="string">&#x27;zhangwei&#x27;</span> <span class="keyword">and</span> test2.name<span class="operator">=</span><span class="string">&#x27;mysql高级课程&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方案1:可以先从表 test1 里面取出 name=&#x27;zhangwei&#x27;的记录的 ID 值，再根据 ID 值关联到表 test2，再判断 test2 里面 name 的值是否等于 &#x27;mysql高级课程&#x27;。</span><br><span class="line"></span><br><span class="line">方案2:可以先从表 test2 里面取出 name=&#x27;mysql高级课程&#x27; 的记录的 ID 值，再根据 ID 值关联到 test1， 再判断 test1 里面 name的值是否等于 zhangwei。</span><br><span class="line"></span><br><span class="line">这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化</span><br><span class="line">器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。</span><br><span class="line"></span><br><span class="line">如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等。后面讲到索引我们再谈。</span><br></pre></td></tr></table></figure><p>在查询优化器中，可以分为 <code>逻辑查询</code> 优化阶段和 <code>物理查询</code> 优化阶段。</p><p>逻辑查询优化就是通过改变SQL语句的内容来使得SQL查询更高效，同时为物理查询优化提供更多的候选执行计划。通常采用的方式是对SQL语句进行<code>等价变换</code>，对查询进行重写，而查询重写的数学基础就是关系代数。对条件表达式进行等价谓词重写、条件简化，对视图进行重写，对子查询进行优化，对连接语义进行了外连接消除、嵌套连接消除等。</p><p>物理查询优化是基于关系代数进行的查询重写,而关系代数的每一步都对应着物理计算, 这些物理计算往往存在多种算法，因此需要计算各种物理路径的代价，从中选择代价最小的作为执行计划。在这个阶段里，对于单表和多表连接的操作，需要高效地<code>使用索引</code>，提升查询效率。</p><h3 id="2-1-4-执行器"><a href="#2-1-4-执行器" class="headerlink" title="2.1.4 执行器"></a>2.1.4 执行器</h3><p>截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了 <code>执行器阶段</code> 。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117552.png" alt="image-20220115173252824"></p><p>在执行之前需要判断该用户是否具备权限 。如果没有，就会返回权限错误。如果具备权限，就执行 SQL 查询并返回结果。在 MySQL 8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，调用存储引擎API对表进行的读写。存储引擎API只是抽象接口，下面还有个<strong>存储引擎层</strong>，具体实现还是要看表选择的存储引擎。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117221.png"></p><p>比如：表 test 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p><ul><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是1，如果不是则跳过，如果是则将这行存在结果集中; 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ul><p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p><p>&#x3D;&#x3D;SQL 语句在 MySQL 中的流程是&#x3D;&#x3D;：<code>SQL 语句 → 查询缓存 → 解析器 → 优化器 → 执行器</code>。</p><p><img src="https://blog-images-1309598269.cos.ap-beijing.myqcloud.com/blogImgs/202206231430741.png" alt="image-20220115173423050"></p><h2 id="2-2-MySQL8中SQL执行原理"><a href="#2-2-MySQL8中SQL执行原理" class="headerlink" title="2.2 MySQL8中SQL执行原理"></a>2.2 MySQL8中SQL执行原理</h2><p>前面的结构图很复杂，我们需要抓取最核心的部分: SQL的执行原理。不同的DBMS的SQL的执行原理是相通的，只是在不同的软件中，各有各的实现路径。</p><p>既然一条SQL语句会经历不同的模块,那我们就来看下，在不同的模块中，SQL 执行所使用的资源(时间)是怎样的。如何在MySQL中对一条SQL语句的执行时间进行分析。</p><h3 id="2-2-1-确认profiling是否开启"><a href="#2-2-1-确认profiling是否开启" class="headerlink" title="2.2.1. 确认profiling是否开启"></a>2.2.1. 确认profiling是否开启</h3><p>了解查询语句底层执行的过程：<code>select @@profiling;</code> 或者<code>show variables like &#39;%profiling%&#39; </code>查看是否开启计划。开启它可以让MySQL收集在SQL执行时所使用的资源情况，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@profiling;</span><br><span class="line">mysq1&gt; show variables like &#x27;profiling&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117783.png" alt="image-20220712230716818"></p><p>profiling &#x3D; 0代表关闭，我们需要把profiling打开，即设置为1；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set profiling = 1;</span><br></pre></td></tr></table></figure><p>Profiling功能由MySQL会话变量：profiling控制。默认是OFF（关闭状态）。</p><h3 id="2-2-2-多次执行相同SQL查询"><a href="#2-2-2-多次执行相同SQL查询" class="headerlink" title="2.2.2.多次执行相同SQL查询"></a>2.2.2.多次执行相同SQL查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-查看profiles"><a href="#2-2-3-查看profiles" class="headerlink" title="2.2.3.查看profiles"></a>2.2.3.查看profiles</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profiles #查询所有sql语句的分析概览</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117582.png" alt="image-20220713001646187"></p><h3 id="2-2-4-查看profile"><a href="#2-2-4-查看profile" class="headerlink" title="2.2.4.查看profile"></a>2.2.4.查看profile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profie;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117949.png" alt="image-20220713001733244"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profie for query Query_ID;# 查看某一次sql执行的分析过程</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117654.png" alt="image-20220713001825251"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117926.png" alt="image-20220713001556760"></p><h2 id="2-3-MySQL5-7中SQL执行原理"><a href="#2-3-MySQL5-7中SQL执行原理" class="headerlink" title="2.3 MySQL5.7中SQL执行原理"></a>2.3 MySQL5.7中SQL执行原理</h2><p>这里我们需要<code>显示开启查询缓存模式</code>。在MySQL5.7中如下设置：</p><h3 id="2-3-1-配置文件中开启查询缓存"><a href="#2-3-1-配置文件中开启查询缓存" class="headerlink" title="2.3.1.配置文件中开启查询缓存"></a>2.3.1.配置文件中开启查询缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type=1</span><br></pre></td></tr></table></figure><h3 id="2-3-2-重启Mysql服务"><a href="#2-3-2-重启Mysql服务" class="headerlink" title="2.3.2.重启Mysql服务"></a>2.3.2.重启Mysql服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="2-3-3-开启查询计划"><a href="#2-3-3-开启查询计划" class="headerlink" title="2.3.3.开启查询计划"></a>2.3.3.开启查询计划</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set profiling = 1;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-执行语句两次"><a href="#2-3-4-执行语句两次" class="headerlink" title="2.3.4.执行语句两次"></a>2.3.4.执行语句两次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">select * from departments;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-查看profiles"><a href="#2-3-5-查看profiles" class="headerlink" title="2.3.5.查看profiles"></a>2.3.5.查看profiles</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117455.png" alt="image-20220713000901627"></p><h3 id="2-3-6-查看profile"><a href="#2-3-6-查看profile" class="headerlink" title="2.3.6.查看profile"></a>2.3.6.查看profile</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117965.png" alt="image-20220713000946556"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117166.png" alt="image-20220713001014156"></p><p>结论不言而喻.执行编号10时,比执行编号9时少了很多信息,从截图中可以看出查询语句直接从缓存中获取数据 .</p><ul><li><strong>注意1：</strong>&#x3D;&#x3D;SQL必须时一致的,否则,不能命中缓存.&#x3D;&#x3D;</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#虽然查询结果一致， 但并没有命中缓存。</span><br><span class="line">select * from mydb . mytbl where id=2</span><br><span class="line">select * from mydb . mytbl where id&gt;1 and id&lt;3</span><br></pre></td></tr></table></figure><ul><li><strong>注意2：</strong>同样的开启缓存的配置信息如果在MySQL8中添加。重启服务时会报错:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ root@atguigu01 ~]# vim /etc/my.cnf</span><br><span class="line">[root@atguigu01 ~]# systemctl restart mysqld;</span><br><span class="line">Job for mysqld.service failed because the control process exited with error code. See</span><br><span class="line">&quot;systemctl status mysqld. service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure><p>分别在MySQL5.7和MySQL8中执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%query_ cache%&#x27;;</span><br></pre></td></tr></table></figure><p>MySQL5.7中显示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117439.png" alt="image-20220713002324616"></p><p>MySQL8.0中显示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117438.png" alt="image-20220713002427047"></p><h2 id="2-4-SQL语法顺序"><a href="#2-4-SQL语法顺序" class="headerlink" title="2.4 SQL语法顺序"></a>2.4 SQL语法顺序</h2><p>随着 MySQL 版本的更新换代，其优化器也在不断的升级，优化器会分析不同执行顺序产生的性能消耗不同而动态调整执行顺序。</p><p>需求：查询每个部门年龄高于 20 岁的人数且高于 20 岁人数不能少于 2 人，显示人数最多的第一名部门信息。</p><p>下面是经常出现的查询顺序:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118286.png" alt="image-20220115174625139">]</p><h2 id="2-5-Oracle中的SQL执行流程-了解"><a href="#2-5-Oracle中的SQL执行流程-了解" class="headerlink" title="2.5 Oracle中的SQL执行流程(了解)"></a>2.5 Oracle中的SQL执行流程(了解)</h2><p>Oracle中采用了&#x3D;&#x3D;共享池&#x3D;&#x3D;来判断SQL语句是否存在缓存和执行计划，通过这一步骤我们可以知道应该采用硬解析还是软解析。</p><p>我们先来看下SQL在Oracle中的执行过程:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118798.png" alt="image-20220713003902294">从上面这张图中可以看出, SQL语句在Oracle中经历了以下的几个步骤。</p><ol><li><strong>语法检查</strong>：检查SQL拼写是否正确，如果不正确，Oracle 会报语法错误。</li><li><strong>语义检查</strong>：检查SQL中的访问对象是否存在。比如我们在写SELECT语句的时候，列名写错了，系统就会提示错误。语法检查和语义检查的作用是保证SQL语句没有错误。</li><li><strong>权限检查</strong>：看用户是否具备访问该数据的权限。</li></ol><p>Oracle通过检查共享池是否存在SQL语句的执行计划，来判断进行软解析,还是硬解析。那软解析和硬解析又该怎么理解呢?</p><p>在共享池中，Oracle 首先对SQL语句进行<code>Hash运算</code>，然后根据Hash值在库缓存(Library Cache)中查找，如果<code>存在SQL语句的执行计划</code>，就直接拿来执行，直接进入“执行器”的环节,这就是<code>软解析</code>。</p><p>如果没有找到SQL语句和执行计划，Oracle 就需要创建解析树进行解析，生成执行计划，进入“优化器”这个步骤,这就是<code>硬解析</code>。</p><ol start="5"><li><strong>优化器</strong>:优化器中就是要进行硬解析，也就是决定怎么做，比如创建解析树，生成执行计划。</li><li><strong>执行器</strong>:当有了解析树和执行计划之后,就知道了SQL该怎么被执行，这样就可以在执行器中执行语句了。</li></ol><p>共享池是Oracle中的术语，包括了库缓存,数据字典缓冲区等。我们_上面已经讲到了库缓存区，它主要缓存SQL语句和执行计划。而<code>数据字典缓冲区</code>存储的是Oracle中的对象定义,比如表、视图、索引等对象。当对SQL语句进行解析的时候，如果需要相关的数据，会从数据字典缓冲区中提取。</p><p><code>库缓存</code>这一个步骤，决定了SQL语句是否需要进行硬解析。为了提升SQL的执行效率,我们应该尽量避免硬解析，因为在SQL的执行过程中，创建解析树，生成执行计划是很消耗资源的。</p><p>你可能会问，如何避免硬解析，尽量使用软解析呢?在Oracle中，<code>绑定变量</code>是它的一大特色。绑定变量就是在SQL语句中使用变量，通过不同的变量取值来改变SQL的执行结果。这样做的好处是能<code>提升软解析的可能性</code>，不足之处在于可能会导致生成的执行计划不够优化，因此是否需要绑定变量还需要视情况而定。</p><p>举个例子，我们可以使用下面的查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select * from player where player_id = 10001;</span><br></pre></td></tr></table></figure><p>你也可以使用绑定变量，如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOL&gt; select * from plaver where plaver id = :plaver_id:</span><br></pre></td></tr></table></figure><p>这两个查询语句的效率在Oracle中是完全不同的。如果你在查询player. _id&#x3D; 10001之后,还会查询10002、10003之类的数据,那么每- -次查询都会创建一 个新的查询解析。 而第二种方式使用了绑定变量，那么在第一-次查询之后，在共享池中就会存在这类查询的执行计划，也就是软解析。</p><p>因此，我<strong>们可以通过使用绑定变量来减少硬解析，减少Oracle的解析工作量</strong>。但是这种方式也有缺点，使用动态SQL的方式，因为参数不同，会导致SQL的执行效率不同，同时SQL优化也会比较困难。</p><p>&#x3D;&#x3D;Oracle的架构图：&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118351.png" alt="image-20220713004228345"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118783.png"></p><h1 id="3-数据库缓冲池（buffer-pool）"><a href="#3-数据库缓冲池（buffer-pool）" class="headerlink" title="3. 数据库缓冲池（buffer pool）"></a>3. 数据库缓冲池（buffer pool）</h1><p><code>InnoDB</code>存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页 面(包括读页面、写页面、创建新页面等操作)。而磁盘 I&#x2F;O 需要消耗的时间很多，而在内存中进行操 作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请<code>占用内存来作为数据缓冲池</code>，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的<code>Buffer Pool</code>之后才可以访 问。</p><p>这样做的好处是可以让磁盘活动最小化，从而<code>减少与磁盘直接进行 I/O 的时间</code> 。要知道，这种策略对提 升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p><h2 id="3-1-缓冲池-vs-查询缓存"><a href="#3-1-缓冲池-vs-查询缓存" class="headerlink" title="3.1 缓冲池 vs 查询缓存"></a>3.1 缓冲池 vs 查询缓存</h2><p><strong>缓冲池和查询缓存是一个东西吗？不是。</strong></p><h3 id="3-1-1-缓冲池（Buffer-Pool）"><a href="#3-1-1-缓冲池（Buffer-Pool）" class="headerlink" title="3.1.1 缓冲池（Buffer Pool）"></a>3.1.1 缓冲池（Buffer Pool）</h3><p>首先我们需要了解在 InnoDB 存储引擎中，缓冲池都包括了哪些。</p><p>在 InnoDB 存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种数据的缓存，如下图所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118698.png" alt="image-20220115175644920"></p><p>从图中，你能看到InnoDB缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应Hash和数据字典信息等。</p><p><strong>缓存池的重要性:</strong></p><p>对于使用<code>InnoDB</code>作为存储引擎的表来说,不管是用于存储用户数据的索引(包括聚簇索引和二级索引)，还是各种系统数据，都是以<code>页</code>的形式存放在<code>表空间</code>中的,而所谓的表空间只不过是InnoDB对文件系统上一个或几个实际文件的抽象，也就是说我们的数据说到底还是存储在磁盘上的。但是各位也都知道，磁盘的速度慢的跟乌龟一样,怎么能配得上“<code>快如风，疾如电”的CPU</code>呢?这里，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟。所以InnoDB存储弓|擎在处理客户端的请求时，当需要访问某个页的数据时，就会把<code>完整的页的数据全部加载到内存</code>中，也就是说即使我们只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中。将整个页加载到内存中后就可以进行读写访问了，在进行完读写访问之后并不着急把该页对应的内存空间释放掉,而是将其<code>缓存</code>起来,这样将来有请求再次访问该页面时，就可以<code>省去磁盘I0</code>的开销了。</p><p><strong>缓存原则：</strong></p><p>“<code>位置 * 频次</code> ”这个原则，可以帮我们对 I&#x2F;O 访问效率进行优化。 首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p><p>其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会 <code>优先对使用频次高的热数据进行加载</code>。</p><p><strong>缓冲池的预读特性:</strong></p><p>一个缓存了解了缓冲池的作用之后，我们还需要了解缓冲池的另一个特性: <code>预读</code>。</p><p>缓冲池的作用就是提升I&#x2F;0效率，而我们进行读取数据的时候存在一个“局部性原理”， 也就是说我使用了一些数据，<code>大概率还会使用它周围的一些数据</code>，因此采用“预读”的机制提前加载，可以减少未来可能的磁盘1&#x2F;O操作。</p><h3 id="3-1-2-查询缓存"><a href="#3-1-2-查询缓存" class="headerlink" title="3.1.2 查询缓存"></a>3.1.2 查询缓存</h3><p>那么什么是查询缓存呢?</p><p>查询缓存是提前把 <code>查询结果缓存</code> 起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表发生变化，查询缓存就会失效，因此命中率低。</p><h2 id="3-2-缓冲池如何读取数据"><a href="#3-2-缓冲池如何读取数据" class="headerlink" title="3.2 缓冲池如何读取数据"></a>3.2 缓冲池如何读取数据</h2><p>缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。<br>缓存在数据库中的结构和作用如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118451.png" alt="image-20220115175859026"></p><p><strong>&#x3D;&#x3D;如果我们执行SQL语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗?&#x3D;&#x3D;</strong> </p><p>实际上，当我们对数据库中的记录进行修改的时候，首先会修改缓冲池中页里面的记录信息,然后数据库会<code>以一定的频率刷新</code>到磁盘上。注意并不是每次发生更新操作，都会立刻进行磁盘回写。缓冲池会采用一种叫做<code>checkpoint的机制</code>将数据回写到磁盘上,这样做的好处就是提升了数据库的整体性能。</p><p>比如，当<code>缓冲池不够用</code>时，需要释放掉一些不常用的页，此时就可以强行采用checkpoint的方式，将不常用的脏页回写到磁盘上,然后再从缓冲池中将这些页释放掉。这里脏页(dirty page)指的是缓冲池中被修改过的页，与磁盘上的数据页不一致。</p><h2 id="3-3-查看-设置缓冲池的大小"><a href="#3-3-查看-设置缓冲池的大小" class="headerlink" title="3.3 查看&#x2F;设置缓冲池的大小"></a>3.3 查看&#x2F;设置缓冲池的大小</h2><p>如果你使用的是MySQL MyISAM存储引擎,它只缓存索引， 不缓存数据，对应的键缓存参数<br><code>key_buffer_size</code>，你可以用它进行查看。</p><p>如果你使用的是InnoDB存储引擎，可以通过查看 <code>innodb_buffer_pool_size</code> 变量来查看缓冲池的大 小。命令如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_buffer_pool_size&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118317.png" alt="image-20220115175953098"></p><p>你能看到此时 InnoDB 的缓冲池大小只有 134217728&#x2F;1024&#x2F;1024&#x3D;128MB。我们可以修改缓冲池大小，比如 改为256MB，方法如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_buffer_pool_size <span class="operator">=</span> <span class="number">268435456</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118511.png" alt="image-20220115180020887"></p><p>或者:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_size <span class="operator">=</span> <span class="number">268435456</span></span><br></pre></td></tr></table></figure><p>然后再来看下修改后的缓冲池大小，此时已成功修改成了 256 MB:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118502.png" alt="image-20220115180055102"></p><h2 id="3-4-多个Buffer-Pool实例"><a href="#3-4-多个Buffer-Pool实例" class="headerlink" title="3.4 多个Buffer Pool实例"></a>3.4 多个Buffer Pool实例</h2><p>Buffer Pool本质是InnoDB向操作系统申请的一块<code>连续的内存空间</code>，在多线程环境下，访问Buffer Pool中的数据都需要<code>加锁</code>处理。在Buffer Pool特别大而且多线程并发访问特别高的情况下，单一的Buffer Pool可能会影响请求的处理速度。所以在Buffer Pool特别大的时候，我们可以把它们<code>拆分成若干个小的Buffer Pool</code> ，每个Buffer Pool都称为一个<code>实例</code>，它们都是独立的，独立的去申请内存空间，独立的管理各种链表。所以在多线程并发访问时并不会相互影响，从而提高并发处理能力。</p><p>我们可以在服务器启动的时候通过设置<code>innodb_buffer_pool_instances</code> 的值来修改Buffer Pool实例的个数,</p><p>比方说这样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_instances <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这样就表明我们要创建2个 <code>Buffer Pool</code> 实例。</p><p>我们看下如何查看缓冲池的个数，使用命令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_buffer_pool_instances&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118918.png" alt="image-20220115180223458"></p><p>那每个 <code>Buffer Pool</code> 实例实际占多少内存空间呢?其实使用这个公式算出来的：<code>innodb_buffer_pool_size/innodb_buffer_pool_instances</code></p><p>也就是总共的大小除以实例的个数，结果就是每个<code>Buffer Pool</code> 实例占用的大小。</p><p>不过也不是说Buffer Pool实例创建的越多越好，分别<code>管理各个Buffer Pool也是需要性能开销</code>的，InnoDB规定:当innodb_buffer_pool_size的值小于1G的时候设置多个实例是无效的，InnoDB会默认把innodb_ buffe _pool_instances 的值修改为1。而我们鼓励在Buffer Ppol大于或等于1G的时候设置多个Buffer Pool实例。</p><h2 id="3-5-引申问题"><a href="#3-5-引申问题" class="headerlink" title="3.5 引申问题"></a>3.5 引申问题</h2><p>Buffer Pool 是 MySQL 内存结构中十分核心的一个组成，你可以先把它想象成一个黑盒子。</p><p><strong>黑盒下的更新数据流程</strong></p><p>当我们查询数据的时候，会先去Buffer Pool中查询。如果Buffer Pool中不存在,存储弓|擎会先将数据从磁盘加载到Buffer Pool中，然后将数据返回给客户端;同理，当我们更新某个数据的时候，如果这个数据不存在于Buffer Pool,同样会先数据加载进来，然后修改修改内存的数据。被修改过的数据会在之后统一刷入磁盘。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118256.png" alt="image-20220115180314323"></p><p>这个过程看似没啥问题，实则是有问题的。假设我们修改Buffer Pool中的数据成功，但是还没来得及将数据刷入磁盘MySQL就挂了怎么办?按照上图的逻辑，此时更新之后的数据只存在于Buffer Pool中,如果此时MySQL宕机了，这部分数据将会永久地丢失;</p><p>我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回滚都做不到还谈什么崩溃恢复?</p><p>答案：<strong>Redo Log &amp; Undo Log</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、索引的创建与设计原则</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC06%E7%AB%A0_%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC06%E7%AB%A0_%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="1-索引的声明与使用"><a href="#1-索引的声明与使用" class="headerlink" title="1. 索引的声明与使用"></a>1. 索引的声明与使用</h1><h2 id="1-1-索引的分类"><a href="#1-1-索引的分类" class="headerlink" title="1.1 索引的分类"></a>1.1 索引的分类</h2><p>MySQL 的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p><ul><li>从 <code>功能逻辑</code> 按照上说，索引主要有 4 种：普通索引、唯一索引、主键索引、全文索引。</li><li>按照 <code>物理实现方式</code> ，索引可以分为 2 种：聚簇索引和非聚簇索引。</li><li>按照 <code>作用字段个数</code> 进行划分，分成单列索引和联合索引。</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448863.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448096.png" alt="image-20220807151930477"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448134.png" alt="image-20220807152533114"></p><p><strong>小结：不同的存储引擎支持的索引类型也不一样</strong></p><ul><li><code>InnoDB</code>：支持 B-tree、Full-text 等索引，不支持 Hash 索引；</li><li><code>MyISAM</code>：支持 B-tree、Full-text 等索引，不支持 Hash 索引；</li><li><code>Memory</code>：支持 B-tree、Hash 等 索引，不支持 Full-text 索引；</li><li><code>NDB</code> ：支持 Hash 索引，不支持 B-tree、Full-text 等索引；</li><li><code>Archive</code>：不支 持 B-tree、Hash、Full-text 等索引;</li></ul><h2 id="1-2-创建索引"><a href="#1-2-创建索引" class="headerlink" title="1.2 创建索引"></a>1.2 创建索引</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448671.png" alt="image-20220807160116603"></p><h3 id="1、创建表的时候创建索引"><a href="#1、创建表的时候创建索引" class="headerlink" title="1、创建表的时候创建索引"></a>1、创建表的时候创建索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448341.png" alt="image-20220807160201442"></p><p>&#x3D;&#x3D;隐式的索引创建：&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1.隐式的添加索引(在添加有主键约束、唯一性约束或者外键约束的字段会自动的创建索引)</span><br><span class="line">CREATE TABLE dept(</span><br><span class="line">    dept_id INT PRIMARY KEY AUTO_INCREMENT,# 创建主键索引</span><br><span class="line">    dept_name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE emp(</span><br><span class="line">    emp_id INT PRIMARY KEY AUTO_INCREMENT,# 主键索引</span><br><span class="line">    emp_name VARCHAR(20) UNIQUE,# 唯一索引</span><br><span class="line">    dept_id INT,</span><br><span class="line">    CONSTRAINT emp_dept_id_fk FOREIGN KEY(dept_id) REFERENCES dept(dept_id)</span><br><span class="line">); # 外键索引</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;显式的索引创建&#x3D;&#x3D;的话，基本语法格式如下，共有七种情况~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name [col_name data_type]</span><br><span class="line">[UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY] [index_name] (col_name [length]) [ASC | DESC]</span><br></pre></td></tr></table></figure><ul><li><code>UNIQUE</code>、 <code>FULLTEXT</code> 和 <code>SPATIAL</code> 为可选参数，分别表示唯一索引、全文索引和空间索引;</li><li><code>INDEX</code>与<code>KEY</code> 为同义词，两者的作用相同，用来指定创建索引;</li><li><code>index_name</code> 指定索引的名称，为可选参数，如果不指定，那么 MySQL 默认 col_name 为索引名;</li><li><code>col_name</code>为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择;</li><li><code>length</code> 为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度;</li><li><code>ASC</code> 或 <code>DESC</code> 指定升序或者降序的索引值存储。</li><li>特例：主键索引使用主键约束的方式来创建。</li></ul><p><font color=blue><strong>1、创建普通索引</strong></font></p><p>在book表中的year_publication字段上建立普通索引，SQL语句如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ①创建普通的索引</span><br><span class="line">CREATE TABLE book(</span><br><span class="line">    book_id INT ,</span><br><span class="line">    book_name VARCHAR(100),</span><br><span class="line">    AUTHORS VARCHAR(100),</span><br><span class="line">    info VARCHAR(100) ,</span><br><span class="line">    COMMENT VARCHAR(100),</span><br><span class="line">    year_publication YEAR,</span><br><span class="line">    # 声明索引</span><br><span class="line">    INDEX idx_bname(book_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通过命令查看索引有没有创建成功 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 方式1：</span><br><span class="line">SHOW CREATE TABLE book; # Linux下添加\G参数</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448422.png" alt="image-20220808090523313"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 方式2：</span><br><span class="line">SHOW INDEX FROM book;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448455.png" alt="image-20220808090846222"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#性能分析工具：EXPLAIN，查看索引是否正在使用</span><br><span class="line">EXPLAIN SELECT * from book where book_name = &#x27;mysql高级&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448525.png" alt="image-20220808094918948"></p><p>EXPLAIN语句输出结果的各个行我们在下一章讲解，这里主要关注两个字段</p><ul><li>possible_keys行给出了MySQL在搜索数据记录时可选用的各个索引</li><li>key行时MySQL实际选用的索引</li></ul><p>可以看到，possible_keys和key值都为idx_bname，查询时使用了索引</p><p><font color=blue><strong>2、创建唯一索引</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ②创建唯一索引</span><br><span class="line">CREATE TABLE book1 (</span><br><span class="line">  book_id INT,</span><br><span class="line">  book_name VARCHAR (100),</span><br><span class="line">  AUTHORS VARCHAR (100),</span><br><span class="line">  info VARCHAR (100),</span><br><span class="line">  COMMENT VARCHAR (100),</span><br><span class="line">  year_publication YEAR,</span><br><span class="line">  #声明索引</span><br><span class="line">  UNIQUE INDEX uk_idx_cmt (COMMENT)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show INDEX from book1;# 查看索引</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091448621.png" alt="image-20220808101437110"></p><p><font color=blue><strong>3、主键索引</strong></font></p><p>设定为主键后数据库会自动建立索引，innodb为聚簇索引，语法:</p><ul><li><p>随表一起建索引:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ③主键索引</span><br><span class="line"># 通过定义主键约束的方式定义主键索引</span><br><span class="line">create table book2(</span><br><span class="line">    book_id int primary key,</span><br><span class="line">    book_name varchar(100),</span><br><span class="line">    AUTHORS VARCHAR (100),</span><br><span class="line">    info VARCHAR (100),</span><br><span class="line">    COMMENT VARCHAR (100),</span><br><span class="line">    year_publication YEAR</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure></li><li><p>删除主键索引:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 通过删除主键约束的方式删除主键索引</span><br><span class="line">alter table book2</span><br><span class="line">drop primary key;</span><br></pre></td></tr></table></figure></li><li><p>修改主键索引：必须先删除掉（drop）原索引，再新建（add）索引</p></li></ul><p><font color=blue><strong>4、创建单列索引</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#④ 创建单列索引</span><br><span class="line">CREATE TABLE book3(</span><br><span class="line">    book_id INT,</span><br><span class="line">    book_name VARCHAR(100),</span><br><span class="line">    AUTHORS VARCHAR (100),</span><br><span class="line">    info VARCHAR (100),</span><br><span class="line">    COMMENT VARCHAR (100),</span><br><span class="line">    year_publication YEAR,</span><br><span class="line">    UNIQUE INDEX idx_bname(book_name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">show index from book3;</span><br></pre></td></tr></table></figure><p><font color=blue><strong>5、创建组合索引</strong></font></p><p>举例：创建表 book4，在表中的 book_id、book_name和 info字段上建立组合索引，SQL 语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ⑤ 创建联合索引</span><br><span class="line">create table book4(</span><br><span class="line">    book_id INT,</span><br><span class="line">    book_name VARCHAR(100),</span><br><span class="line">    AUTHORS VARCHAR (100),</span><br><span class="line">    info VARCHAR (100),</span><br><span class="line">    COMMENT VARCHAR (100),</span><br><span class="line">    year_publication YEAR,</span><br><span class="line">    index mul_bid_bname_info(book_id,book_name,info)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM book4;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449838.png" alt="image-20220808103642336"></p><p>注意上面三行依次是book_id,book_name,info，与我们创建索引时指定的顺序是严格对应的。在查询时会遵守最左索引原则，&#x3D;&#x3D;先进行book_id条件的比较，然后再进行book_name比较，最后才是info&#x3D;&#x3D;。因此注意把最常用的查询字段放在索引的最左边。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 分析</span><br><span class="line">explain select * from book4 where book_id = 1001 and book_name = &#x27;mysql&#x27;; # 会使用到mul_bid_bname_info索引</span><br><span class="line"></span><br><span class="line">explain select * from book4 where book_name = &#x27;mysql&#x27;;# 不会使用到mul_bid_bname_info索引</span><br></pre></td></tr></table></figure><p><font color=blue><strong>6、 创建全文索引</strong></font></p><p>FULLTEXT全文索引可以用于全文搜索，并且只为<code>CHAR</code>、<code>VARCHAR</code>和<code>TEXT</code>列创建索引。索引总是对整个列进行，不支持局部（前缀）索引。</p><p>举例1：创建表test4，在表中的 info 字段上建立全文索引，SQL 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test4(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    info <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    FULLTEXT INDEX futxt_idx_info(info)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM;</span><br></pre></td></tr></table></figure><blockquote><p>在 MySQL 5.7 及之后版本中可以不指定最后的 ENGINE 了，因为在此版本中 InnoDB 支持全文索引。</p></blockquote><p>语句执行完毕后，用SHOW CREATE TABLE查看表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM test4\G;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449852.png" alt="image-20220808105219393"></p><p>由结果可以看到，info字段上已经成功建立了一个名为futxt_idx_info的FULLTEXT索引。</p><p>举例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> articles (</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    title <span class="type">VARCHAR</span> (<span class="number">200</span>),</span><br><span class="line">    body TEXT,</span><br><span class="line">    FULLTEXT index (title, body)</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB ;</span><br></pre></td></tr></table></figure><p>创建了一个给 title 和 body 字段添加全文索引的表。</p><p>举例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `papers` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  FULLTEXT KEY `title` (`title`,`content`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>不同于 like 方式的的查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> papers <span class="keyword">WHERE</span> content <span class="keyword">LIKE</span> ‘<span class="operator">%</span>查询字符串<span class="operator">%</span>’;</span><br></pre></td></tr></table></figure><p>全文索引用 <code>match+against</code> 方式查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> papers <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(title,content) AGAINST (‘查询字符串’);</span><br></pre></td></tr></table></figure><p>明显的提高查询效率</p><blockquote><p>注意点</p><ol><li>使用全文索引前，搞清楚版本支持情况；</li><li>全文索引比like + % 快 N倍，但是可能存在精度问题</li><li>如果需要全文索引的是大量数据，建议先添加数据，再创建索引。</li></ol></blockquote><p><strong><font color=blue>7、创建空间索引</font></strong></p><p>空间索引创建中，要求空间类型的字段必须为 <code>非空</code> 。</p><p>举例：创建表 test5，在空间类型为 GEOMETRY 的字段上创建空间索引，SQL 语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test5(</span><br><span class="line">    geo GEOMETRY NOT NULL,</span><br><span class="line">    SPATIAL INDEX spa_idx_geo(geo)</span><br><span class="line">) ENGINE=MyISAM;</span><br></pre></td></tr></table></figure><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM test5\G;</span><br></pre></td></tr></table></figure><p>可以看到，test5的geo字段上创建了名称为spa_idx_geo的空间索引。注意创建时指定空间类型字段值的非空约束，并且表的存储引擎为MyISAM</p><h3 id="2、在已经存在的表上创建索引"><a href="#2、在已经存在的表上创建索引" class="headerlink" title="2、在已经存在的表上创建索引"></a>2、在已经存在的表上创建索引</h3><p>在已经存在的表中创建索引可以使用 ALTER TABLE 语句或者 CREATE INDEX 语句。</p><p><font color=blue><strong>1. 使用 ALTER TABLE 语句创建索引</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY]</span><br><span class="line">[index_name] (col_name[length],...) [ASC | DESC]</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449511.png"></p><p><font color=blue> <strong>2. 使用 CREATE INDEX 创建索引</strong> </font></p><p>CREATE INDEX 语句可以在已经存在的表上添加索引，在 MySQL 中， CREATE INDEX 被映射到一个 ALTER TABLE 语句上，基本语法结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name</span><br><span class="line">ON table_name (col_name[length],...) [ASC | DESC]</span><br></pre></td></tr></table></figure><p>举例1：在book表的comment字段上建立名为 的普通索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_cmt on book(comment);</span><br></pre></td></tr></table></figure><p>举例2：在book表中的book_id字段上建立名为uk_idx_bid的唯一索引，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX uk_idx_bid ON book(book_id);</span><br></pre></td></tr></table></figure><p>举例3：在book表的book_id、book_name、info字段上建立联合索引，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX mul_bid_bname_info ON book(book_id,book_name,info);</span><br></pre></td></tr></table></figure><h2 id="1-3-删除索引"><a href="#1-3-删除索引" class="headerlink" title="1.3 删除索引"></a>1.3 删除索引</h2><p>MySQL中删除索引使用<code>ALTER TABLE</code>或<code>DROP INDEX</code>语句，两者可实现相同的功能，DROP INDEX语句在内部被映射到一个ALTER TABLE语句中</p><p><strong><font color=blue>1. 使用 ALTER TABLE 删除索引：</font></strong></p><p>ALTER TABLE删除索引的基本语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> INDEX index_name;</span><br></pre></td></tr></table></figure><p>练习：删除book表中名称为idx_bk_id的唯一索引</p><p>首先查看book表中是否名称为idx_bk_id的索引，输入SHOW语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM book\G;</span><br></pre></td></tr></table></figure><p>下面删除该索引，输入删除语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE book DROP INDEX idx_bk_id;</span><br></pre></td></tr></table></figure><blockquote><p>提示</p><p>添加AUTO_INCREMENT约束字段的唯一索引不能被删除（）</p></blockquote><p><strong><font color=blue>2. 使用 DROP INDEX 语句删除索引：</font></strong></p><p>DROP INDEX删除索引的基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure><p>练习：删除book表中名称为idx_aut_info的组合索引，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX idx_aut_info ON book;</span><br></pre></td></tr></table></figure><p>语句执行完毕，使用SHOW查看索引是否删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE book\G;</span><br></pre></td></tr></table></figure><p>可以看到，book表中已经没有名称为idx_aut_info的组合索引，删除索引成功。</p><blockquote><p>提示 删除表中的列时，如果要删除的列为索引的组成部分，则该列也会从索引中删除。如果组成索引的所有列都被删除，则整个索引将被删除。</p></blockquote><h1 id="2-MySQL-8-0-索引新特性"><a href="#2-MySQL-8-0-索引新特性" class="headerlink" title="2. MySQL 8.0 索引新特性"></a>2. MySQL 8.0 索引新特性</h1><h2 id="2-1-支持降序索引"><a href="#2-1-支持降序索引" class="headerlink" title="2.1 支持降序索引"></a>2.1 支持降序索引</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449173.png" alt="image-20220808170744466"></p><p>举例：分别在 MySQL 5.7 版本和 MySQL 8.0 版本中创建数据表 ts1，结果如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ts1(a <span class="type">int</span>,b <span class="type">int</span>,index idx_a_b(a,b <span class="keyword">desc</span>)); </span><br></pre></td></tr></table></figure><p>在 MySQL 5.7 版本中查看数据表 ts1 的结构，结果如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449413.png" alt="image-20220808172040782"></p><p>从结果可以看出，索引仍然是默认的<strong>升序</strong>。<br>在MySQL 8.0版本中查看数据表ts1的结构，结果如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449270.png" alt="image-20220808171900102"></p><p>从结果可以看出，索引已经是<strong>降序</strong>了。下面继续测试降序索引在执行计划中的表现。</p><p>分别在 MySQL 5.7 版本和 MySQL 8.0 版本的数据表 ts1 中插入 800 条随机数据，执行语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ts_insert()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> <span class="number">800</span></span><br><span class="line">    DO</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> ts1 <span class="keyword">select</span> rand()<span class="operator">*</span><span class="number">80000</span>,rand()<span class="operator">*</span><span class="number">80000</span>;</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ; </span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> ts_insert();</span><br></pre></td></tr></table></figure><p>在 MySQL 5.7 版本中查看数据表 ts1 的执行计划，结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 优化测试</span><br><span class="line">EXPLAIN SELECT * FROM ts1 ORDER BY a,b DESC LIMIT 5;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449501.png" alt="image-20220808175038459"></p><p>从结果可以看出，执行计划中扫描数为 799，而且使用了 Using filesort。</p><blockquote><p>提示：Using filesort 是MySQL中一种速度比较慢的外部排序，能避免是最好的。多数情况下，管理员可以通过优化索引来尽量避免出现 Using filesort，从而提高数据库执行速度。</p></blockquote><p>在 MySQL 8.0 版本中查看数据表 ts1 的执行计划</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449174.png" alt="image-20220808175311396"></p><p>从结果可以看出，执行计划中扫描数为 5，而且没有使用 Using filesort。</p><blockquote><p>注意：降序索引只对查询中特定的排序顺序有效，如果使用不当，反而查询效率更低。例如，上述查询排序条件改为 order by a desc, b desc，MySQL 5.7 的执行计划要明显好于 MySQL 8.0。</p></blockquote><p>将排序条件改为<code>order by a desc,b desc</code>后，下面来对比不同版本中执行计划的效果。</p><p>在MySQL5.7版本中查看数据表ts1的执行计划，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 优化测试</span><br><span class="line">EXPLAIN SELECT * FROM ts1 ORDER BY a DESC,b DESC LIMIT 5;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449645.png" alt="image-20220808175614660"></p><p>在 MySQL 8.0 版本中查看数据表 ts1 的执行计划</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449045.png" alt="image-20220808175714902"></p><p>从结果可以看出，修改后MySQL5.7的执行计划明显好于MySQL8.0</p><h2 id="2-2-隐藏索引（invisible-indexes）"><a href="#2-2-隐藏索引（invisible-indexes）" class="headerlink" title="2.2 隐藏索引（invisible indexes）"></a>2.2 隐藏索引（invisible indexes）</h2><p>在 MySQL 5.7 版本及之前，只能通过显式的方式删除索引。此时，如果发现删除索引后出现错误，又只能通过显式创建索引的方式将删除的索引创建回来。如果数据表中的数据量非常大，或者数据表本身比较大，这种操作就会消耗系统过多的资源，操作成本非常高。</p><p>从MySQL 8.x 开始支持 <code>隐藏索引(invisible indexes)</code>，只需要将待删除的索引设置为隐藏索引，使查询优化器不再使用这个索引（即使使用 force index（强制使用索引），优化器也不会使用该索引）， 确认将索引设置为隐藏索引后系统不受任何响应，就可以彻底删除索引。<code>这种通过先将索引设置为隐藏索引，再删除索引的方式就是软删除</code>。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449197.png" alt="image-20220808180625440"></p><p><font color=blue><strong>1. 创建表时直接创建</strong> </font></p><p>在 MySQL 中创建隐藏索引通过 SQL 语句 <code>INVISIBLE</code> 来实现，其语法形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename(</span><br><span class="line">    propname1 type1[CONSTRAINT1],</span><br><span class="line">    propname2 type2[CONSTRAINT2],</span><br><span class="line">    ......</span><br><span class="line">    propnamen typen,</span><br><span class="line">    INDEX [indexname](propname1 [(length)]) INVISIBLE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上述语句比普通索引多了一个关键字 <code>INVISIBLE</code>，用来标记索引为不可见索引。</p><p>练习：在创建书籍表book时，在字段<code>idx_cmt</code>上创建隐藏索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#① 创建表时，隐藏索引</span><br><span class="line">create table book(</span><br><span class="line">    book_id INT,</span><br><span class="line">    book_name VARCHAR(100),</span><br><span class="line">    AUTHORS VARCHAR (100),</span><br><span class="line">    info VARCHAR (100),</span><br><span class="line">    COMMENT VARCHAR (100),</span><br><span class="line">    year_publication YEAR,</span><br><span class="line">    # 创建不可见的索引</span><br><span class="line">    index idx_cmt(comment) invisible</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通过explain查看发现，优化器并没有使用索引，而是使用的全表扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from book7 where comment = &#x27;mysql...&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449719.png" alt="image-20220808191648127"></p><p><font color=blue><strong>2. 在已经存在的表上创建</strong></font></p><p>可以为已经存在的表设置隐藏索引，其语法形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX indexname</span><br><span class="line"><span class="keyword">ON</span> tablename(propname[(length)]) INVISIBLE;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_year_pub ON book(year_publication) INVISIBLE;</span><br></pre></td></tr></table></figure><p><font color=blue><strong>3. 通过 ALTER TABLE 语句创建</strong></font></p><p>语法形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">ADD</span> INDEX indexname (propname [(length)]) INVISIBLE;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE book</span><br><span class="line">ADD UNIQUE INDEX uk_idx_bname(book_name) INVISIBLE;</span><br></pre></td></tr></table></figure><p><font color=blue><strong>4. 切换索引可见状态</strong> </font></p><p>已存在的索引可通过如下语句切换可见状态:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ALTER INDEX index_name INVISIBLE; #切换成隐藏索引 </span><br><span class="line">ALTER TABLE tablename ALTER INDEX index_name VISIBLE; #切换成非隐藏索引</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 修改索引的可见性</span><br><span class="line">ALTER TABLE book ALTER INDEX idx_year_pub invisible;#可见---&gt;不可见</span><br><span class="line">ALTER TABLE book ALTER INDEX idx_cmt visible;#不可见---》可见</span><br></pre></td></tr></table></figure><p>如果将 idx_cmt 索引切换成可见状态，通过 explain 查看执行计划，发现优化器选择了<code>idx_cmt</code>索引</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091449525.png" alt="image-20220808192215266"></p><blockquote><p><strong>注意：</strong>当索引被隐藏时，它的内容仍然是和正常索引一样实时更新的。如果一个索引需要长期被隐藏，那么可以将其删除，因为索引的存在会影响插入、更新和删除的性能。</p></blockquote><p>通过设置隐藏索引的可见性可以查看索引对调优的帮助。</p><p><strong><font color=blue>5. 使隐藏索引对查询优化器可见(了解)</font></strong></p><p>在 MySQL 8.x 版本中，为索引提供了一种新的测试方式，可以通过查询优化器的一个开关 （use_invisible_indexes）来打开某个设置，使隐藏索引对查询优化器可见。如果 use_invisible_indexes 设置为 off（默认），优化器会忽略隐藏索引。如果设置为 on，即使隐藏索引不可见，优化器在生成执行计划时仍会考虑使用隐藏索引。</p><p>（1）在 MySQL 命令行执行如下命令查看查询优化器的开关设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@optimizer_switch \G</span><br></pre></td></tr></table></figure><p>在输出的结果信息中找到如下属性配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_invisible_indexes=off</span><br></pre></td></tr></table></figure><p>此属性配置值为off，说明隐藏索引默认对查询优化器不可见。</p><p>（2）使隐藏索引对查询优化器可见，需要在 MySQL 命令行执行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set session optimizer_switch=&quot;use_invisible_indexes=on&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>SQL 语句执行成功，再次查看查询优化器的开关设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  select @@optimizer_switch \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">@@optimizer_switch:</span><br><span class="line">index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_</span><br><span class="line">intersection=on,engine_condition_pushdown=on,index_condition_pushdown=on,mrr=on,mrr_co</span><br><span class="line">st_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on</span><br><span class="line">,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on</span><br><span class="line">,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on,use_invisible_ind</span><br><span class="line">exes=on,skip_scan=on,hash_join=on</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>此时，在输出结果中可以看到如下属性配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_invisible_indexes=on</span><br></pre></td></tr></table></figure><p>use_invisible_indexes 属性的值为 on，说明此时隐藏索引对查询优化器可见。</p><p>（3）使用 EXPLAIN 查看以字段 invisible_column 作为查询条件时的索引使用情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from classes where cname = &#x27;高一2班&#x27;;</span><br></pre></td></tr></table></figure><p>查询优化器会使用隐藏索引来查询数据。</p><p>（4）如果需要使隐藏索引对查询优化器不可见，则只需要执行如下命令即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set session optimizer_switch=&quot;use_invisible_indexes=off&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>再次查看查询优化器的开关设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@optimizer_switch \G;</span><br></pre></td></tr></table></figure><p>此时，use_invisible_indexes 属性的值已经被设置为“off”。</p><h1 id="3-索引的设计原则"><a href="#3-索引的设计原则" class="headerlink" title="3. 索引的设计原则"></a>3. 索引的设计原则</h1><h2 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h2><p><strong>第1步：创建数据库、创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE testdb1;</span><br><span class="line">USE atguigudb1;</span><br><span class="line">#<span class="number">1.</span>创建学生表和课程表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student_info` (</span><br><span class="line">     `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">     `student_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">     `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `course_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">     `class_id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course` (</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `course_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    `course_name` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><strong>第2步：创建模拟数据必需的存储函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#函数<span class="number">1</span>:创建随机产生字符串函数</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string(n <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) #该函数会返回一个字符串 </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span></span><br><span class="line"><span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">       <span class="keyword">SET</span> return_str <span class="operator">=</span>CONCAT(return_str,<span class="built_in">SUBSTRING</span>(chars_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line">       <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#函数<span class="number">2</span>:创建随机数函数</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_num (from_num <span class="type">INT</span> ,to_num <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(from_num <span class="operator">+</span>RAND()<span class="operator">*</span>(to_num <span class="operator">-</span> from_num<span class="operator">+</span><span class="number">1</span>)) ;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建函数，假如报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This function has none of DETERMINISTIC......</span><br></pre></td></tr></table></figure><p>由于开启过慢查询日志 bin-log, 我们就必须为我们的 function 指定一个参数。</p><p>主从复制，主机会将写操作记录在 bin-log 日志中。从机读取 bin-log 日志，执行语句来同步数据。如果使用函数来操作数据，会导致从机和主机操作时间不一致。所以，默认情况下，mysql 不开启创建函数设置。</p><ul><li><p>查看 mysql 是否允许创建函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_bin_trust_function_creators&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>命令开启：允许创建函数设置:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span>; </span><br></pre></td></tr></table></figure></li><li><p>mysqld 重启，上述参数又会消失。永久方法：</p><ul><li><p>windows下：my.ini[mysqld]加上：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>linux下：&#x2F;etc&#x2F;my.cnf 下 my.cnf[mysqld] 加上：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>第3步：创建插入模拟数据的存储过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> # 存储过程1:创建插入课程表存储过程</span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE insert_course( max_num INT ) BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">SET autocommit = 0; #设置手动提交事务</span><br><span class="line">REPEAT #循环</span><br><span class="line">SET i=i+1; #赋值</span><br><span class="line">INSERT INTO course(course_id, course_name)VALUES(rand_num(10000,10100),rand_string(6));</span><br><span class="line">UNTIL i = max_num</span><br><span class="line">END REPEAT;</span><br><span class="line">COMMIT; #提交事务 </span><br><span class="line">END //</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 存储过程<span class="number">2</span>:创建插入学生信息表存储过程</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_stu( max_num <span class="type">INT</span> ) <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; #设置手动提交事务</span><br><span class="line">REPEAT #循环</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; #赋值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student_info (course_id, class_id ,student_id ,NAME ) <span class="keyword">VALUES</span></span><br><span class="line">(rand_num(<span class="number">10000</span>,<span class="number">10100</span>),rand_num(<span class="number">10000</span>,<span class="number">10200</span>),rand_num(<span class="number">1</span>,<span class="number">200000</span>),rand_string(<span class="number">6</span>)); UNTIL i <span class="operator">=</span> max_num</span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">COMMIT</span>; #提交事务</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>第4步：调用存储过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL insert_course(100); # 课程表中添加100条数据</span><br><span class="line">CALL insert_stu(1000000);# 学生表中插入1000000条数据</span><br></pre></td></tr></table></figure><h2 id="3-2-哪些情况适合创建索引"><a href="#3-2-哪些情况适合创建索引" class="headerlink" title="3.2 哪些情况适合创建索引"></a>3.2 哪些情况适合创建索引</h2><h3 id="1、字段的数值有唯一性的限制"><a href="#1、字段的数值有唯一性的限制" class="headerlink" title="1、字段的数值有唯一性的限制"></a>1、字段的数值有唯一性的限制</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450827.png" alt="image-20220808223333115"></p><h3 id="2、频繁作为-WHERE-查询条件的字段"><a href="#2、频繁作为-WHERE-查询条件的字段" class="headerlink" title="2、频繁作为 WHERE 查询条件的字段"></a>2、频繁作为 WHERE 查询条件的字段</h3><p>某个字段在 SELECT 语句的 WHERE 条件中经常被使用到，那么就需要给这个字段创建索引了。尤其是在数据量大的情况下，创建普通索引就可以大幅提升数据查询的效率。</p><p>比如 student_info 数据表（含 100 万条数据），假设我们想要查询 student_id&#x3D;123110 的用户信息。</p><p><font color=green>①查看<code>student_info</code>表中的索引</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450245.png" alt="image-20220808232908970"></p><p>可以看出，我们没有对student_id字段创建索引。</p><p><font color=green>②进行如下查询</font>，耗时220ms</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450669.png" alt="image-20220808232610826"></p><p><font color=green>③添加索引</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table student_info add index idx_sid(student_id);</span><br></pre></td></tr></table></figure><p><font color=green>④再查询。耗时0ms。性能提升杠杠的~</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450316.png" alt="image-20220808233519505"></p><h3 id="3、经常-GROUP-BY-和-ORDER-BY-的列"><a href="#3、经常-GROUP-BY-和-ORDER-BY-的列" class="headerlink" title="3、经常 GROUP BY 和 ORDER BY 的列"></a>3、经常 GROUP BY 和 ORDER BY 的列</h3><p>索引其实就是让数据按照某种顺序进行存储或检索。当我们使用 GROUP BY 对数据进行分组查询，或者使用 ORDER BY 对数据进行排序的时候，如果 <code>对分组或者排序的字段建立索引</code>，本身索引的数据就已经排好序了，进行分组查询和排序操作性能不是很nice吗？另外，如果待排序的列有多个，那么可以在这些列上建立 <code>组合索引</code> 。</p><p><font color=green>①下面在有<code>student_id</code>索引的情况下，查询：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num</span><br><span class="line">    -&gt; FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+------------+-----+</span><br><span class="line">| student_id | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">|          1 |   5 |</span><br><span class="line">.....此处省略n行......</span><br><span class="line">|          3 |   4 |</span><br><span class="line">|        101 |   7 |</span><br><span class="line">+------------+-----+</span><br><span class="line">100 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><font color=green>②删除索引</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除idx_sid索引</span><br><span class="line">DROP INDEX idx_sid ON student_info;</span><br></pre></td></tr></table></figure><p><font color=green>③再次查询 ，慢的像蜗牛~</font> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num</span><br><span class="line">    -&gt; FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+------------+-----+</span><br><span class="line">| student_id | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">|      95666 |   9 |</span><br><span class="line">.....此处省略n行......</span><br><span class="line">|     173440 |  14 |</span><br><span class="line">|      67234 |   9 |</span><br><span class="line">+------------+-----+</span><br><span class="line">100 rows in set (0.78 sec)</span><br></pre></td></tr></table></figure><p><strong>同样，如果是ORDER BY，也需要对字段创建索引</strong></p><p><font color=green>④如果同时使用<code>GROUP BY</code>和<code>ORDER BY</code>，先看看不加索引的情况</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">ERROR 1055 (42000): Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column &#x27;atguigudb1.student_info.create_time&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure><p><font color=green>⑤出现了一个异常信息，这是因为我们使用的<code>sql_mode</code>是<code>only_full_group_by</code>。修改下再来查询，时间代价是6.61s</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT @@sql_mode;</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| @@sql_mode                                                                                                            |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @@sql_mode = &#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec); # 去掉ONLY_FULL_GROUP_BY</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+------------+-----+</span><br><span class="line">| student_id | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">|      21497 |   1 |</span><br><span class="line">|      17311 |   1 |</span><br><span class="line">.....此处省略n行......</span><br><span class="line">|     183509 |   1 |</span><br><span class="line">+------------+-----+</span><br><span class="line">100 rows in set (6.61 sec)</span><br></pre></td></tr></table></figure><p><font color=green>⑥再看看两个字段分别建立单列索引的情况，耗时5.26 s，快了一点点</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student_info ADD INDEX idx_sid(student_id);</span><br><span class="line">Query OK, 0 rows affected (1.77 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER TABLE student_info ADD INDEX idx_cre_time(create_time);</span><br><span class="line">Query OK, 0 rows affected (1.49 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+------------+-----+</span><br><span class="line">| student_id | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">|      64044 |   1 |</span><br><span class="line">.....此处省略n行......</span><br><span class="line">|     101052 |   1 |</span><br><span class="line">|     152620 |   1 |</span><br><span class="line">+------------+-----+</span><br><span class="line">100 rows in set (5.26 sec)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>建立多个单列索引，并不会都走，像刚才这个例子，只会走idx_sid索引</p><p><font color=green>⑦分析下它的查询过程,原来我们只用了一个索引，由于我们是先<code>GROUP BY student_id</code>,后<code>ORDER BY create_time</code>，我们实际上只使用了索引<code>idx_sid </code></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+----+-------------+--------------+------------+-------+---------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">| id | select_type | table        | partitions | type  | possible_keys | key     | key_len | ref  | rows   | filtered | Extra                           |</span><br><span class="line">+----+-------------+--------------+------------+-------+---------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">|  1 | SIMPLE      | student_info | NULL       | index | idx_sid       | idx_sid | 4       | NULL | 997130 |   100.00 | Using temporary; Using filesort |</span><br><span class="line">+----+-------------+--------------+------------+-------+---------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p><font color=green>⑧建立联合索引的情况,芜湖起飞，直接0.25s。此时我们用<code>EXPLAIN</code>查看命中的也是 联合索引</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  ALTER TABLE student_info ADD INDEX idx_sid_cre_time(student_id,create_time DESC);</span><br><span class="line">Query OK, 0 rows affected (2.09 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+------------+-----+</span><br><span class="line">| student_id | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">|       1226 |   8 |</span><br><span class="line">.....此处省略n行......</span><br><span class="line">|       1400 |   2 |</span><br><span class="line">+------------+-----+</span><br><span class="line">100 rows in set (0.25 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+------------------+---------+------+--------+----------+----------------------------------------------+</span><br><span class="line">| id | select_type | table        | partitions | type  | possible_keys            | key              | key_len | ref  | rows   | filtered | Extra                                        |</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+------------------+---------+------+--------+----------+----------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | student_info | NULL       | index | idx_sid,idx_sid_cre_time | idx_sid_cre_time | 10      | NULL | 997130 |   100.00 | Using index; Using temporary; Using filesort |</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+------------------+---------+------+--------+----------+----------------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p><font color=green>⑨再来测试,交换字段顺序建立联合索引<code>idx_cre_time_sid</code>，耗时5.24s。下面查询真正使用的索引<code>key</code>是<code>idx_sid </code></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student_info ADD INDEX idx_cre_time_sid(create_time DESC,student_id);</span><br><span class="line">Query OK, 0 rows affected (2.10 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP INDEX idx_sid_cre_time ON student_info; #删除联合索引idx_sid_cre_time</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; show INDEX from student_info; # 查看student_info中的索引</span><br><span class="line">+--------------+------------+------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">| Table        | Non_unique | Key_name         | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |</span><br><span class="line">+--------------+------------+------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">| student_info |          0 | PRIMARY          |            1 | id          | A         |      993366 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">| student_info |          1 | idx_sid          |            1 | student_id  | A         |      199180 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">| student_info |          1 | idx_cre_time     |            1 | create_time | A         |          82 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">| student_info |          1 | idx_cre_time_sid |            1 | create_time | D         |          77 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">| student_info |          1 | idx_cre_time_sid |            2 | student_id  | A         |      967825 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">+--------------+------------+------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br><span class="line">+------------+-----+</span><br><span class="line">| student_id | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">|      64044 |   1 |</span><br><span class="line">.....此处省略n行......</span><br><span class="line">|     101052 |   1 |</span><br><span class="line">|     152620 |   1 |</span><br><span class="line">+------------+-----+</span><br><span class="line">100 rows in set (5.24 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;#起作用的是idx_sid</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">| id | select_type | table        | partitions | type  | possible_keys            | key     | key_len | ref  | rows   | filtered | Extra                           |</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">|  1 | SIMPLE      | student_info | NULL       | index | idx_sid,idx_cre_time_sid | idx_sid | 4       | NULL | 997130 |   100.00 | Using temporary; Using filesort |</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>如果我们仅仅使用GROUP BY 或者 ORDER BY，且后面只有一个字段，则单独建立索引；如果后面跟多个字段，则建立联合索引。如果既有GROUP BY 又有 ORDER BY，那就建立联合索引，且GROUP BY的字段写在前面，ORDER BY的字段写在后面。8.0后的版本也可以考虑使用降序索引</p><h3 id="4、UPDATE、DELETE-的-WHERE-条件列"><a href="#4、UPDATE、DELETE-的-WHERE-条件列" class="headerlink" title="4、UPDATE、DELETE 的 WHERE 条件列"></a>4、UPDATE、DELETE 的 WHERE 条件列</h3><p>对数据按照某个条件进行查询后再进行 UPDATE 或 DELETE 的操作，如果对 WHERE 字段创建了索引，就能大幅提升效率。原理是因为我们需要先根据 WHERE 条件列检索出来这条记录，然后再对它进行更新或删除。 &#x3D;&#x3D;如果进行更新的时候，更新的字段是非索引字段，提升的效率会更明显，这是因为非索引字段更新不需要对索引进行维护&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE student_info SET student_id = 10002</span><br><span class="line">    -&gt;  WHERE NAME = &#x27;462eed7ac6e791292a79&#x27;;# 550ms</span><br><span class="line">Query OK, 0 rows affected (0.55 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER TABLE student_info</span><br><span class="line">    -&gt; ADD INDEX idx_name(NAME);</span><br><span class="line">Query OK, 0 rows affected (2.26 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; UPDATE student_info SET student_id = 10002</span><br><span class="line">    -&gt; WHERE NAME = &#x27;462eed7ac6e791292a79&#x27;;# 1ms</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h3 id="5、DISTINCT-字段需要创建索引"><a href="#5、DISTINCT-字段需要创建索引" class="headerlink" title="5、DISTINCT 字段需要创建索引"></a>5、DISTINCT 字段需要创建索引</h3><p>有时候我们需要对某个字段进行去重，使用 <code>DISTINCT</code>，那么对这个字段创建索引，也会提升查询效率。</p><p>比如，我们想要查询课程表中不同的 student_id 都有哪些，如果我们没有对 student_id 创建索引，执行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(student_id) <span class="keyword">FROM</span> `student_info`; </span><br></pre></td></tr></table></figure><p>运行结果（600637 条记录，运行时间 0.683s ）</p><p>如果我们对 student_id 创建索引，再执行 SQL 语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(student_id) <span class="keyword">FROM</span> `student_info`;</span><br></pre></td></tr></table></figure><p>运行结果（600637 条记录，运行时间<code>0.010s</code> ）<br>你能看到 SQL 查询效率有了提升，同时显示出来的 student_id 还是按照 <code>递增的顺序</code> 进行展示的。这是因为索引会对数据按照某种顺序进行排序，所以在去重的时候也会快很多。</p><h3 id="6、多表-JOIN-连接操作时，创建索引注意事项"><a href="#6、多表-JOIN-连接操作时，创建索引注意事项" class="headerlink" title="6、多表 JOIN 连接操作时，创建索引注意事项"></a>6、多表 JOIN 连接操作时，创建索引注意事项</h3><p>首先，<code>连接表的数量尽量不要超过 3 张</code> ，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增长会非常快(n ,n^2 , n^3…)，严重影响查询的效率。</p><p>其次，<code>对 WHERE 条件创建索引</code>，因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下，没有 WHERE 条件过滤是非常可怕的。</p><blockquote><p>🔊注意：对于用连接的字段创建索引，这些&#x3D;&#x3D;字段在多张表中的 类型必须一致&#x3D;&#x3D; 。比如 course_id 在student_info 表和 course 表中都为 int(11) 类型，而不能一个为 int 另一个为 varchar 类型。否则在查询时，虽然也会帮我们进行隐式的类型转换，转换时会使用函数，但会导致&#x3D;&#x3D;索引失效&#x3D;&#x3D;。索引失效情况在后续文章中还会给大家详细介绍，敬请期待。</p></blockquote><p>举个例子，如果我们只对 student_id 创建索引，执行 SQL 语句，耗时0.21s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> c.course_id, NAME, s.student_id, course_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> student_info s <span class="keyword">JOIN</span> course c</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ON</span> s.course_id <span class="operator">=</span> c.course_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;WloNYD&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> course_id <span class="operator">|</span> NAME   <span class="operator">|</span> student_id <span class="operator">|</span> course_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------+------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10077</span> <span class="operator">|</span> WloNYD <span class="operator">|</span>      <span class="number">95666</span> <span class="operator">|</span> JfydVs      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10077</span> <span class="operator">|</span> WloNYD <span class="operator">|</span>      <span class="number">95666</span> <span class="operator">|</span> nZkayq      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10077</span> <span class="operator">|</span> WloNYD <span class="operator">|</span>      <span class="number">95666</span> <span class="operator">|</span> mTHDYg      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10085</span> <span class="operator">|</span> wLonyD <span class="operator">|</span>      <span class="number">98444</span> <span class="operator">|</span> pZdpsR      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------+------------+-------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.21</span> sec)</span><br></pre></td></tr></table></figure><p>这时，我们对 name 创建索引，再执行上面的 SQL 语句，耗时 0.00s </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE student_info</span><br><span class="line">    -&gt; ADD INDEX idx_name(NAME);# 为name创建索引</span><br><span class="line">Query OK, 0 rows affected (2.52 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT c.course_id, name, s.student_id, course_name</span><br><span class="line">    -&gt; FROM student_info s JOIN course c</span><br><span class="line">    -&gt; ON s.course_id = c.course_id</span><br><span class="line">    -&gt; WHERE name = &#x27;WloNYD&#x27;;</span><br><span class="line">+-----------+--------+------------+-------------+</span><br><span class="line">| course_id | name   | student_id | course_name |</span><br><span class="line">+-----------+--------+------------+-------------+</span><br><span class="line">|     10077 | WloNYD |      95666 | mTHDYg      |</span><br><span class="line">|     10077 | WloNYD |      95666 | nZkayq      |</span><br><span class="line">|     10085 | wLonyD |      98444 | pZdpsR      |</span><br><span class="line">|     10077 | WloNYD |      95666 | JfydVs      |</span><br><span class="line">+-----------+--------+------------+-------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="7、使用列的类型小的创建索引"><a href="#7、使用列的类型小的创建索引" class="headerlink" title="7、使用列的类型小的创建索引"></a>7、使用列的类型小的创建索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450695.png" alt="image-20220809123640764"></p><h3 id="8、使用字符串前缀创建索引"><a href="#8、使用字符串前缀创建索引" class="headerlink" title="8、使用字符串前缀创建索引"></a>8、使用字符串前缀创建索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450108.png" alt="image-20220809124018899"></p><p>创建一张商户表，因为地址字段比较长，在地址字段上建立前缀索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> shop(address <span class="type">varchar</span>(<span class="number">120</span>) <span class="keyword">not</span> <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> shop <span class="keyword">add</span> index(address(<span class="number">12</span>));</span><br></pre></td></tr></table></figure><p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的;截取得少了，重复内容太多，字段的散列度（选择性）会降低。 <strong>怎么计算不同的长度的选择性呢?</strong></p><p>先看一下字段在全部数据中的选择度:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> address) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> shop;</span><br></pre></td></tr></table></figure><p>通过不同长度去计算，与全表的选择性对比:</p><p>公式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(列名, 索引长度))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(address,<span class="number">10</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sub10, <span class="comment">-- 截取前10个字符的选择度 </span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(address,<span class="number">15</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sub11, <span class="comment">-- 截取前15个字符的选择度 </span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(address,<span class="number">20</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sub12, <span class="comment">-- 截取前20个字符的选择度 </span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(address,<span class="number">25</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sub13 <span class="comment">-- 截取前25个字符的选择度</span></span><br><span class="line"><span class="keyword">from</span> shop;</span><br></pre></td></tr></table></figure><blockquote><p>🎯 拓展：Alibaba《Java开发手册》<br>【 强制 】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。<br>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会 高达90% 以上 ，可以使用 count(distinct left(列名, 索引长度))&#x2F;count(*)的区分度来确定。</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450829.png" alt="image-20220809124350692"></p><h3 id="9、区分度高（散列性高）的列适合作为索引"><a href="#9、区分度高（散列性高）的列适合作为索引" class="headerlink" title="9、区分度高（散列性高）的列适合作为索引"></a>9、区分度高（散列性高）的列适合作为索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450732.png" alt="image-20220809125818380"></p><h3 id="10、使用最频繁的列放到联合索引的左侧"><a href="#10、使用最频繁的列放到联合索引的左侧" class="headerlink" title="10、使用最频繁的列放到联合索引的左侧"></a>10、使用最频繁的列放到联合索引的左侧</h3><p>这样也可以较少的建立一些索引。同时，由于”最左前缀原则”，可以增加联合索引的使用率。</p><h3 id="11、在多个字段都要创建索引的情况下，联合索引优于单值索引"><a href="#11、在多个字段都要创建索引的情况下，联合索引优于单值索引" class="headerlink" title="11、在多个字段都要创建索引的情况下，联合索引优于单值索引"></a>11、在多个字段都要创建索引的情况下，联合索引优于单值索引</h3><ul><li><p>索引建立的多，维护的成本也高。</p></li><li><p>&#x3D;&#x3D;多个字段进行联合查询时，其实只使用到一个索引&#x3D;&#x3D;。如下，只用到了idx_sid索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">    -&gt; GROUP BY student_id</span><br><span class="line">    -&gt; ORDER BY create_time DESC</span><br><span class="line">    -&gt; LIMIT 100;</span><br></pre></td></tr></table></figure></li><li><p>在建立联合索引的相关字段做查询时，联合索引都能生效，使用频率比较高。足够优化sql执行的速度了</p></li></ul><h2 id="3-3-限制索引的数目"><a href="#3-3-限制索引的数目" class="headerlink" title="3.3 限制索引的数目"></a>3.3 限制索引的数目</h2><p>在实际工作中，我们也需要注意平衡，索引的数目不是越多越好。我们需要限制每张表上的索引数量，建议单张表索引数量<code>不超过6个</code>。原因：</p><p>①每个索索引都需要占用磁盘空间，&#x3D;&#x3D;索引越多，需要的磁盘空间就越大&#x3D;&#x3D;。</p><p>②&#x3D;&#x3D;索引会影响INSERT、DELETE、 UPDATE等语句的性能&#x3D;&#x3D;，因为表中的数据更改的同时，索引也会进行调整和更新，会造成负担。</p><p>③优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，&#x3D;&#x3D;如果同时有很多个索引都可以用于查询，会增加MySQL优化器生成执行计划时间，降低查询性能&#x3D;&#x3D;。</p><p>解释：表中创建的索引过多，优化器在possible_keys中选择合适的key 时需要的成本也会更多。比如下面查询中possible_keys有两个，实际使用的key只有一个，这其实优化器判断的哟。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT student_id,COUNT(*) AS num FROM student_info</span><br><span class="line">   -&gt; GROUP BY student_id</span><br><span class="line">   -&gt; ORDER BY create_time DESC</span><br><span class="line">   -&gt; LIMIT 100;</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">| id | select_type | table        | partitions | type  | possible_keys            | key     | key_len | ref  | rows   | filtered | Extra                           |</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">|  1 | SIMPLE      | student_info | NULL       | index | idx_sid,idx_cre_time_sid | idx_sid | 4       | NULL | 997449 |   100.00 | Using temporary; Using filesort |</span><br><span class="line">+----+-------------+--------------+------------+-------+--------------------------+---------+---------+------+--------+----------+---------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="3-4-哪些情况不适合创建索引"><a href="#3-4-哪些情况不适合创建索引" class="headerlink" title="3.4 哪些情况不适合创建索引"></a>3.4 哪些情况不适合创建索引</h2><h3 id="1、在-where-中使用不到的字段，不要设置索引"><a href="#1、在-where-中使用不到的字段，不要设置索引" class="headerlink" title="1、在 where 中使用不到的字段，不要设置索引"></a>1、在 where 中使用不到的字段，不要设置索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091450244.png" alt="image-20220809141101656"></p><h3 id="2、数据量小的表最好不要使用索引"><a href="#2、数据量小的表最好不要使用索引" class="headerlink" title="2、数据量小的表最好不要使用索引"></a>2、数据量小的表最好不要使用索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451173.png" alt="image-20220809141554393"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451943.png" alt="image-20220809141625335"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451829.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451813.png" alt="image-20220809141408722"></p><blockquote><p><strong>结论：在数据表中的数据行数比较少的情况下，比如不到 1000 行，是不需要创建索引的。</strong></p></blockquote><h3 id="3、有大量重复数据的列上不要建立索引"><a href="#3、有大量重复数据的列上不要建立索引" class="headerlink" title="3、有大量重复数据的列上不要建立索引"></a>3、有大量重复数据的列上不要建立索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451062.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451766.png" alt="image-20220809142700207"></p><h3 id="4、避免对经常更新的表创建过多的索引"><a href="#4、避免对经常更新的表创建过多的索引" class="headerlink" title="4、避免对经常更新的表创建过多的索引"></a>4、避免对经常更新的表创建过多的索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451766.png" alt="image-20220809142913807"></p><h3 id="5、不建议用无序的值作为索引"><a href="#5、不建议用无序的值作为索引" class="headerlink" title="5、不建议用无序的值作为索引"></a>5、不建议用无序的值作为索引</h3><p>例如身份证、UUID（在索引比较时需要转为 ASCII，并且插入时可能造成页分裂）、MD5、HASH、无序长字符串等。</p><h3 id="6、删除不再使用或者很少使用的索引"><a href="#6、删除不再使用或者很少使用的索引" class="headerlink" title="6、删除不再使用或者很少使用的索引"></a>6、删除不再使用或者很少使用的索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451780.png" alt="image-20220809143114720"></p><h3 id="7、不要定义冗余或重复的索引"><a href="#7、不要定义冗余或重复的索引" class="headerlink" title="7、不要定义冗余或重复的索引"></a>7、不要定义冗余或重复的索引</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091455240.png" alt="image-20220809143241722"></p><p><strong><font color=green>冗余索引</font></strong></p><p>举例：建表语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_info(</span><br><span class="line">    id <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    birthday <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    phone_number <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    country <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    KEY idx_name_birthday_phone_number (name(<span class="number">10</span>), birthday, phone_number),</span><br><span class="line">    KEY idx_name (name(<span class="number">10</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们知道，通过 <code>idx_name_birthday_phone_number</code> 索引就可以对 <code>name</code> 列进行快速搜索，再创建一 个专门针对 <code>name</code> 列的索引就算是一个 <code>冗余索引</code>，维护这个索引只会增加维护的成本，并不会对搜索有 什么好处。</p><p><strong><font color=green>重复索引</font></strong></p><p>另一种情况，我们可能会对某个列 <code>重复建立索引</code> ，比方说这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> repeat_index_demo (</span><br><span class="line">    col1 <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    col2 <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> uk_idx_c1 (col1),</span><br><span class="line">    INDEX idx_c1 (col1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们看到，col1 既是主键、又给它定义为一个唯一索引，还给它定义了一个普通索引，可是主键本身就会生成聚簇索引，所以定义的唯一索引和普通索引是重复的，这种情况要避免。</p><h2 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208091451878.png" alt="image-20220809143442576"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、InnoDB数据存储结构</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC05%E7%AB%A0_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC05%E7%AB%A0_InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据的存储结构：页"><a href="#1-数据的存储结构：页" class="headerlink" title="1. 数据的存储结构：页"></a>1. 数据的存储结构：页</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251415034.png" alt="image-20220724103054165"></p><h2 id="1-1-磁盘与内存交互基本单位：页"><a href="#1-1-磁盘与内存交互基本单位：页" class="headerlink" title="1.1 磁盘与内存交互基本单位：页"></a>1.1 磁盘与内存交互基本单位：页</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251415335.png" alt="image-20220724103337984"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251415197.png" alt="image-20220724103747719"></p><h2 id="1-2-页结构概述"><a href="#1-2-页结构概述" class="headerlink" title="1.2 页结构概述"></a>1.2 页结构概述</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251415916.png" alt="image-20220724104418653"></p><h2 id="1-3-页的大小"><a href="#1-3-页的大小" class="headerlink" title="1.3 页的大小"></a>1.3 页的大小</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251415071.png" alt="image-20220724104412027"></p><h2 id="1-4-页的上层结构"><a href="#1-4-页的上层结构" class="headerlink" title="1.4 页的上层结构"></a>1.4 页的上层结构</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416875.png" alt="image-20220724104918055"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416509.png" alt="image-20220724104825429"></p><h1 id="2-页的内部结构"><a href="#2-页的内部结构" class="headerlink" title="2. 页的内部结构"></a>2. 页的内部结构</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416468.png" alt="image-20220724111001675"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416267.png" alt="image-20220724110313834"></p><h2 id="2-1-File-Header（文件头部）和File-Trailer（文件尾部）"><a href="#2-1-File-Header（文件头部）和File-Trailer（文件尾部）" class="headerlink" title="2.1 File Header（文件头部）和File Trailer（文件尾部）"></a>2.1 File Header（文件头部）和File Trailer（文件尾部）</h2><h3 id="2-1-1-File-Header（文件头部）"><a href="#2-1-1-File-Header（文件头部）" class="headerlink" title="2.1.1 File Header（文件头部）"></a>2.1.1 File Header（文件头部）</h3><p><strong>作用：</strong>描述各种页的通用信息。（比如页的编号、其上一页、下一页是谁等）</p><p><strong>大小：</strong>38字节</p><p><strong>构成：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416558.bmp"></p><ul><li><p><strong><font color=green>FIL_PAGE_OFFSET（4字节）</font></strong></p><p>每一个页都有一个单独的页号，就跟你的身份证号码一样，InnoDB通过页号可以唯一定位一个页。</p></li><li><p><strong><font color=green>FIL_PAGE_TYPE（2字节）</font></strong></p><p>这个代表当前页的类型</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416462.png" alt="image-20220724125956493"></p><ul><li><p><strong><font color=green>FIL_PAGE_PREV（4字节）和FIL_PAGE_NEXT（4字节）</font></strong></p><p>InnoDB都是以页为单位存放数据的，如果数据分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。这样通过建立一个双向链表把许许多多的页就都串联起来了，保证这些页之间不需要是物理上的连续，而是逻辑上的连续。</p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416475.png" alt="image-20220724130103373"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416013.png" alt="image-20220724130110950"></p><ul><li><p><strong><font color=green>FIL_PAGE_SPACE_OR_CHKSUM（4字节）</font></strong></p><p>文件头部和文件尾部都有属性：<code>FIL_PAGE_SPACE_OR_CHKSUM</code></p><p><strong>作用：</strong><br>InnoDB存储引擎以页为单位把数据加载到内存中处理，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在同步了一半的时候断电了，造成了该页传输的不完整。</p><p>&#x3D;&#x3D;为了检测一个页是否完整&#x3D;&#x3D;（也就是在同步的时候有没有发生只同步一半的尴尬情况），这时&#x3D;&#x3D;可以通过文件尾的校验和&#x3D;&#x3D;（checksum 值）&#x3D;&#x3D;与文件头的校验和做比对&#x3D;&#x3D;，如果两个值不相等则证明页的传输有问题，需要重新进行传输，否则认为页的传输已经完成。</p><p><strong>具体的：</strong></p><p>每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前边，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，&#x3D;&#x3D;如果完全同步成功，则页的首部和尾部的校验和应该是一致的&#x3D;&#x3D;。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trailer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。这里，校验方式就是采用 &#x3D;&#x3D;Hash 算法&#x3D;&#x3D;进行校验。</p></li><li><p><strong><font color=green>FIL_PAGE_LSN（8字节）</font></strong></p><p>页面被最后修改时对应的日志序列位置（英文名是：Log Sequence Number）</p></li></ul><h3 id="2-1-2-File-Trailer（文件尾部）"><a href="#2-1-2-File-Trailer（文件尾部）" class="headerlink" title="2.1.2 File Trailer（文件尾部）"></a>2.1.2 File Trailer（文件尾部）</h3><ul><li><p><strong><font color=green>前4个字节代表页的校验和：</font></strong><br>这个部分是和File Header中的校验和相对应的。</p></li><li><p><strong><font color=green>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）：</font></strong></p><p>这个部分也是为了校验页的完整性的，如果首部和尾部的LSN值校验不成功的话，就说明同步过程出现了问题。</p></li></ul><h2 id="2-2-User-Records-用户记录-、最大最小记录、Free-Space-空闲空间"><a href="#2-2-User-Records-用户记录-、最大最小记录、Free-Space-空闲空间" class="headerlink" title="2.2 User Records(用户记录)、最大最小记录、Free Space(空闲空间)"></a>2.2 User Records(用户记录)、最大最小记录、Free Space(空闲空间)</h2><h3 id="2-2-1-Free-Space-空闲空间"><a href="#2-2-1-Free-Space-空闲空间" class="headerlink" title="2.2.1 Free Space (空闲空间)"></a>2.2.1 Free Space (空闲空间)</h3><p>我们自己存储的记录会按照指定的&#x3D;&#x3D;行格式&#x3D;&#x3D;存储到&#x3D;&#x3D;User Records&#x3D;&#x3D;部分。但是在一开始生成页的时候，其实并没有User Records这个部分，&#x3D;&#x3D;每当我们插入一条记录，都会从Free Space部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分&#x3D;&#x3D;，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去&#x3D;&#x3D;申请新的页&#x3D;&#x3D;了。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416340.png" alt="image-20220724130814897"></p><h3 id="2-2-2-User-Records-用户记录"><a href="#2-2-2-User-Records-用户记录" class="headerlink" title="2.2.2 User Records (用户记录)"></a>2.2.2 User Records (用户记录)</h3><p>User Records中的这些记录按照&#x3D;&#x3D;指定的行格式&#x3D;&#x3D;一条一条摆在User Records部分，相互之间形成&#x3D;&#x3D;单链表&#x3D;&#x3D;。</p><p><strong>用户记录里的一条条数据如何记录？</strong></p><p>这里需要讲讲记录行格式的记录头信息。</p><h3 id="2-2-3-Infimum-Supremum（最小最大记录）"><a href="#2-2-3-Infimum-Supremum（最小最大记录）" class="headerlink" title="2.2.3 Infimum + Supremum（最小最大记录）"></a>2.2.3 Infimum + Supremum（最小最大记录）</h3><p><strong>记录可以比较大小吗？</strong></p><p>是的，记录可以比大小，对于一条完整的记录来说，比较记录的大小就是&#x3D;&#x3D;比较主键&#x3D;&#x3D;的大小。比方说我们插入的4行记录的主键值分别是：1、2、3、4，这也就意味着这4条记录是从小到大依次递增。</p><p>InnoDB规定的最小记录与最大记录这两条记录的构造十分简单，都是由5字节大小的记录头信息和8字节大小的一个固定的部分组成的，如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416484.png" alt="image-20220724131119987"></p><p>这两条记录&#x3D;&#x3D;不是我们自己定义的记录&#x3D;&#x3D;，所以它们并不存放在页的User Records部分，他们被单独放在一个称为Infimum + Supremum的部分，如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416501.png" alt="image-20220724131133664"></p><h2 id="2-3-Page-Directory-页目录-、Page-Header-页面头部"><a href="#2-3-Page-Directory-页目录-、Page-Header-页面头部" class="headerlink" title="2.3 Page Directory(页目录)、Page Header(页面头部)"></a>2.3 Page Directory(页目录)、Page Header(页面头部)</h2><h3 id="2-3-1-Page-Directory（页目录）"><a href="#2-3-1-Page-Directory（页目录）" class="headerlink" title="2.3.1 Page Directory（页目录）"></a>2.3.1 Page Directory（页目录）</h3><p><font color=green><strong>1.为什么需要页目录？</strong></font></p><p>在页中，记录是以&#x3D;&#x3D;单向链表&#x3D;&#x3D;的形式进行存储的。单向链表的特点就是插入、删除非常方便，但是&#x3D;&#x3D;检索效率不高&#x3D;&#x3D;，最差的情况下需要遍历链表上的所有节点才能完成检索。因此在页结构中专门设计了页目录这个模块，&#x3D;&#x3D;专门给记录做一个目录&#x3D;&#x3D;，通过&#x3D;&#x3D;二分查找&#x3D;&#x3D;法的方式进行检索，提升效率。</p><p>需求：根据主键值查找页中的某条记录，如何实现快速查找呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM page_demo WHERE c1 = 3;</span><br></pre></td></tr></table></figure><p><font color=red>方式1：顺序查找</font></p><p>从Infimum记录（最小记录）开始，沿着链表一直往后找，总有一天会找到（或者找不到），在找的时候还能投机取巧，因为链表中各个记录的值是按照从小到大顺序排列的，所以当链表的某个节点代表的记录的主键值大于你想要查找的主键值时，你就可以停止查找了，因为该节点后边的节点的主键值依次递增。</p><p>如果一个页中存储了非常多的记录，这么查找性能很差。</p><p><font color=red>方式2：使用页目录，二分法查找</font></p><ol><li><p>将所有的记录分成几个组，<strong>这些记录包括最小记录和最大记录，但不包括标记为“已删除”的记</strong>录。</p><ul><li><p>第 1 组，也就是最小记录所在的分组只有 1 个记录；</p></li><li><p>最后一组，就是最大记录所在的分组，会有 1-8 条记录；</p></li><li><p>其余的组记录数量在 4-8 条之间。</p></li></ul><p>这样做的好处是，除了第 1 组（最小记录所在组）以外，其余组的记录数会&#x3D;&#x3D;尽量平分&#x3D;&#x3D;。</p></li><li><p>在每个组中最后一条记录的头信息中会存储该组一共有多少条记录，作为 <code>n_owned</code> 字段。</p></li><li><p><font color=blue>页目录用来存储每组最后一条记录的地址偏移量</font>，这些地址偏移量会按照<font color=blue>先后顺序存储</font>起来，每组的地址偏移量也被称之为<font color=blue>槽（slot）</font>，每个槽相当于指针指向了不同组的最后一个记录。</p></li></ol><p>举例1：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416213.png" alt="image-20220724131400355"></p><p>举例2：</p><p>现在的page_demo表中正常的记录共有6条，InnoDB会把它们分成两组，第一组中只有一个最小记录，第二组中是剩余的5条记录。如下图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251416778.png" alt="image-20220724131423102"></p><p>从这个图中我们需要注意这么几点：</p><ul><li>现在页目录部分中有两个槽，也就意味着我们的记录被分成了两个组，槽1中的值是112，代表最大记录的地址偏移量（就是从页面的0字节开始数，数112个字节）；槽0中的值是99，代表最小记录的地址偏移量。</li><li>注意最小和最大记录的头信息中的n_owned属性<ul><li>最小记录的n_owned值为1，这就代表着以最小记录结尾的这个分组中只有1条记录，也就是最小记录本身。</li><li>最大记录的n_owned值为5，这就代表着以最大记录结尾的这个分组中只有5条记录，包括最大记录本身还有我们自己插入的4条记录。</li></ul></li></ul><p>用箭头指向的方式替代数字，这样更易于我们理解，修改后如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417332.png" alt="image-20220724131446750"></p><p>再换个角度看一下：（单纯从逻辑上看一下这些记录和页目录的关系）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417844.png" alt="image-20220724131513633"></p><p><font color=green><strong>2. 页目录分组的个数如何确定？</strong></font></p><p>为什么 上面例中 最小记录的n_owned值为1，而最大记录的n_owned值为5呢？</p><p>InnoDB规定：<strong>对于最小记录所在的分组只能有1条记录，最大记录所在的分组拥有的记录条数只能在1<del>8条之间，剩下的分组中记录的条数范围只能在是 4</del>8 条之间</strong>。</p><p>分组是按照下边的步骤进行的：</p><ul><li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li><li>之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个。</li><li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。</li></ul><p><font color=green><strong>3. 页目录结构下如何快速查找记录？</strong></font></p><p>现在向page_demo表中添加更多的数据。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO page_demo </span><br><span class="line">VALUES</span><br><span class="line">(5, 500, &#x27;zhou&#x27;), </span><br><span class="line">(6, 600, &#x27;chen&#x27;), </span><br><span class="line">(7, 700, &#x27;deng&#x27;), </span><br><span class="line">(8, 800, &#x27;yang&#x27;), </span><br><span class="line">(9, 900, &#x27;wang&#x27;), </span><br><span class="line">(10, 1000, &#x27;zhao&#x27;), </span><br><span class="line">(11, 1100, &#x27;qian&#x27;), </span><br><span class="line">(12, 1200, &#x27;feng&#x27;), </span><br><span class="line">(13, 1300, &#x27;tang&#x27;), </span><br><span class="line">(14, 1400, &#x27;ding&#x27;), </span><br><span class="line">(15, 1500, &#x27;jing&#x27;), </span><br><span class="line">(16, 1600, &#x27;quan&#x27;);</span><br></pre></td></tr></table></figure><p>添加了12条记录，现在页里一共有18条记录了（包括最小和最大记录），这些记录被分成了5个组，如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417557.png" alt="image-20220724152747713"></p><p>这里只保留了16条记录的记录头信息中的n_owned和next_record属性，省略了各个记录之间的箭头。</p><p>现在看怎么从这个页目录中查找记录。因为各个槽代表的记录的主键值都是从小到大排序的，所以我们可以使用二分法来进行快速查找。5个槽的编号分别是：0、1、2、3、4，所以初始情况下最低的槽就是low&#x3D;0，最高的槽就是high&#x3D;4。比方说我们想<font color=blue>找主键值为6的记录</font>，过程是这样的：</p><ol><li>计算中间槽的位置：(0+4)&#x2F;2&#x3D;2，所以查看槽2对应记录的主键值为8，又因为8 &gt; 6，所以设置high&#x3D;2，low保持不变。</li><li>重新计算中间槽的位置：(0+2)&#x2F;2&#x3D;1，所以查看槽1对应的主键值为4，又因为4 &lt; 6，所以设置low&#x3D;1，high保持不变。</li><li>因为high - low的值为1，所以确定主键值为6的记录在槽2对应的组中。此刻我们需要找到槽2中主键值最小的那条记录，然后沿着单向链表遍历槽2中的记录。</li></ol><p>但是我们前边又说过，&#x3D;&#x3D;每个槽对应的记录都是该组中主键值最大的记录&#x3D;&#x3D;，这里槽2对应的记录是主键值为8的记录，怎么定位一个组中最小的记录呢？别忘了各个槽都是挨着的，我们可以很轻易的拿到槽1对应的记录（主键值为4），该条记录的下一条记录就是槽2中主键值最小的记录，该记录的主键值为5。所以我们可以从这条主键值为5的记录出发，遍历槽2中的各条记录，直到找到主键值为6的那条记录即可。</p><p>由于一个组中包含的记录条数只能是1~8条，所以遍历一个组中的记录的代价是很小的。</p><p><strong>小结：</strong></p><p>在一个数据页中查找指定主键值的记录的过程分为两步：</p><ol><li>通过二分法确定该记录所在的槽，并找到该槽所在分组中主键值最小的那条记录。</li><li>通过记录的<code>next_record</code>属性遍历该槽所在的组中的各个记录。</li></ol><h3 id="2-3-2-Page-Header（页面头部）"><a href="#2-3-2-Page-Header（页面头部）" class="headerlink" title="2.3.2 Page Header（页面头部）"></a>2.3.2 Page Header（页面头部）</h3><p>为了能得到一个数据页中存储的记录的状态信息，比如本页中已经存储了多少条记录，第一条记录的地址是什么，页目录中存储了多少个槽等等，特意在页中定义了一个叫Page Header的部分，这个部分占用固定的56个字节，专门存储各种状态信息。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417062.png" alt="image-20220724153112168"></p><ul><li><p>PAGE_DIRECTION</p><p>假如新插入的一条记录的主键值比上一条记录的主键值大，我们说这条记录的插入方向是右边，反之则是左边。用来表示最后一条记录插入方向的状态就是PAGE_DIRECTION。</p></li><li><p>PAGE_N_DIRECTION</p><p>假设连续几次插入新记录的方向都是一致的，InnoDB会把沿着同一个方向插入记录的条数记下来，这个条数就用PAGE_N_DIRECTION这个状态表示。当然，如果最后一条记录的插入方向改变了的话，这个状态的值会被清零重新统计。</p></li></ul><h2 id="2-4-从数据页的角度看B-树如何查询"><a href="#2-4-从数据页的角度看B-树如何查询" class="headerlink" title="2.4 从数据页的角度看B+树如何查询"></a>2.4 从数据页的角度看B+树如何查询</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417757.png" alt="image-20220724123214937"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417428.png" alt="image-20220724123449401"></p><h1 id="3-InnoDB行格式（或记录格式）"><a href="#3-InnoDB行格式（或记录格式）" class="headerlink" title="3. InnoDB行格式（或记录格式）"></a>3. InnoDB行格式（或记录格式）</h1><h2 id="3-1-指定行格式的语法"><a href="#3-1-指定行格式的语法" class="headerlink" title="3.1 指定行格式的语法"></a>3.1 指定行格式的语法</h2><p>在创建或修改表的语句中指定行格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称 # 创建</span><br><span class="line">ALTER TABLE 表名 ROW_FORMAT=行格式名称 # 修改</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE record_test_table (</span><br><span class="line">    -&gt;     col1 VARCHAR(8),</span><br><span class="line">    -&gt;     col2 VARCHAR(8) NOT NULL,</span><br><span class="line">    -&gt;     col3 CHAR(8),</span><br><span class="line">    -&gt;     col4 VARCHAR(8)</span><br><span class="line">    -&gt; ) CHARSET=ascii ROW_FORMAT=COMPACT;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure><p>向表中插入两条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO record_test_table(col1, col2, col3, col4) </span><br><span class="line">VALUES</span><br><span class="line">(&#x27;zhangsan&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;songhk&#x27;), </span><br><span class="line">(&#x27;tong&#x27;, &#x27;chen&#x27;, NULL, NULL);</span><br></pre></td></tr></table></figure><h2 id="3-2-COMPACT行格式"><a href="#3-2-COMPACT行格式" class="headerlink" title="3.2 COMPACT行格式"></a>3.2 COMPACT行格式</h2><p>在MySQL 5.1版本中，&#x3D;&#x3D;默认设置为Compact行格式&#x3D;&#x3D;。一条完整的记录其实可以被分为记录的额外信息和记录的真实数据两大部分</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417467.png" alt="image-20220725090341137"></p><h3 id="3-2-1-变长字段长度列表"><a href="#3-2-1-变长字段长度列表" class="headerlink" title="3.2.1 变长字段长度列表"></a>3.2.1 变长字段长度列表</h3><p>MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、TEXT类型，BLOB类型，这些数据类型修饰列称为&#x3D;&#x3D;变长字段&#x3D;&#x3D;，变长字段中存储多少字节的数据不是固定的，所以我们在存储真实数据的时候需要顺便把这些数据占用的字节数也存起来。&#x3D;&#x3D;在Compact行格式中，把所有变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表&#x3D;&#x3D;。</p><p>注意：这里面存储的变长长度和字段&#x3D;&#x3D;顺序是反过来的&#x3D;&#x3D;。比如两个varchar字段在表结构的顺序是a(10)，b(15)。那么在变长字段长度列表中存储的长度顺序就是15，10，是反过来的。</p><p>以record_test_table表中的第一条记录举例：因为record_test_table表的col1、col2、col4列都是VARCHAR(8)类型的，所以这三个列的值的长度都需要保存在记录开头处，注意record_test_table表中的各个列都使用的是ascii字符集（每个字符只需要1个字节来进行编码，如果是UTF-8，则需要3个字节哦~ ~~）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417716.png" alt="image-20220725085822376"></p><p>又因为这些长度值需要按照列的逆序存放，所以最后变长字段长度列表的字节串用十六进制表示的效果就是（各个字节之间实际上没有空格，用空格隔开只是方便理解）：<br>06 04 08 </p><p>把这个字节串组成的变长字段长度列表填入上边的示意图中的效果就是：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417011.png" alt="image-20220725085836023"></p><h3 id="3-2-2-NULL值列表"><a href="#3-2-2-NULL值列表" class="headerlink" title="3.2.2 NULL值列表"></a>3.2.2 NULL值列表</h3><p>Compact行格式会把可以为NULL的列统一管理起来，存在一个标记为NULL值列表中。如果表中没有允许存储 NULL 的列，则 NULL值列表也不存在了。</p><p><strong>为什么定义NULL值列表？</strong></p><p>之所以要存储NULL是因为数据都是需要对齐的，如果&#x3D;&#x3D;没有标注出来NULL值&#x3D;&#x3D;的位置，就有可能在查询数据的时候&#x3D;&#x3D;出现混乱&#x3D;&#x3D;。如果使&#x3D;&#x3D;用一个特定的符号&#x3D;&#x3D;放到相应的数据位表示空置的话，虽然能达到效果，但是这样很&#x3D;&#x3D;浪费空间&#x3D;&#x3D;，所以直接就在行数据得头部开辟出一块空间专门用来记录该行数据哪些是非空数据，哪些是空数据，格式如下：</p><ul><li><p>二进制位的值为1时，代表该列的值为NULL。</p></li><li><p>二进制位的值为0时，代表该列的值不为NULL。</p></li></ul><p>例如：字段 a、b、c，其中a是主键，在某一行中存储的数依次是 a&#x3D;1、b&#x3D;null、c&#x3D;2。那么Compact行格式中的NULL值列表中存储：01。第一个0表示c不为null，第二个1表示b是null。这里之所以没有a是因为数据库会自动跳过主键，因为主键肯定是非NULL且唯一的，在NULL值列表的数据中就会自动跳过主键。</p><p>record_test_table的两条记录的NULL值列表就如下：</p><p>第一条记录：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417444.png" alt="image-20220725090200671"></p><p>第二条记录：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417659.png" alt="image-20220725090210661"></p><h3 id="3-2-3-记录头信息（5字节）"><a href="#3-2-3-记录头信息（5字节）" class="headerlink" title="3.2.3 记录头信息（5字节）"></a>3.2.3 记录头信息（5字节）</h3><p><strong><font color=blue>1. 记录头信息概述</font></strong></p><p>创建表page_demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE page_demo(</span><br><span class="line">    -&gt;     c1 INT,</span><br><span class="line">    -&gt;     c2 INT,</span><br><span class="line">    -&gt;     c3 VARCHAR(10000),</span><br><span class="line">    -&gt;     PRIMARY KEY (c1)</span><br><span class="line">    -&gt; ) CHARSET=ascii ROW_FORMAT=Compact;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure><p>这个表中记录的行格式示意图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417972.png" alt="image-20220724170923339"></p><p>这些记录头信息中各个属性如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417949.png" alt="image-20220724170944226"></p><p>简化后的行格式示意图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251421140.png" alt="image-20220724171000430"></p><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO page_demo </span><br><span class="line">VALUES</span><br><span class="line">(1, 100, &#x27;song&#x27;), </span><br><span class="line">(2, 200, &#x27;tong&#x27;), </span><br><span class="line">(3, 300, &#x27;zhan&#x27;), </span><br><span class="line">(4, 400, &#x27;lisi&#x27;);</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417875.png" alt="image-20220724171028579"></p><p>注：为啥编号是从2开始的，因为默认会有一个最小记录和最大记录</p><p><strong><font color=blue>2. 头信息中各个属性详细分析</font></strong></p><ul><li><p><strong><font color=green>delete_mask</font></strong></p><p>这个属性标记着当前记录是否被删除，占用1个二进制位。</p><ul><li><p>值为0：代表记录并没有被删除</p></li><li><p>值为1：代表记录被删除掉了</p></li></ul><p><font color=red><strong>被删除的记录为什么还在页中存储呢？</strong></font></p><p>你以为它删除了，可它还在真实的磁盘上。这些被删除的记录之所以不立即从磁盘上移除，是因为移除它们之后其他的记录在磁盘上需要&#x3D;&#x3D;重新排列，导致性能消耗&#x3D;&#x3D;。所以只是打一个删除标记而已，所有被删除掉的记录都会组成一个所谓的&#x3D;&#x3D;垃圾链表&#x3D;&#x3D;，在这个链表中的记录占用的空间称之为&#x3D;&#x3D;可重用空间&#x3D;&#x3D;，之后如果有新记录插入到表中的话，可能把这些被删除的记录占用的存储空间覆盖掉</p></li><li><p><strong><font color=green>min_rec_mask</font></strong></p><p>B+树的每层非叶子节点中的最小记录都会添加该标记，min_rec_mask值为1。</p><p>我们自己插入的四条记录的min_rec_mask值都是0，意味着它们都不是B+树的非叶子节点中的最小记录。</p></li><li><p><strong><font color=green>record_type</font></strong></p><p>这个属性表示当前记录的类型，一共有4种类型的记录：</p><ul><li><p>0：表示普通记录</p></li><li><p>1：表示B+树非叶节点记录</p></li><li><p>2：表示最小记录</p></li><li><p>3：表示最大记录</p></li></ul><p>从图中我们也可以看出来，我们自己插入的记录就是普通记录，它们的record_type值都是0，而最小记录和最大记录的record_type值分别为2和3。至于record_type为1的情况，我们在索引的数据结构章节讲过。</p></li><li><p><strong><font color=green>heap_no</font></strong></p><p>这个属性表示当前记录在本页中的位置。</p><p>从图中可以看出来，我们插入的4条记录在本页中的位置分别是：2、3、4、5。</p><p><font color=red>怎么不见heap_no值为0和1的记录呢？</font></p><p>MySQL会自动给每个页里加了两个记录，由于这两个记录并不是我们自己插入的，所以有时候也称为&#x3D;&#x3D;伪记录&#x3D;&#x3D;或者&#x3D;&#x3D;虚拟记录&#x3D;&#x3D;。这两个伪记录一个代表&#x3D;&#x3D;最小记录&#x3D;&#x3D;，一个代表&#x3D;&#x3D;最大记录&#x3D;&#x3D;。最小记录和最大记录的heap_no值分别是0和1，也就是说它们的位置最靠前。</p></li><li><p><strong><font color=green>n_owned</font></strong></p><p>页目录中每个组中最后一条记录的头信息中会存储该组一共有多少条记录，作为 n_owned 字段。 详情见page directory。</p></li><li><p><strong><font color=green>next_record</font></strong></p><p>记录头信息里该属性非常重要，它表示从当前记录的真实数据到下一条记录的真实数据的&#x3D;&#x3D;地址偏移量&#x3D;&#x3D;。</p><p>比如：第一条记录的next_record值为32，意味着从第一条记录的真实数据的地址处向后找32个字节便是下一条记录的真实数据。</p><p>注意，<strong>下一条记录指得并不是按照我们插入顺序的下一条记录，而是按照主键值由小到大的顺序的下一条记录</strong>。而且规定Infimum记录（也就是最小记录）的下一条记录就是本页中主键值最小的用户记录，而本页中主键值最大的用户记录的下一条记录就是 Supremum记录（也就是最大记录）。下图用箭头代替偏移量表示next_record。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251417284.png" alt="image-20220724173342146"></p></li></ul><p><strong><font color=blue>3. 演示删除和添加操作</font></strong></p><p>&#x3D;&#x3D;删除操作：&#x3D;&#x3D;</p><p>从表中删除掉一条记录，这个链表也是会跟着变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELETE FROM page_demo WHERE c1 = 2;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>删掉第2条记录后的示意图就是：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418963.png" alt="image-20220724173857326"></p><p>从图中可以看出来，删除第2条记录前后主要发生了这些变化：</p><ul><li>第2条记录并没有从存储空间中移除，而是把该条记录的<code>delete_mask</code>值设置为1。</li><li>第2条记录的<code>next_record</code>值变为了0，意味着该记录没有下一条记录了。</li><li>第1条记录的<code>next_record</code>指向了第3条记录。</li><li>最大记录的<code>n_owned</code>值从 5 变成了 4 。</li></ul><p><font color=red>所以，不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个节点是按照主键值由小到大的顺序连接起来的</font>。</p><p>&#x3D;&#x3D;添加操作：&#x3D;&#x3D;</p><p>主键值为2的记录被我们删掉了，但是存储空间却没有回收，如果我们再次把这条记录插入到表中，会发生什么事呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO page_demo VALUES(2, 200, &#x27;tong&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>我们看一下记录的存储情况：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418651.png" alt="image-20220724173938500"></p><p><strong><font color=blue>直接复用了原来被删除记录的存储空间</font>。</strong></p><p><strong>说明：</strong>当数据页中存在多条被删除掉的记录时，这些记录的<code>next_record</code>属性将会把这些被删除掉的记录组成一个垃圾链表，以备之后重用这部分存储空间。</p><h3 id="3-2-4-记录真实的数据"><a href="#3-2-4-记录真实的数据" class="headerlink" title="3.2.4 记录真实的数据"></a>3.2.4 记录真实的数据</h3><p>记录的真实数据除了我们自己定义的列的数据以外，还会有三个隐藏列：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418835.png" alt="image-20220725090426277"></p><p>实际上这几个列的真正名称其实是：DB_ROW_ID、DB_TRX_ID、DB_ROLL_PTR。</p><ul><li>&#x3D;&#x3D;一个表没有手动定义主键，则会选取一个Unique键作为主键，如果连Unique键都没有定义的话，则会为表默认添加一个名为row_id的隐藏列作为主键&#x3D;&#x3D;。所以row_id是在没有自定义主键以及Unique键的情况下才会存在的。</li><li>事务ID和回滚指针在后面的《第14章_MySQL事务日志》章节中讲解。</li></ul><p>举例：分析Compact行记录的内部结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytest(</span><br><span class="line">    col1 VARCHAR(10),</span><br><span class="line">    col2 VARCHAR(10),</span><br><span class="line">    col3 CHAR(10),</span><br><span class="line">    col4 VARCHAR(10)</span><br><span class="line">)ENGINE=INNODB CHARSET=LATIN1 ROW_FORMAT=COMPACT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO mytest</span><br><span class="line">VALUES(&#x27;a&#x27;,&#x27;bb&#x27;,&#x27;bb&#x27;,&#x27;ccc&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO mytest</span><br><span class="line">VALUES(&#x27;d&#x27;,&#x27;ee&#x27;,&#x27;ee&#x27;,&#x27;fff&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO mytest</span><br><span class="line">VALUES(&#x27;d&#x27;,NULL,NULL,&#x27;fff&#x27;);</span><br></pre></td></tr></table></figure><p>在Windows操作系统下，可以选择通过程序UltraEdit打开表空间文件mytest.ibd这个二进制文件。内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">0000c070 73 75 70 72 65 6d 75 6d 03 02 01 00 00 00 10 00|supremum........|</span><br><span class="line">0000c080 2c 00 00 00 2b 68 00 00 00 00 00 06 05 80 00 00|,...+h..........|</span><br><span class="line">0000c090 00 32 01 10 61 62 62 62 62 20 20 20 20 20 20 20|.2..abbbb|</span><br><span class="line">0000c0a0 20 63 63 63 03 02 01 00 00 00 18 00 2b 00 00 00|ccc........+...|</span><br><span class="line">0000c0b0 2b 68 01 00 00 00 00 06 06 80 00 00 00 32 01 10|+h...........2..|</span><br><span class="line">0000c0c0 64 65 65 65 65 20 20 20 20 20 20 20 20 66 66 66|deeeefff|</span><br><span class="line">0000c0d0 03 01 06 00 00 20 ff 98 00 00 00 2b 68 02 00 00|..........+h...|</span><br><span class="line">0000c0e0 00 00 06 07 80 00 00 00 32 01 10 64 66 66 66 00|........2..dfff.|</span><br><span class="line">------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418739.png"></p><p>该行记录从0000c078开始，参考下面的，相信大家会有更好的理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------</span><br><span class="line">03 02 01                     /*变长字段长度列表，逆序*/</span><br><span class="line">00                              /*NULL标志位，第一行没有NULL值*/</span><br><span class="line">00 00 10 00 2c            /*Record Header，固定5字节长度*/</span><br><span class="line">00 00 00 2b 68 00       /*RowID InnoDB自动创建，6字节*/</span><br><span class="line">00 00 00 00 06 05       /*TransactionID*/</span><br><span class="line">80 00 00 00 32 01 10   /*Roll Pointer*/</span><br><span class="line">61                               /*列1数据&#x27;a&#x27;*/</span><br><span class="line">62 62                          /*列2数据&#x27;bb&#x27;*/</span><br><span class="line">62 62 20 20 20 20 20 20 20 20/*列3数据&#x27;bb&#x27;*/</span><br><span class="line">63 63 63                     /*列4数据&#x27;ccc&#x27;*/</span><br><span class="line">---------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>注意1：InnoDB每行有隐藏列TransactionID和Roll Pointer。:<br>注意2：固定长度CHAR字段在未能完全占用其长度空间时，会用0x20 （也就是空格）来进行填充。</p><p>接着再来分析下Record Header的最后两个字节，这两个字节代表next_recorder，0x2c代表下一个记录的偏移量，即当前记录的位置加上偏移量0x2c就是下条记录的起始位置。</p><p>第二行将不做整理，除了RowID不同外，它和第一行大同小异，现在来分析有NULL值的第三行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------</span><br><span class="line">03 01                               /*变长字段长度列表，逆序*/</span><br><span class="line">06                                   /*NULL标志位，第三行有NULL值*/</span><br><span class="line">00 00 20 ff 98                  /*Record Header*/</span><br><span class="line">00 00 00 2b 68 02           /*RowID*/</span><br><span class="line">00 00 00 00 06 07           /*TransactionID*/</span><br><span class="line">80 00 00 00 32 01 10       /*Roll Pointer*/</span><br><span class="line">64                                   /*列1数据&#x27;d&#x27;*/</span><br><span class="line">66 66 66                         /*列4数据&#x27;fff&#x27;*/</span><br><span class="line">---------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>第三行有NULL值，因此NULL标志位不再是00而是06，转换成二进制为00000110，为1的值代表第2列和第3列的数据为NULL。在其后存储列数据的部分，用户会发现没有存储NULL列，而只存储了第1列和第4列非NULL的值。</p><p>因此这个例子很好地说明了：&#x3D;&#x3D;不管是CHAR类型还是VARCHAR类型，在compact格式下NULL值都不占用任何存储空间&#x3D;&#x3D;</p><h2 id="3-3-Dynamic和Compressed行格式"><a href="#3-3-Dynamic和Compressed行格式" class="headerlink" title="3.3 Dynamic和Compressed行格式"></a>3.3 Dynamic和Compressed行格式</h2><h3 id="3-3-1-行溢出"><a href="#3-3-1-行溢出" class="headerlink" title="3.3.1 行溢出"></a>3.3.1 行溢出</h3><p><strong><font color=red>InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页面之外。</font></strong></p><p>很多DBA喜欢MySQL数据库提供的VARCHAR(M)类型，认为可以存放65535字节。这是真的吗？如果我们使用 ascii字符集的话，一个字符就代表一个字节，我们看看VARCHAR(65535)是否可用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE  TABLE  varchar_size_demo(</span><br><span class="line"> c  VARCHAR(65535)</span><br><span class="line"> )  CHARSET=ascii  ROW_FORMAT=Compact;</span><br><span class="line"># 结果如下：</span><br><span class="line">ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have  to  change  some  columns  to  TEXT or  BLOBs</span><br></pre></td></tr></table></figure><p>报错信息表达的意思是：MySQL对一条记录占用的最大存储空间是有限制的，&#x3D;&#x3D;除BLOB或者TEXT类型的列之外， 其他所有的列&#x3D;&#x3D;（不包括隐藏列和记录头信息）&#x3D;&#x3D;占用的字节长度加起来不能超过65535个字节&#x3D;&#x3D;</p><p>这个65535个字节除了列本身的数据之外，还包括一些其他的数据，以Compact行格式为例，比如说我们为了存储一个VARCHAR(M)类型的列，除了真实数据占有空间以外，还需要记录的额外信息。</p><p>如果该VARCHAR类型的列没有NOT NULL属性，那&#x3D;&#x3D;最多只能存储65532个字节的数据&#x3D;&#x3D;，因为变长字段的长度占用 2个字节，NULL值标识需要占用1个字节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE  TABLE  varchar_size_demo(</span><br><span class="line">    c  VARCHAR(65532)</span><br><span class="line">)  CHARSET=ascii  ROW_FORMAT=Compact; # 可以创建成功</span><br></pre></td></tr></table></figure><p>如果有not null属性，那么就不需要NULL值标识，也就可以多存储一个字节，即65533个字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE  TABLE  varchar_size_demo( </span><br><span class="line">  c  VARCHAR(65533)  not  null</span><br><span class="line">)  CHARSET=ascii  ROW_FORMAT=Compact; # 可以创建成功</span><br></pre></td></tr></table></figure><p>通过上面的案例，我们可以知道一个页的大小一般是16KB，也就是16384字节，而一个VARCHAR(M)类型的列就最多可以存储65533个字节，这样就可能出现一个页存放不了一条记录，这种现象称为&#x3D;&#x3D;行溢出&#x3D;&#x3D;</p><p>在Compact和Reduntant行格式中，对于占用存储空间非常大的列，在记录的真实数据处只会存储该列的一部分数据，把剩余的数据分散存储在几个其他的页中进行&#x3D;&#x3D;分页存储&#x3D;&#x3D;，然后记录的真实数据处用20个字节存储指向这些页的地址（当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数），从而可以找到剩余数据所在的页。</p><p>这称为页的扩展，举例如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418556.png" alt="image-20220725091306108"></p><h3 id="3-3-2-Dynamic和Compressed行格式"><a href="#3-3-2-Dynamic和Compressed行格式" class="headerlink" title="3.3.2 Dynamic和Compressed行格式"></a>3.3.2 Dynamic和Compressed行格式</h3><p>在MySQL 8.0中，&#x3D;&#x3D;默认行格式就是Dynamic&#x3D;&#x3D;，Dynamic、Compressed行格式和Compact行格式挺像，只不过在处理行溢出数据时有分歧：</p><ul><li>Compressed和Dynamic两种记录格式对于存放在BLOB中的数据采用了完全的行溢出的方式。如图，在数据页中只存放20个字节的指针（溢出页的地址），实际的数据都存放在Off Page（溢出页）中。</li><li>Compact和Redundant两种格式会在记录的真实数据处存储一部分数据（存放768个前缀字节）。</li></ul><p>Compressed行记录格式的另一个功能就是，存储在其中的行数据会以zlib的算法进行压缩，因此对于BLOB、TEXT、VARCHAR这类大长度类型的数据能够进行非常有效的存储。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418052.png" alt="image-20220725091327355"></p><h2 id="3-4-Redundant行格式"><a href="#3-4-Redundant行格式" class="headerlink" title="3.4 Redundant行格式"></a>3.4 Redundant行格式</h2><p>Redundant是MySQL 5.0版本之前InnoDB的行记录存储方式，MySQL 5.0支持Redundant是为了兼容之前版本的页格式。</p><p>现在我们把表record_test_table的行格式修改为Redundant：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE record_test_table ROW_FORMAT=Redundant;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418548.png" alt="image-20220725091402259"></p><p>从上图可以看到，不同于Compact行记录格式，Redundant行格式的首部是一个字段长度偏移列表，同样是按照列的顺序&#x3D;&#x3D;逆序放置&#x3D;&#x3D;的。</p><p>下边我们从各个方面看一下Redundant行格式有什么不同的地方。</p><h3 id="3-4-1-字段长度偏移列表"><a href="#3-4-1-字段长度偏移列表" class="headerlink" title="3.4.1 字段长度偏移列表"></a>3.4.1 字段长度偏移列表</h3><p>注意Compact行格式的开头是变长字段长度列表，而Redundant行格式的开头是字段长度偏移列表，与变长字段长度列表有两处不同：</p><ul><li>少了“变长”两个字：Redundant行格式会把该条记录中所有列（包括隐藏列）的长度信息都按照逆序存储到&#x3D;&#x3D;字段长度偏移列表&#x3D;&#x3D;</li><li>多了“偏移”两个字：这意味着计算列值长度的方式不像Compact行格式那么直观，它是采用两个相邻数值的差值来计算&#x3D;&#x3D;各个列值&#x3D;&#x3D;的长度</li></ul><p>举例：比如第一条记录的字段长度偏移列表就是：<br>2B 25 1F 1B 13 0C 06</p><p>因为它是逆序排放的，所以按照列的顺序排列就是：<br>06 0C 13 17 1A 24 25</p><p>按照两个相邻数值的差值来计算各个列值的长度的意思就是：</p><ul><li>第一列(row_id)的长度就是 0x06个字节，也就是6个字节。</li><li>第二列(transaction_id)的长度就是 (0x0C - 0x06)个字节，也就是6个字节。</li><li>第三列(roll_pointer)的长度就是 (0x13 - 0x0C)个字节，也就是7个字节。</li><li>第四列(col1)的长度就是 (0x1B - 0x13)个字节，也就是8个字节。</li><li>第五列(col2)的长度就是 (0x1F - 0x1B)个字节，也就是4个字节。</li><li>第六列(col3)的长度就是 (0x25 - 0x1F)个字节，也就是6个字节。</li><li>第七列(col4)的长度就是 (0x2B - 0x25)个字节，也就是6个字节。</li></ul><h3 id="3-4-2-记录头信息（record-header）"><a href="#3-4-2-记录头信息（record-header）" class="headerlink" title="3.4.2 记录头信息（record header）"></a>3.4.2 记录头信息（record header）</h3><p>不同于Compact行格式，Redundant行格式中的记录头信息固定占用6个字节（48位），每位的含义见下表</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418853.jpeg"></p><p>与Compact行格式的记录头信息对比来看，有两处不同：（下面的解释，了解即可）</p><ul><li>Redundant行格式多了<code>n_field</code>和<code>1byte_offs_flag</code>这两个属性。</li><li>Redundant行格式没有record_type这个属性。</li></ul><p>其中，n_fields：代表一行中列的数量，占用10位，这也很好地解释了为什么MySQL一个行支持最多的列为1023。另一个值为1byte_offs_flags，该值定义了偏移列表占用1个字节还是2个字节。当它的值为1时，表明使用1个字节存储。当它的值为0时，表明使用2个字节存储。</p><p><strong><font color=blue>1byte_offs_flag的值是怎么选择的 ?</font></strong></p><p>我们前边说过每个列对应的偏移量可以占用1个字节或者2个字节来存储，那到底什么时候用1个字节，什么时候用2个字节呢？其实是根据该条Redundant行格式记录的真实数据占用的总大小来判断的：</p><ul><li><p>当记录的真实数据占用的字节数值不大于127（十六进制0x7F，二进制01111111）时，每个列对应的偏移量占用1个字节。</p></li><li><p>当记录的真实数据占用的字节数大于127，但不大于32767（十六进制0x7FFF，二进制0111111111111111）时，每个列对应的偏移量占用2个字节。</p></li><li><p>有没有记录的真实数据大于32767的情况呢？有，不过此时的记录已经存放到了溢出页中，在本页中只保留前768个字节和20个字节的溢出页面地址。因为字段长度偏移列表处只需要记录每个列在本页面中的偏移就好了，所以每个列使用2个字节来存储偏移量就够了。</p><p>大家可以看出来，Redundant行格式还是比较简单粗暴的，直接使用整个记录的真实数据长度来决定使用1个字节还是2个字节存储列对应的偏移量。只要整条记录的真实数据占用的存储空间大小大于127，即使第一个列的值占用存储空间小于127，那对不起，也需要使用2个字节来表示该列对应的偏移量。简单粗暴，就是这么简单粗暴（所以这种行格式有些过时了）。</p><p>为了在解析记录时知道每个列的偏移量是使用1个字节还是2个字节表示的，Redundant行格式特意在<code>记录头信息</code>里放置了一个称之为1byte_offs_flag的属性：</p></li></ul><p><strong>Redundant行格式中NULL值的处理</strong></p><p>因为Redundant行格式并没有NULL值列表，所以Redundant行格式在字段长度偏移列表中的各个列对应的偏移量处做了一些特殊处理 —— 将列对应的偏移量值的第一个比特位作为是否为NULL的依据，该比特位也可以被称之为NULL比特位。也就是说在解析一条记录的某个列时，首先看一下该列对应的偏移量的NULL比特位是不是为1。如果为1，那么该列的值就是NULL，否则不是NULL。</p><p>这也就解释了上边介绍为什么只要记录的真实数据大于127（十六进制0x7F，二进制01111111）时，就采用2个字节来表示一个列对应的偏移量，主要是第一个比特位是所谓的NULL比特位，用来标记该列的值是否为NULL。</p><p>但是还有一点要注意，对于值为NULL的列来说，该列的类型是否为定长类型决定了NULL值的实际存储方式，我们接下来分析一下record_test_table表的第二条记录，它对应的字段长度偏移列表如下：<br> A4 A4 1A 17 13 0C 06<br>按照列的顺序排放就是：<br>06 0C 13 17 1A A4 A4<br>我们分情况看一下：</p><ul><li>如果存储NULL值的字段是定长类型的，比方说<code>CHAR(M)</code>数据类型的，则NULL值也将占用记录的真实数据部分，并把该字段对应的数据使用0x00字节填充。<br>如图第二条记录的c3列的值是NULL，而c3列的类型是<code>CHAR(10)</code>，占用记录的真实数据部分10字节，所以我们看到在Redundant行格式中使用0x00000000000000000000来表示NULL值。<br>另外，c3列对应的偏移量为0xA4，它对应的二进制实际是：10100100，可以看到最高位为1，意味着该列的值是NULL。将最高位去掉后的值变成了0100100，对应的十进制值为36，而c2列对应的偏移量为0x1A，也就是十进制的26。36 - 26 &#x3D; 10，也就是说最终c3列占用的存储空间为10个字节。</li><li>如果该存储NULL值的字段是变长数据类型的，则不在记录的真实数据处占用任何存储空间。<br>比如record_test_table表的c4列是VARCHAR(10)类型的，VARCHAR(10)是一个变长数据类型，c4列对应的偏移量为0xA4，与c3列对应的偏移量相同，这也就意味着它的值也为NULL，将0xA4的最高位去掉后对应的十进制值也是36，36 - 36 &#x3D; 0，也就意味着c4列本身不占用任何记录的实际数据处的空间。</li></ul><p>除了以上的几点之外，Redundant行格式和Compact行格式还是大致相同的</p><p>&#x3D;&#x3D;总结：Redundant行格式和Compact行格式的差异&#x3D;&#x3D;</p><ol><li><p>Redundant 没有了NULL值列表</p></li><li><p>Redundant 行格式的记录头信息</p><ul><li><p>多了<code>n_field</code>和<code>1byte_offs_flag</code>这两个属性</p></li><li><p>没有record_type这个属性。</p></li></ul></li></ol><h1 id="4-区、段与碎片区"><a href="#4-区、段与碎片区" class="headerlink" title="4. 区、段与碎片区"></a>4. 区、段与碎片区</h1><h2 id="4-1-为什么要有区？"><a href="#4-1-为什么要有区？" class="headerlink" title="4.1 为什么要有区？"></a>4.1 为什么要有区？</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418020.png"></p><h2 id="4-2-为什么要有段？"><a href="#4-2-为什么要有段？" class="headerlink" title="4.2 为什么要有段？"></a>4.2 为什么要有段？</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251420405.png" alt="image-20220725123630473"></p><h2 id="4-3-为什么要有碎片区？"><a href="#4-3-为什么要有碎片区？" class="headerlink" title="4.3 为什么要有碎片区？"></a>4.3 为什么要有碎片区？</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418563.png"></p><h2 id="4-4-区的分类"><a href="#4-4-区的分类" class="headerlink" title="4.4 区的分类"></a>4.4 区的分类</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418173.png"></p><h1 id="5-表空间"><a href="#5-表空间" class="headerlink" title="5. 表空间"></a>5. 表空间</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418019.png" alt="image-20220725125810159"></p><h2 id="5-1-独立表空间"><a href="#5-1-独立表空间" class="headerlink" title="5.1 独立表空间"></a>5.1 独立表空间</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418236.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251420539.png" alt="image-20220725130517704"></p><p>你能看到inndb_file_per_table&#x3D;ON，这意味着每张表都会单独保存一个<code>.ibd</code>文件</p><h2 id="5-2-系统表空间"><a href="#5-2-系统表空间" class="headerlink" title="5.2 系统表空间"></a>5.2 系统表空间</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418619.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418963.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418702.png" alt="image-20220725132440712"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418483.png" alt="image-20220725132656365"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251418548.png" alt="image-20220725132301490"></p><h1 id="附录：数据页加载的三种方式"><a href="#附录：数据页加载的三种方式" class="headerlink" title="附录：数据页加载的三种方式"></a>附录：数据页加载的三种方式</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251419043.png" alt="image-20220725122714509"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251419972.png" alt="image-20220725122846616"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251421187.png" alt="image-20220725122942422"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207251419621.png" alt="image-20220725123250579"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、性能分析工具的使用</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC07%E7%AB%A0_%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC07%E7%AB%A0_%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>在数据库调优中，我们的目标就是<code>响应时间更快，吞吐量更大</code>。利用宏观的监控工具和微观的日志分析可以帮我们快速找到调优的思路和方式</p><h1 id="1-数据库服务器的优化步骤"><a href="#1-数据库服务器的优化步骤" class="headerlink" title="1. 数据库服务器的优化步骤"></a>1. 数据库服务器的优化步骤</h1><p>当我们遇到数据库调优问题的时候，该如何思考呢？这里把思考的流程整理成下面这张图。</p><p>整个流程划分成了<code> 观察（Show status）</code> 和 <code>行动（Action）</code> 两个部分。字母 S 的部分代表观察（会使用相应的分析工具），字母 A 代表的部分是行动（对应分析可以采取的行动）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030458.png" alt="image-20220811114111312"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030400.png"><br><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030169.png" alt="image-20220811114145753"></p><p>可以看到数据库调优的步骤中越往金字塔尖走，其成本越高，效果越差，因此我们在数据库调优的过程中，要重点把握金字塔底部的 &#x3D;&#x3D;sql 及索引调优，数据库表结构调优，系统配置参数调优&#x3D;&#x3D;等软件层面的调优</p><h1 id="2-查看系统性能参数"><a href="#2-查看系统性能参数" class="headerlink" title="2. 查看系统性能参数"></a>2. 查看系统性能参数</h1><p>可以使用 <code>SHOW STATUS</code> 语句查询一些数据库服务器的&#x3D;&#x3D;性能参数和使用频率&#x3D;&#x3D;。</p><p>其语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">GLOBAL</span>][SESSION] STATUES <span class="keyword">LIKE</span> <span class="string">&#x27;参数&#x27;</span>;</span><br></pre></td></tr></table></figure><p>一些常用的性能参数如下：</p><p>•<code>Connections</code>：连接MySQL服务器的次数。<br>•<code>Uptime</code>：MySQL服务器的上线时间。<br>•<code>Slow_queries</code>：慢查询的次数。<br>•<code>Innodb_rows_read</code>：Select查询返回的行数<br>•<code>Innodb_rows_inserted</code>：执行INSERT操作插入的行数<br>•<code>Innodb_rows_updated</code>：执行UPDATE操作更新的行数<br>•<code>Innodb_rows_deleted</code>：执行DELETE操作删除的行数<br>•<code>Com_select</code>：查询操作的次数。<br>•<code>Com_insert</code>：插入操作的次数。对于批量插入的 INSERT 操作，只累加一次。<br>•<code>Com_update</code>：更新操作的次数。<br>•<code>Com_delete</code>：删除操作的次数。</p><p>举例：</p><ul><li>若查询MySQL服务器的连接次数，则可以执行如下语句：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW STATUS LIKE &#x27;Connections&#x27;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Connections   | 34    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>若查询服务器工作时间，则可以执行如下语句：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Uptime&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Uptime        <span class="operator">|</span> <span class="number">332933</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>若查询MySQL服务器的慢查询次数，则可以执行如下语句：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Slow_queries&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Slow_queries  <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>注：慢查询次数参数可以结合慢查询日志找出慢查询语句，然后针对慢查询语句进行 <code>表结构优化</code> 或者<code>查询语句优化</code></p><ul><li>查看存储引擎增删改查的行数，则可以执行如下语句：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_rows_%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name        <span class="operator">|</span> <span class="keyword">Value</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_deleted  <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_inserted <span class="operator">|</span> <span class="number">1000902</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_read     <span class="operator">|</span> <span class="number">37011100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_updated  <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="3-统计-SQL-的查询成本：last-query-cost"><a href="#3-统计-SQL-的查询成本：last-query-cost" class="headerlink" title="3. 统计 SQL 的查询成本：last_query_cost"></a>3. 统计 SQL 的查询成本：last_query_cost</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030464.png" alt="image-20220811122857202"></p><p>我们依然使用student_info表为例（具体库表创建以及生成数据语句请参考上一篇章）</p><p>①如果我们想要查询 id&#x3D;900001 的记录，我们可以直接在聚簇索引上进行查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM student_info WHERE id = 900001;</span><br><span class="line">+--------+------------+--------+-----------+----------+---------------------+</span><br><span class="line">| id     | student_id | name   | course_id | class_id | create_time         |</span><br><span class="line">+--------+------------+--------+-----------+----------+---------------------+</span><br><span class="line">| 900001 |     154633 | SYnwsA |     10019 |    10134 | 2022-08-08 22:33:02 |</span><br><span class="line">+--------+------------+--------+-----------+----------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>然后再看下查询优化器的成本，实际上我们只需要检索一个页即可。<code>Value</code>表示 I&#x2F;O 加载的数据页的页数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW STATUS LIKE &#x27;last_query_cost&#x27;;</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| Variable_name   | Value    |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| Last_query_cost | 1.000000 |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>②我们扩大下查询范围，student_id&gt; 199900的学生记录呢？运行时间 0.01s，这时我们大概需要进行 232个页的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student_info <span class="keyword">WHERE</span> student_id <span class="operator">&gt;</span> <span class="number">199900</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+--------+-----------+----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> student_id <span class="operator">|</span> name   <span class="operator">|</span> course_id <span class="operator">|</span> class_id <span class="operator">|</span> create_time         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+--------+-----------+----------+---------------------+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>...</span><br><span class="line"><span class="operator">|</span> <span class="number">523982</span> <span class="operator">|</span>     <span class="number">200000</span> <span class="operator">|</span> vcaUvw <span class="operator">|</span>     <span class="number">10010</span> <span class="operator">|</span>    <span class="number">10173</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-08</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">32</span>:<span class="number">31</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+--------+-----------+----------+---------------------+</span></span><br><span class="line"><span class="number">516</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;last_query_cost&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> Last_query_cost <span class="operator">|</span> <span class="number">232.459000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>③我们再次扩大范围，假若我们想要查询 student_id &gt; 199000的学生记录呢？运行时间 0.02s，这时我们大概需要进行 2279个页的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student_info <span class="keyword">WHERE</span> student_id <span class="operator">&gt;</span> <span class="number">199000</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>...</span><br><span class="line"><span class="number">5065</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;last_query_cost&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> Last_query_cost <span class="operator">|</span> <span class="number">2279.509000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>不知道大家有没有发现，上面的查询页的数量是刚才的 10倍，但是查询的效率并没有明显的变化，就是因为采用了顺序读取的方式将页面一次性加载到缓冲池中，然后再进行查找。虽然页数量（<code>last_query_cost</code>）增加了不少，但是通过缓冲池的机制，并没有增加多少查询时间。</p><p><strong>使用场景：</strong>查询 <code>last_query_cost</code> 对于比较开销是非常有用的，特别是我们有好几种查询方式可选的时候</p><blockquote><p>🎈 SQL查询是一个动态的过程，从页加载的角度，我们可以得到以下两点结论：</p><ol><li><strong>位置决定效率</strong>：如果页就在数据库<code>缓冲池</code>中，那么效率是最高的，否则还需要从<code>内存</code>或者<code>磁盘</code>中进行读取，当然针对单个页的读取来说，如果页存在于内存中，会比在磁盘中读取效率高很多。即 &#x3D;&#x3D;数据库缓冲池&gt;内存&gt;磁盘&#x3D;&#x3D;</li><li><strong>批量决定效率</strong>：如果我们从磁盘中单一页进行随机读，那么效率是很低的（差不多10ms），而采用顺序读取的方式，批量对页进行读取，平均一页的读取效率就会提升很多，甚至要快于单个页面在内存中的随机读取。即&#x3D;&#x3D;顺序读取&gt;大于随机读取&#x3D;&#x3D;</li></ol><p>所以说，遇到 I&#x2F;O 并不用担心，方法找对了，效率还是很高的。我们首先要考虑数据存放的位置，如果是经常使用的数据就要尽量放到缓冲池中，其次我们可以充分利用磁盘的吞吐能力，一次性批量读取数据，这样单个页的读取效率也就得到了提升。</p><p>注：缓冲池和查询缓存并不是一个东西</p></blockquote><h1 id="4-定位执行慢的-SQL：慢查询日志"><a href="#4-定位执行慢的-SQL：慢查询日志" class="headerlink" title="4. 定位执行慢的 SQL：慢查询日志"></a>4. 定位执行慢的 SQL：慢查询日志</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030839.png" alt="image-20220811155538530"></p><h2 id="4-1-开启慢查询日志"><a href="#4-1-开启慢查询日志" class="headerlink" title="4.1 开启慢查询日志"></a>4.1 开启慢查询日志</h2><p><strong><font color=blue>1. 开启 slow_query_log</font></strong></p><p>查看慢查询日志是否开启，以及日志的位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name       <span class="operator">|</span> <span class="keyword">Value</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log      <span class="operator">|</span> OFF                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>修改慢查询日志状态为开启，注意这里要加 <code>global</code>，因为它是全局系统变量，否则会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log=&#x27;ON&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>再查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name       <span class="operator">|</span> <span class="keyword">Value</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log      <span class="operator">|</span> <span class="keyword">ON</span>                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong><font color=blue>2. 修改long_query_time阈值</font></strong></p><p>接下来我们来看下慢查询的时间阈值设置，使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%long_query_time%&#x27;;</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这里如果我们想把时间缩短，比如设置成1秒，可以这样设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 测试发现：设置global的方式对当前session的long_query_time失效。对新连接的客户端有效，所以可以一并执行下列语句</span><br><span class="line">mysql&gt; set global long_query_time = 1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set long_query_time = 1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>再查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">1.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030579.png" alt="image-20220811165316520"></p><h2 id="4-2-案例演示"><a href="#4-2-案例演示" class="headerlink" title="4.2 案例演示"></a>4.2 案例演示</h2><p><strong><font color=blue>步骤一、建表</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">    `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `stuno` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `age` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `classId` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤二、 设置参数 log_bin_trust_function_creators</font></strong></p><p>创建函数，假如报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This function has none of DETERMINISTIC......</span><br></pre></td></tr></table></figure><p>命令开启：允许创建函数设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span>;   # 不加<span class="keyword">global</span>只是当前窗口有效</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤三、创建函数</font></strong></p><p>随机产生字符串：(同上一章)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string(n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) #该函数会返回一个字符串</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span></span><br><span class="line"><span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">   <span class="keyword">SET</span> return_str <span class="operator">=</span>CONCAT(return_str,<span class="built_in">SUBSTRING</span>(chars_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line">   <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> WHILE;</span><br><span class="line">  <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line">#测试</span><br><span class="line"><span class="keyword">SELECT</span> rand_string(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>产生随机数值：（同上一章）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_num (from_num <span class="type">INT</span> ,to_num <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(from_num <span class="operator">+</span>RAND()<span class="operator">*</span>(to_num <span class="operator">-</span> from_num<span class="operator">+</span><span class="number">1</span>))  ;</span><br><span class="line"><span class="keyword">RETURN</span> i; </span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line">#测试：</span><br><span class="line"><span class="keyword">SELECT</span> rand_num(<span class="number">10</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤四、创建存储过程</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_stu1(  <span class="keyword">START</span> <span class="type">INT</span> , max_num <span class="type">INT</span> )</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   #设置手动提交事务</span><br><span class="line">REPEAT  #循环</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;  #赋值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (stuno, NAME ,age ,classId ) <span class="keyword">VALUES</span></span><br><span class="line">((<span class="keyword">START</span><span class="operator">+</span>i),rand_string(<span class="number">6</span>),rand_num(<span class="number">10</span>,<span class="number">100</span>),rand_num(<span class="number">10</span>,<span class="number">1000</span>)); </span><br><span class="line">UNTIL i <span class="operator">=</span> max_num </span><br><span class="line"><span class="keyword">END</span> REPEAT; </span><br><span class="line"><span class="keyword">COMMIT</span>;  #提交事务</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤五、调用存储过程</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#调用刚刚写好的函数, <span class="number">4000000</span>条记录,从<span class="number">100001</span>号开始</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> insert_stu1(<span class="number">100001</span>,<span class="number">4000000</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">10</span> min <span class="number">47.03</span> sec)</span><br></pre></td></tr></table></figure><p>注意，这个时间会比较长，请耐心等待几分钟哟。结束后可以查询下是不是插入成功了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.82</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-3-测试及说明"><a href="#4-3-测试及说明" class="headerlink" title="4.3 测试及说明"></a>4.3 测试及说明</h2><p><strong><font color=blue>1. 执行一下下面的查询操作，进行慢查询语句的测试</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 注意：此时long_query_time已经设置为<span class="number">1</span>了哦<span class="operator">~</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> <span class="number">3455655</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> stuno   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> classId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3355654</span> <span class="operator">|</span> <span class="number">3455655</span> <span class="operator">|</span> ZfCwDz <span class="operator">|</span>   <span class="number">76</span> <span class="operator">|</span>     <span class="number">228</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;ZfCwDz&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> stuno   <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> classId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+------+---------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">32843</span> <span class="operator">|</span>  <span class="number">132844</span> <span class="operator">|</span> zfcWDZ <span class="operator">|</span>   <span class="number">32</span> <span class="operator">|</span>     <span class="number">304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">889126</span> <span class="operator">|</span>  <span class="number">989127</span> <span class="operator">|</span> ZfCwDz <span class="operator">|</span>   <span class="number">77</span> <span class="operator">|</span>     <span class="number">249</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2015535</span> <span class="operator">|</span> <span class="number">2115536</span> <span class="operator">|</span> zfcWDZ <span class="operator">|</span>   <span class="number">36</span> <span class="operator">|</span>     <span class="number">459</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3176527</span> <span class="operator">|</span> <span class="number">3276528</span> <span class="operator">|</span> ZFcwdZ <span class="operator">|</span>   <span class="number">81</span> <span class="operator">|</span>     <span class="number">941</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3355654</span> <span class="operator">|</span> <span class="number">3455655</span> <span class="operator">|</span> ZfCwDz <span class="operator">|</span>   <span class="number">76</span> <span class="operator">|</span>     <span class="number">228</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+------+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.09</span> sec)</span><br></pre></td></tr></table></figure><p>从上面的结果可以看出来，查询学生编号合和姓名花费时间 都在1s以上。已经达到了秒的数量级，说明目前查询效率是非常低的，下面我们分析一下原因</p><p><strong><font color=blue>2. 先查看下慢查询的记录</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;slow_queries&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Slow_queries  <span class="operator">|</span> <span class="number">2</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>🎯<strong>补充说明：</strong></p><p>在Mysql中，除了上述变量，控制慢查询日志的还有另外一个变量 <code>min_examined_row_limit</code> 。这个变量的意思是，查询<code>扫描过的最少记录数</code>。这个变量和查询执行时间，共同组成了判别一个查询是否慢查询的条件。如果查询扫描过的记录数大于等于这个变量的值，并且查询执行时间超过 <code>long_query_time</code> 的值，那么这个查询就被记录到慢查询日志中。反之，则不被记录到慢查询日志中。另外，<code>min_examined_row_limit</code> 默认是 0，我们也一般不会去修改它。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;min%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name          <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> min_examined_row_limit <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>当这个值为默认值0时，与 long_query_time&#x3D;10合在一起，表示只要查询的执行时间超过10秒钟，哪怕一个记录也没有扫描过，都要被记录到慢查询日志中。你也可以根据需要，通过修改”my.ini”文件，来修改查询时长，或者通过SET指令，用SQL语句修改<code>min_examined_row_limit</code> 的值。</p></blockquote><h2 id="4-4-慢查询日志分析工具：Mysqldumpslow"><a href="#4-4-慢查询日志分析工具：Mysqldumpslow" class="headerlink" title="4.4 慢查询日志分析工具：Mysqldumpslow"></a>4.4 慢查询日志分析工具：Mysqldumpslow</h2><p>在生产环境中，如果要手工分析日志，查找、分析 SQL，显然是个体力活，MySQL 提供了日志分析工具 &#x3D;&#x3D;mysqldumpslow&#x3D;&#x3D;。</p><blockquote><p>📑 注意:<br>1.该工具并不是 MySQL 内置的，不要在 MySQL 下执行，可以直接在根目录或者其他位置执行<br>2.该工具只有 Linux 下才是开箱可用的，实际上生产中mysql数据库一般也是部署在linux环境中的。如果您是windows环境下，可以参考博客<a href="https://www.cnblogs.com/-mrl/p/15770811.html%E3%80%82">https://www.cnblogs.com/-mrl/p/15770811.html。</a></p></blockquote><p>通过 <code>mysqldumpslow </code>可以查看慢查询日志帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow --help</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030616.png" alt="image-20220812155219680"></p><p>mysqldumpslow 命令的具体参数如下：</p><ul><li>-a: 不将数字抽象成N，字符串抽象成S</li><li><strong><font color=red>-s: 是表示按照何种方式排序：</font></strong><ul><li>c: 访问次数</li><li>l: 锁定时间</li><li>r: 返回记录</li><li><font color=blue>t: 查询时间</font></li><li>al:平均锁定时间</li><li>ar:平均返回记录数</li><li>at:平均查询时间 （默认方式）</li><li>ac:平均查询次数</li></ul></li><li><strong><font color=red>-t: 即为返回前面多少条的数据；</font></strong></li><li><strong><font color=red>-g: 后边搭配一个正则匹配模式，大小写不敏感的；</font></strong></li></ul><p>接下来我们可以找到慢查询日志的位置</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030118.png" alt="image-20220812160221292"></p><p>举例：我们想要按照查询时间排序，查看前五条 SQL 语句，这样写即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# mysqldumpslow <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">5</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log </span><br><span class="line"></span><br><span class="line">Reading mysql slow query log <span class="keyword">from</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log</span><br><span class="line">Count: <span class="number">1</span>  <span class="type">Time</span><span class="operator">=</span><span class="number">283.29</span>s (<span class="number">283</span>s)  Lock<span class="operator">=</span><span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span><span class="operator">=</span><span class="number">0.0</span> (<span class="number">0</span>), root[root]<span class="variable">@hadoop102</span></span><br><span class="line">  <span class="keyword">CALL</span> insert_stu1(N,N)</span><br><span class="line"></span><br><span class="line">Count: <span class="number">1</span>  <span class="type">Time</span><span class="operator">=</span><span class="number">1.09</span>s (<span class="number">1</span>s)  Lock<span class="operator">=</span><span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span><span class="operator">=</span><span class="number">5.0</span> (<span class="number">5</span>), root[root]<span class="variable">@localhost</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;S&#x27;</span></span><br><span class="line"></span><br><span class="line">Count: <span class="number">1</span>  <span class="type">Time</span><span class="operator">=</span><span class="number">1.03</span>s (<span class="number">1</span>s)  Lock<span class="operator">=</span><span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span><span class="operator">=</span><span class="number">1.0</span> (<span class="number">1</span>), root[root]<span class="variable">@localhost</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> N</span><br><span class="line"></span><br><span class="line">Died <span class="keyword">at</span> <span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqldumpslow line <span class="number">162</span>, <span class="operator">&lt;&gt;</span> chunk <span class="number">3.</span></span><br></pre></td></tr></table></figure><p>可以看到上面 sql 中具体的数值类都被N代替，字符串都被使用 S 代替，如果想要显示真实的数据，可以加上参数 <code>-a</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# mysqldumpslow <span class="operator">-</span>a <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">5</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log </span><br><span class="line"></span><br><span class="line">Reading mysql slow query log <span class="keyword">from</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log</span><br><span class="line">Count: <span class="number">1</span>  <span class="type">Time</span><span class="operator">=</span><span class="number">283.29</span>s (<span class="number">283</span>s)  Lock<span class="operator">=</span><span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span><span class="operator">=</span><span class="number">0.0</span> (<span class="number">0</span>), root[root]<span class="variable">@hadoop102</span></span><br><span class="line">  <span class="keyword">CALL</span> insert_stu1(<span class="number">100001</span>,<span class="number">4000000</span>)</span><br><span class="line"></span><br><span class="line">Count: <span class="number">1</span>  <span class="type">Time</span><span class="operator">=</span><span class="number">1.09</span>s (<span class="number">1</span>s)  Lock<span class="operator">=</span><span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span><span class="operator">=</span><span class="number">5.0</span> (<span class="number">5</span>), root[root]<span class="variable">@localhost</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;ZfCwDz&#x27;</span></span><br><span class="line"></span><br><span class="line">Count: <span class="number">1</span>  <span class="type">Time</span><span class="operator">=</span><span class="number">1.03</span>s (<span class="number">1</span>s)  Lock<span class="operator">=</span><span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span><span class="operator">=</span><span class="number">1.0</span> (<span class="number">1</span>), root[root]<span class="variable">@localhost</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> <span class="number">3455655</span></span><br><span class="line"></span><br><span class="line">Died <span class="keyword">at</span> <span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqldumpslow line <span class="number">162</span>, <span class="operator">&lt;&gt;</span> chunk <span class="number">3.</span></span><br></pre></td></tr></table></figure><p>最后罗列下工作中常用的一些查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">得到返回记录集最多的10个SQL</span></span><br><span class="line">mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">得到访问次数最多的10个SQL</span></span><br><span class="line">mysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">得到按照时间排序的前10条里面含有左连接的查询语句</span></span><br><span class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/atguigu-slow.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况</span></span><br><span class="line">mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log | more</span><br></pre></td></tr></table></figure><h2 id="4-5-关闭慢查询日志"><a href="#4-5-关闭慢查询日志" class="headerlink" title="4.5 关闭慢查询日志"></a>4.5 关闭慢查询日志</h2><p>MySQL 服务器停止慢查询日志功能有两种方法：</p><p><strong><font color=blue>方式一：永久性方式</font></strong></p><p>修改my.cnf或my.ini文件，把【mysqld】组下的slow_query_log值设置为OFF，修改保存后，再重启MySQL服务，即可生效。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="string">OFF</span></span><br></pre></td></tr></table></figure><p>或者，把slow_query_log一项注释掉 或 删除</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment">#slow_query_log =OFF</span></span><br></pre></td></tr></table></figure><p>重启MySQL服务，执行如下语句查询慢日志功能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow%&#x27;</span>;  #查询慢查询日志所在目录</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;  #查询超时时长</span><br></pre></td></tr></table></figure><p>可以看到，MySQL系统中的慢查询日志是关闭的。</p><p><strong><font color=blue>方式二：临时性方式</font></strong></p><p>使用 SET 语句来设置。<br>（1）停止 MySQL 慢查询日志功能，具体 SQL 语句如下。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">SET</span> <span class="string">GLOBAL slow_query_log=off;</span></span><br></pre></td></tr></table></figure><p>（2）<font color=red>重启MySQL服务</font>，使用 SHOW 语句查询慢查询日志功能信息，具体演示如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# systemctl restart mysqld;</span><br><span class="line">[root<span class="variable">@hadoop102</span> mysql]# mysql <span class="operator">-</span>hlocalhost <span class="operator">-</span>P3306 <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">10</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.25</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2021</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name             <span class="operator">|</span> <span class="keyword">Value</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_slow_admin_statements <span class="operator">|</span> OFF                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_extra            <span class="operator">|</span> OFF                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_slow_slave_statements <span class="operator">|</span> OFF                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_launch_time          <span class="operator">|</span> <span class="number">2</span>                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log            <span class="operator">|</span> OFF  #慢查询日志已关闭               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file       <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-----------------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> long_query_time <span class="operator">|</span> <span class="number">10.000000</span> <span class="operator">|</span> #已恢复至默认的 <span class="number">10</span>s</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-6-删除与恢复慢查询日志"><a href="#4-6-删除与恢复慢查询日志" class="headerlink" title="4.6 删除与恢复慢查询日志"></a>4.6 删除与恢复慢查询日志</h2><p>使用SHOW语句显示慢查询日志信息，具体SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name       <span class="operator">|</span> <span class="keyword">Value</span>                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> slow_query_log      <span class="operator">|</span> <span class="keyword">ON</span>                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_query_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102<span class="operator">-</span>slow.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+-----------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>调优结束可以及时删除慢查询日志节省磁盘空间哟，当然手工删除也是可以的</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030512.png" alt="image-20220812163728793"></p><p>如果误删了，而且还没有了备份，可以使用下面的命令来重新恢复生成哟，执行完毕后会在数据目录下重新生成查询日志文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#先要打开慢查询日志</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log<span class="operator">=</span><span class="keyword">ON</span>;</span><br><span class="line">#恢复慢查询日志</span><br><span class="line">mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs slow</span><br></pre></td></tr></table></figure><blockquote><p>提示</p><p>慢查询日志都是使用<code>mysqladmin -uroot -p flush-logs slow</code> 命令来删除重建的。使用时一定要注意，一旦执行了这个命令，慢查询日志都只存在于新的日志文件中，如果需要旧的查询日志，就必须事先备份。</p></blockquote><h1 id="5-查看-SQL-执行成本：SHOW-PROFILE"><a href="#5-查看-SQL-执行成本：SHOW-PROFILE" class="headerlink" title="5. 查看 SQL 执行成本：SHOW PROFILE"></a>5. 查看 SQL 执行成本：SHOW PROFILE</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030478.png" alt="image-20220812175708623"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> profiling     <span class="operator">|</span> OFF   <span class="operator">|</span> #当前是关闭状态</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> profiling <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;#开启</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后执行相关的查询语句。接着看下当前会话下有哪些profiles</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> <span class="number">3455655</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>...</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;ZfCwDz&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>...</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profiles;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00133475</span> <span class="operator">|</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00021050</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> <span class="number">3455655</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span> <span class="number">0.00053600</span> <span class="operator">|</span> <span class="keyword">SELECT</span> DATABASE()                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span> <span class="number">0.01693325</span> <span class="operator">|</span> <span class="keyword">show</span> databases                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span> <span class="number">0.00375125</span> <span class="operator">|</span> <span class="keyword">show</span> tables                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">6</span> <span class="operator">|</span> <span class="number">1.75597875</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> <span class="number">3455655</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">7</span> <span class="operator">|</span> <span class="number">1.11115150</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;ZfCwDz&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------------------------------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>你能看到当前会话一共有7个查询，如果我们想要查看最近一次查询的开销，可以使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> profile;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150030438.png" alt="image-20220812180852535"></p><p>我们也可以查看指定的Query ID的开销，只需要后面跟上 <code>for num</code>。也可以查看不同部分的开销，比如CPU、block.io等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profile cpu,block io for query 7;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031520.png" alt="image-20220812181159314"></p><p>通过如果发现上一条 sql 慢的原因在于执行慢（<code>executing</code>字段耗时多），就可以接着用 <code>Explain</code> 进行分析具体的 sql 语句。等后面我们为其建立索引，就可以大大提高效率了</p><p>🔊**<font color=blue>show profile的常用查询参数：</font>**</p><p>① ALL：显示所有的开销信息。<br>② BLOCK IO：显示块 IO 开销。<br>③ CONTEXT SWITCHES：上下文切换开销。<br>④ CPU：显示 CPU 开销信息。<br>⑤ IPC：显示发送和接收开销信息。<br>⑥ MEMORY：显示内存开销信息。<br>⑦ PAGE FAULTS：显示页面错误开销信息。<br>⑧ SOURCE：显示和 Source_function，Source_file，Source_line 相关的开销信息。<br>⑨ SWAPS：显示交换次数开销信息。</p><p>🎨**<font color=blue>日常开发需要注意的结论：</font>**</p><p>① <code>Coverting Heap to MyISAM</code>：查询结果太大，内存不够，正在往磁盘中迁移<br>② <code>Creating tmp table</code>：创建临时表，先拷贝数据到临时表，用完再删除临时表<br>③<code>Coping to tmp table on disk</code>：把内存中临时表复制到磁盘上，警惕！<br>④ <code>locked</code></p><p>&#x3D;&#x3D;如果在 show profile 的查询结果中，出现了以上4条结果中的任何一条。则sql 语句需要优化&#x3D;&#x3D;</p><p><strong><font color=blue>最后，还需要注意：</font></strong></p><p><code>SHOW PROFILE</code> 命令将被弃用，不过我们可以从 <code>information_schema</code> 中的 <code>profiling</code> 数据表进行查看</p><h1 id="6-分析查询语句：EXPLAIN（重点）"><a href="#6-分析查询语句：EXPLAIN（重点）" class="headerlink" title="6. 分析查询语句：EXPLAIN（重点）"></a>6. 分析查询语句：EXPLAIN（重点）</h1><h2 id="6-1-EXPLAIN-概述"><a href="#6-1-EXPLAIN-概述" class="headerlink" title="6.1 EXPLAIN 概述"></a>6.1 EXPLAIN 概述</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031440.png" alt="image-20220812182818655"></p><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031002.png" alt="image-20220812183245510"></p><p><strong><font color=#681016>3. 版本情况</font></strong></p><ul><li><p>MySQL 5.6.3以前只能<code>EXPLAIN SELECT</code> ；MYSQL 5.6.3以后就可以<code>EXPLAIN SELECT，UPDATE，DELETE</code></p></li><li><p>在5.7以前的版本中，想要显示<code>partitions </code>需要使用<code>explain partitions</code>命令；想要显示<br><code>filtered </code>需要使用<code>explain extended</code> 命令。在5.7版本后，默认explain直接显示partitions和<br>filtered中的信息</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031919.png" alt="image-20220812184127567"></p></li></ul><p><strong>注意：</strong>&#x3D;&#x3D;EXPLAIN 仅仅是查看执行计划，不会真实的执行 sql&#x3D;&#x3D;</p><h2 id="6-2-基本语法"><a href="#6-2-基本语法" class="headerlink" title="6.2 基本语法"></a>6.2 基本语法</h2><p>EXPLAIN 或 DESCRIBE语句的语法形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> select_options</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">DESCRIBE</span> <span class="keyword">SELECT</span> select_options</span><br></pre></td></tr></table></figure><p>如果我们想看看某个查询的执行计划的话，可以在具体的查询语句前边加一个EXPLAIN ，就像这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031664.png" alt="image-20220812225914302"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031294.png" alt="image-20220812225822122"></p><p>EXPLAIN 语句输出的各个列的作用如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031821.png" alt="image-20220812225712460"></p><p>在这里把它们都列出来只是为了描述一个轮廓，让大家有一个大致的印象。</p><h2 id="6-3-数据准备"><a href="#6-3-数据准备" class="headerlink" title="6.3 数据准备"></a>6.3 数据准备</h2><p><strong><font color=blue>1. 建表</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> s1 (</span><br><span class="line">     id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">     key1 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key2 <span class="type">INT</span>,</span><br><span class="line">     key3 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key_part1 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key_part2 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key_part3 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     common_field <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">      INDEX idx_key1 (key1),</span><br><span class="line">      <span class="keyword">UNIQUE</span> INDEX idx_key2 (key2),</span><br><span class="line">      INDEX idx_key3 (key3),</span><br><span class="line">      INDEX idx_key_part(key_part1, key_part2, key_part3)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> s2 (</span><br><span class="line">     id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">     key1 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key2 <span class="type">INT</span>,</span><br><span class="line">     key3 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key_part1 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key_part2 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     key_part3 <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">     common_field <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">      INDEX idx_key1 (key1),</span><br><span class="line">      <span class="keyword">UNIQUE</span> INDEX idx_key2 (key2),</span><br><span class="line">      INDEX idx_key3 (key3),</span><br><span class="line">      INDEX idx_key_part(key_part1, key_part2, key_part3)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>注：建两个表方便联合查询</p><p><strong><font color=blue>2. 创建存储函数</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string1(n <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) #该函数会返回一个字符串</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">        <span class="keyword">SET</span> return_str <span class="operator">=</span>CONCAT(return_str,<span class="built_in">SUBSTRING</span>(chars_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建函数，假如报错，需设置参数 <code>log_bin_trust_function_creators</code>，允许创建函数设置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span>;   # 不加<span class="keyword">global</span>只是当前窗口有效。</span><br></pre></td></tr></table></figure><p><strong><font color=blue>3. 创建存储过程</font></strong></p><p>创建往 s1 表中插入数据的存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_s1 (<span class="keyword">IN</span> min_num <span class="type">INT</span> (<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="type">INT</span> (<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    REPEAT</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> s1 <span class="keyword">VALUES</span>(</span><br><span class="line">     (min_num <span class="operator">+</span> i),</span><br><span class="line">     rand_string1(<span class="number">6</span>),</span><br><span class="line">     (min_num <span class="operator">+</span> <span class="number">30</span> <span class="operator">*</span> i <span class="operator">+</span> <span class="number">5</span>),</span><br><span class="line">     rand_string1(<span class="number">6</span>),</span><br><span class="line">     rand_string1(<span class="number">10</span>),</span><br><span class="line">     rand_string1(<span class="number">5</span>),</span><br><span class="line">     rand_string1(<span class="number">10</span>),</span><br><span class="line">     rand_string1(<span class="number">10</span>));</span><br><span class="line">    UNTIL i <span class="operator">=</span> max_num</span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建往 s2 表中插入数据的存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_s2 (<span class="keyword">IN</span> min_num <span class="type">INT</span> (<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="type">INT</span> (<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    REPEAT</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> s2 <span class="keyword">VALUES</span>((min_num <span class="operator">+</span> i),</span><br><span class="line">        rand_string1(<span class="number">6</span>),</span><br><span class="line">        (min_num <span class="operator">+</span> <span class="number">30</span> <span class="operator">*</span> i <span class="operator">+</span> <span class="number">5</span>),</span><br><span class="line">        rand_string1(<span class="number">6</span>),</span><br><span class="line">        rand_string1(<span class="number">10</span>),</span><br><span class="line">        rand_string1(<span class="number">5</span>),</span><br><span class="line">        rand_string1(<span class="number">10</span>),</span><br><span class="line">        rand_string1(<span class="number">10</span>));</span><br><span class="line">    UNTIL i <span class="operator">=</span> max_num</span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>4. 调用存储过程</font></strong></p><p>s1 表数据的添加：加入 1 万条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL insert_s1(10001,10000);</span><br></pre></td></tr></table></figure><p>s2 表数据的添加：加入 1 万条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL insert_s2(10001,10000);</span><br></pre></td></tr></table></figure><h2 id="6-4-EXPLAIN-各列作用"><a href="#6-4-EXPLAIN-各列作用" class="headerlink" title="6.4 EXPLAIN 各列作用"></a>6.4 EXPLAIN 各列作用</h2><p>为了让大家有比较好的体验，我们调整了下<code>EXPLAIN</code>输出列的顺序。</p><h3 id="6-4-1-table"><a href="#6-4-1-table" class="headerlink" title="6.4.1 table"></a>6.4.1 table</h3><p>不论我们的查询语句有多复杂，里边儿包含了多少个表 ，到最后也是需要对每个表进行单表访问的，所以 MySQL 规定 EXPLAIN 语句输出的每条记录都对应着某个单表的访问方法，该条记录的 &#x3D;&#x3D;table 列代表着该表的表名&#x3D;&#x3D;（有时不是真实的表名字，可能是简称）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM s1 INNER JOIN s2;</span><br></pre></td></tr></table></figure><p>如下图，&#x3D;&#x3D;一张表对应一个记录&#x3D;&#x3D;。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031570.png" alt="image-20220812235854193"></p><p>注：临时表也会有对应的记录，比如我们使用UNION时就会出现临时表</p><h3 id="6-4-2-id"><a href="#6-4-2-id" class="headerlink" title="6.4.2 id"></a>6.4.2 id</h3><p>例1：下面的查询结果，两个记录似乎id都是1.这是为什么呢？</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031032.png" alt="image-20220813001639812"></p><p>实际上，&#x3D;&#x3D;在查询语句中每出现一个SELECT关键字，MySQL就会为它分配一个唯一的id&#x3D;&#x3D; ，代表着一次查询。这个id 就是 <code>EXPLAIN</code>语句的第一列。</p><p>例2：下面的查询中只有一个SELECT，所以<code>EXPLAIN</code>的结果中也就只有一条id为 1 的记录喽~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031185.png" alt="image-20220813001157042"></p><p>例3：下面的查询有两个SELECT，所以<code>EXPLAIN</code>的结果中 会有两条记录，且id分别就是1和2喽~ 。其中 s1被称为驱动表，s2被称为 被驱动表</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031326.png" alt="image-20220813005516485"></p><p>例4：下面这条SQL有一个坑，请注意！！！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> key2 <span class="keyword">FROM</span> s2 <span class="keyword">WHERE</span> common_field <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>两个记录的 id 都是 1，小小的眼睛是否充满了大大的疑惑？</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031679.png" alt="image-20220813105713820"></p><p>这是因为优化器会对上面的 sql 语句进行优化，将其转换为多表连接，而不是子查询。因为子查询其实是一种嵌套查询的情况，其时间复杂度是 O(n^m)，其中 m 是嵌套的层数，而多表查询的时间复杂度是 O(n*m)</p><p>例5：再看看 Union 联合查询的情况。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s2;</span><br></pre></td></tr></table></figure><p>结果是这样，竟然会出现三张表~ Amazing！</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031358.png" alt="image-20220813110019454"></p><p>这是因为 Union 是取表的并集，需要建临时表进行去重，因此会有三条记录。可以看到第三条记录的 <code>Extra</code> 就标识了它是一张临时表哦。<code>临时表 id 是 Null</code>。</p><p>例6：再看看 Union ALL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1  <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s2;</span><br></pre></td></tr></table></figure><p>产生两条记录，因为它不会去重~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031768.png" alt="image-20220813110210174"></p><p><strong>💌小结</strong></p><ol><li>id如果相同，可以认为是一组，从上往下顺序执行</li><li>在所有组中，id值越大，优先级越高，越先执行</li><li>关注点：id号每个号码，表示一趟独立的查询, 一个sql的查询趟数越少越好</li></ol><h3 id="6-4-3-select-type"><a href="#6-4-3-select-type" class="headerlink" title="6.4.3 select_type"></a>6.4.3 select_type</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031617.png" alt="image-20220813114910520"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150031504.png" alt="image-20220813115146750"></p><p><strong><font color=blue>①：查询语句中不包含<code>UNION</code>或者子查询的查询都算作是<code>SIMPLE</code>类型</font></strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032310.png" alt="image-20220813133415051"></p><p>再看下连接查询，可以看到 连接查询也算是<code>SIMPLE</code>类型</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032728.png" alt="image-20220813133509606"></p><p><strong><font color=blue>②：Union 联合查询。其左边的查询是 <code>Primary</code>，右边的查询类型是 <code>Union</code>，去重的临时表查询类型是： <code>Union Result</code></font></strong></p><ul><li><p>对于包含<code>UNION</code>或者<code>UNION ALL</code>的大查询来说，它是由几个小查询组成的，其中除了最左边的那个查询的<code>select_type</code>值就是<code>PRIMARY</code>，其余的小查询的<code>select_type</code>值就是<code>UNION</code></p></li><li><p><code>MySQL</code>选择使用临时表来完成<code>UNION</code>查询的去重工作，针对该临时表的查询的<code>select_type</code>就是<br><code>UNION RESULT</code></p></li><li><p>对应子查询的大查询来说，子查询是外边的那个是<code>PRIMARY</code></p></li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032169.png" alt="image-20220813133840236"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032358.png" alt="image-20220813134118038"></p><p><strong><font color=blue>③：不会被优化成多表连接的子查询</font></strong></p><p>如果包含子查询的查询语句不能够转为多表连接的形式(也就是不会被优化器进行自动的优化)，并且该子查询是不相关的子查询</p><p>该子查询的第一个<code>SELECT</code>关键字代表的那个查询的<code>select_type</code>就是<code>SUBQUERY</code>。也就是外层查询是 <code>Primary</code>，内层查询是 <code>SUBQUERY</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032686.png" alt="image-20220813134931380"></p><p>如果子查询不能被转换为多表连接的形式，并且该子查询是相关子查询。</p><p>比如下面的查询在内部子查询使用了外部的表。则该子查询的第一个<code>SELECT</code>关键字代表的那个查询的<code>select_type</code>就是<code>DEPENDENT SUBQUERY</code>。 外层查询是<code>Primary</code>，内层查询是<code>DEPENDENT SUBQUERY</code> </p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032673.png" alt="image-20220813135056579"></p><p>需要注意的是 <code>DEPENDENT SUBQUERY</code> 的查询语句可能会被执行多次，因为内层查询依赖于外层的查询，因此可能会是外层传一个值，内层就执行一次的模式。</p><blockquote><p>子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条 件进行执行，那么这样的子查询叫做不相关子查询。</p></blockquote><p><strong><font color=blue>④：包含<code>UNION</code>或者<code>UNION ALL</code>的子查询</font></strong></p><p>在包含 <code>Union</code>或者 <code>Union All</code> 的子查询 sql 中，如果各个小查询都依赖于外查询，那么除了最左边的小查询外，各个小查询的类型都是 <code>DEPENDENT UNION</code> </p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032262.png" alt="image-20220813145005814"></p><p>外查询是 <code>Primary</code>，最左边的子查询是 <code>DEPENDENT SUBQUERY</code>，后面的子查询是 <code>DEPENDENT UNION</code>，临时去重表的类型是 <code>Union Result</code>。这里大家可能要困惑，第一个子查询中也没有看到依赖 s1 啊。这其实也是优化器会在执行时进行优化，将 <code>IN</code> 改成 <code>Exist</code>，并且把外部的表移到内部去。这里我们了解就行，以后会有文章给大家介绍优化器的。</p><p><strong><font color=blue>⑤：关于派生表的子查询</font></strong></p><p>对于包含<code>派生表</code>的查询，该派生表对应的子查询的<code>select_type</code>就是<code>DERIVED</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032278.png" alt="image-20220813145348553"></p><p><strong><font color=blue>⑥：子查询的物化后与外层连接查询</font></strong></p><p>当优化器在执行子查询时选择把子查询优化成为一张物化表，与外层查询进行连接查询时。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032153.png" alt="image-20220813150059254"></p><p>从下往上看，子查询的查询类型是 <code>MATERIALIZED</code>；物化过程是基于 id 为 2 的查询结果表进行的，其 table 是 <code>subquery 2</code>，查询类型是 <code>SIMPLE</code>，而外层也相当于是与固定的直接值进行查询，其类型也是 <code>SIMPLE</code></p><p>上面的介绍都是一些基本的情况，还没有真正的介绍与索引相关的情况哦。觉得是不是晕晕的了，我们用一个表格进行下总结吧</p><h3 id="6-4-4-partitions-可略"><a href="#6-4-4-partitions-可略" class="headerlink" title="6.4.4 partitions (可略)"></a>6.4.4 partitions (可略)</h3><p>代表分区表中的命中情况，非分区表，该项为 <code>NULL</code>。一般情况下我们的查询语句的执行计划的<code>partitions </code>列的值都是<code>NULL</code></p><p>官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/alter-table-partition-operations.html">https://dev.mysql.com/doc/refman/8.0/en/alter-table-partition-operations.html</a></p><p>如果想详细了解，可以如下方式测试。创建分区表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建分区表，</span></span><br><span class="line"><span class="comment">-- 按照id分区，id&lt;100 p0分区，其他p1分区</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_partitions (id <span class="type">INT</span> auto_increment,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">12</span>),<span class="keyword">PRIMARY</span> KEY(id))</span><br><span class="line">    <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(id)(</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> less than(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> less than MAXVALUE</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><p>查询 id 大于200（200&gt;100，p1分区）的记录，查看执行计划，partitions 是 p1，符合我们的分区规则</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032328.png" alt="image-20220813151056438"></p><h3 id="6-4-5-type-☆"><a href="#6-4-5-type-☆" class="headerlink" title="6.4.5 type ☆"></a>6.4.5 type ☆</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150102778.png" alt="image-20220813152916930"></p><p>完整的访问方法如下： <code>system </code>、<code>const</code>、<code>eq_ref </code>、<code>ref </code>、<code>fulltext</code>、<code>ref_or_null</code>、<code>index_merge</code>、<code>unique_subquery</code>、<code>index_subquery</code>、 <code>range</code>、<code>index</code>、<code>ALL</code>。</p><p>我们详细解释一下：</p><p><strong>1️⃣system</strong></p><p>当表中只有一条记录，并且该表中存储引擎统计数据是精确的，比如 MYISAM，Memory，那么其访问方法就是<code>System</code>。这种方式几乎是性能最高的，当然我们几乎用不上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t(i int) Engine=MyISAM;#创建表</span><br><span class="line">INSERT INTO t VALUES(1);# 插入第一条记录</span><br><span class="line">EXPLAIN SELECT * FROM t;# 查看性能</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032626.png" alt="image-20220813161234015"><br>但凡我们再插入一条数据，其访问方式就变成了性能最差的全表扫描 <code>ALL</code>。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032680.png" alt="image-20220813161324653"></p><p>如果存储引擎是InnoDB，即使只有一条数据，其访问方式也是ALL，这是因为 InnnoDB 访问数据不是精确的</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032943.png" alt="image-20220813161518641"></p><p><strong>2️⃣Const</strong></p><p>当我们根据主键或者唯一的二级索引，与常数进行等值匹配时，对单表的访问方法就是 <code>const</code>。这个访问方式的效率低于 <code>system</code>，但也是很高效的。</p><p>比如对主键与常数匹配，进行等值查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">10005</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032582.png" alt="image-20220813161700890"></p><p>比如对Unique标识的唯一二级索引key2与常数匹配，进行等值查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key2 <span class="operator">=</span> <span class="number">10066</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032734.png" alt="image-20220813163815258"></p><p>当我们把where后面的关键字改成key3 普通索引时，由于key3的字段值是可重复的。type类型就变成了 <code>All</code>，全表查询</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032927.png" alt="image-20220813164458327"></p><p>注意：此时可能有细心的小伙伴可能注意到我们的key3不是也有索引<code>idx_key3</code>，性能再查也不至于全表查询吧~ 但是忘记了一个细节，key3本身是varchar类型的， <code>key3 = 10066</code>会进行一个隐式类型转换，从而会导致 索引失效，我们也可以看到 <code>key</code>列对应的为空。</p><p>当修改成<code>key3 = 10066</code>后，结果如下图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032846.png" alt="image-20220813172536786"></p><p><strong>3️⃣eq_ref</strong></p><p>再进行<strong>连接查询</strong>时，如果<strong>被驱动表</strong>是通过主键或者唯一二级索引等值匹配的方式进行查询的，那么被驱动表的访问方式是 <code>eq_ref</code>。这也是一种性能很不错的方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.id <span class="operator">=</span> s2.id;</span><br></pre></td></tr></table></figure><p>上面连接查询语句，对于驱动表来说，就是对s1全表进行扫描，找到符合条件的数据，因此其<code>type</code>是<code>All</code>,对被驱动表来说，相于直接访问驱动表查询到的数据进行等值查询，因此其访问方式是<code>eq_ref</code><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032989.png" alt="image-20220813173413307"></p><p><strong>4️⃣ref</strong></p><p>当使用普通的二级索引与常量进行等值匹配时，type 是 <code>ref</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032310.png" alt="image-20220813173618072"></p><p>下面考考你。以下 sql 的引用类型是什么呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key3 <span class="operator">=</span> <span class="number">10066</span>;</span><br></pre></td></tr></table></figure><p>看看答案。你是不是猜错了。是 <code>All</code>。这是因为 key3 的字段 varchar 类型，但是我们这里常量值是整形，因此需要使用函数进行&#x3D;&#x3D;隐式的类型转换&#x3D;&#x3D;，一旦使用函数，索引就失效了，因此访问类型变成了全表扫描 <code>All</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032919.png" alt="image-20220813173814439"></p><p>当我们常量使用对应的类型，就是期望的<code>ref</code>访问类型了</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150032015.png" alt="image-20220813173912091"></p><p><strong>5️⃣ref_or_null</strong></p><p>当使用普通的二级索引进行等值匹配时，当索引值可以是 Null 时，type 是 <code>ref_or_null</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">OR</span> key1 <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033169.png" alt="image-20220813174556607"></p><p><strong>6️⃣index_merge</strong></p><p>当进行单表访问时，如果多个查询字段分别建立了单列索引，使用 OR 连接，其访问类型是 <code>index_merge</code>。同时还可以看到 <code>key </code>这一字段，是使用了多个索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">OR</span> key3 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033310.png" alt="image-20220813174718756"></p><p>猜猜下面 sql 的引用类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> key3 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p>猜对了吗？答案是 <code>ref</code>，这是因为用 AND 连接两个查询时，实际上只使用了 key1 的索引。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033111.png" alt="image-20220813174912860"></p><p><strong>7️⃣unique_subquery</strong></p><p>针对一些包含 <code>IN</code> 的 子查询的查询语句中，如果优化器决定将 IN 子查询优化为 EXIST 子查询，而且子查询可以使用主键进行等值匹配的话，那么该子查询执行计划的 <code>type </code>就是 <code>unique_subquery</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key2 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> s2 <span class="keyword">where</span> s1.key1 <span class="operator">=</span> s2.key1) <span class="keyword">OR</span> key3 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033407.png" alt="image-20220813182322867"></p><p><strong>8️⃣range</strong></p><p>如果使用索引获取某些<code>范围区间</code>的记录，那么就可能使用到<code>range</code>访问方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">&gt;</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> key1 <span class="operator">&lt;</span> <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033065.png" alt="image-20220813182743852"></p><p><strong>9️⃣index</strong></p><p>当我们可以使用<strong>索引覆盖</strong>，但是需要扫描的全部的索引记录时，该表的访问方式就是 <code>index</code>。索引覆盖后面文章介绍优化器时会详细介绍，为了便于大家理解，先简单介绍如下。比如下面 sql 语句中，key_part2 ，key_part2 都属于联合索引 <code>idx_key_part(key_part1, key_part2, key_part3)</code> 的一部分，&#x3D;&#x3D;在查找数据时可以用上这个联合索引，而不用进行回表操作&#x3D;&#x3D;，这种情况即&#x3D;&#x3D;索引覆盖&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> key_part2 <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key_part2 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033505.png" alt="image-20220813183057913"></p><p><strong>1️⃣0️⃣ALL</strong></p><p>最熟悉的全表扫描 <code>ALL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033592.png" alt="image-20220813183153914"></p><blockquote><p>❤温馨提示：这里很多小伙伴会觉得记不住，其实您可以收藏这篇博客，执行 EXPLAIN 时对应结果，反向查找博文对应内容，毕竟咱们只需要能够读懂性能分析的结果</p></blockquote><p><strong>小结</strong></p><p>结果值从最好到最坏依次是： <font color=green>system &gt; const &gt; eq_ref &gt; ref </font>&gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <font color=green>range &gt; index &gt; ALL</font> 其中比较重要的几个提取出来（见绿色部分）</p><p>SQL 性能优化的目标：&#x3D;&#x3D;至少要达到 range 级别，要求是 ref 级别，最好是 consts 级别&#x3D;&#x3D;（阿里巴巴开发手册要求）</p><h3 id="6-4-6-possible-keys-和-key"><a href="#6-4-6-possible-keys-和-key" class="headerlink" title="6.4.6 possible_keys 和 key"></a>6.4.6 possible_keys 和 key</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150102167.png" alt="image-20220813225540107"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">&gt;</span> <span class="string">&#x27;z&#x27;</span> <span class="keyword">AND</span> key3 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033297.png" alt="image-20220813225634984"></p><p>对应优化器来说，可以选择的 <code>possible_keys</code> 越少越好，因为选项越多，进行过滤花的时间也就对应更多。另外，优化器会对各个索引进行查询的效率进行评估，以此来选择实际使用的 <code>key</code>。而且由于优化器会对 sql 进行优化，完全可能会出现 <code>possible_keys</code> 是 null，但是 <code>key</code> 不为 null 的情况</p><h3 id="6-4-7-key-len-☆"><a href="#6-4-7-key-len-☆" class="headerlink" title="6.4.7 key_len ☆"></a>6.4.7 key_len ☆</h3><p>实际使用的索引的长度，单位是字节。可以帮助你检查是否充分利用了索引，主要针对&#x3D;&#x3D;联合索引&#x3D;&#x3D;具有一定的参考，对同一索引来说，key_len 值越大越好（与自己比较，后面将解释）。</p><p><font color=blue>① 下面SQL执行结果是 4，这个结果怎么算出来的呢？</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033607.png" alt="image-20220813230641143"></p><p>这是因为使用的是主键 id 作为索引，其类型是 int，占 4 个字节</p><p><font color=blue>② 再来猜猜下面的 key_len 是多少~</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key2 <span class="operator">=</span> <span class="number">10126</span>;</span><br></pre></td></tr></table></figure><p>什么？你猜的是 4，而答案是 5~</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033407.png" alt="image-20220813230839120"></p><p>这是因为虽然 key2 也是 int 类型，但是它被 unique 修饰，并没有标识非空（而主键都是非空的），因此加上空值标记，一共是5字节</p><p><font color=blue>③ 字符类型的索引长度为多少呢</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033945.png" alt="image-20220813231154852"></p><p>答案是 303，因为类型是 varchar(100)，100 个字符，utf-8 每个字符占 3 个字节，共 300 个字节，加上变长列表 2 个字节与一个空值标识占一个字节，共 303 字节。</p><p><font color=blue>④ 看看联合索引的情况</font></p><ul><li>看下面的联合索引，key_len还是303，不需要解释了吧</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key_part1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033471.png" alt="image-20220813231414814"></p><ul><li>再看看下面这个联合索引，其结果是 606</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key_part1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> key_part2 <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033975.png" alt="image-20220813231505907"></p><p>&#x3D;&#x3D;这个查询的 key-len 比上面的查询大，性能就比上面的好&#x3D;&#x3D;，怎么理解呢？其实只要你看过我之前介绍B+树的文章就很容易理解了。因为在目录页我除了考虑 <code>key_part1</code> ，还会考虑 <code>key_part2</code>，定位到的数据就更加精准，范围更小，需要加载 I&#x2F;O 的数据页数量就会更少，这样是不是性能就比较好啊~</p><ul><li>猜猜下面的 sql 执行后 key_len 是多少</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key_part3 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033287.png" alt="image-20220813231734678"></p><p>是空哦，因为都不会使用到索引，这就是我们一直在提的<strong>最左前缀原则</strong>，后面会详细介绍的。</p><p><strong><font color=blue>📚练习：key_len的长度计算公式：</font></strong></p><ul><li>varchar(10)变长字段且允许NULL &#x3D; <code>10 *( character set：utf8=3, gbk=2, latin1=1) + 1(NULL)+2(变长字段)</code></li><li>varchar(10)变长字段且不允许NULL &#x3D; <code>10* ( character set：utf8=3 ,gbk=2, latin1=1) +2(变长字段)</code></li><li>char(10)固定字段且允许NULL &#x3D; <code>10 *( character set：utf8=3, gbk=2, latin1=1) +1(NULL)</code></li><li>char(10)固定字段且不允许NULL &#x3D; <code>10* ( character set：utf8=3,gbk=2,latin1=1)</code></li></ul><h3 id="6-4-8-ref"><a href="#6-4-8-ref" class="headerlink" title="6.4.8 ref"></a>6.4.8 ref</h3><p>当索引列进行等值查询时，与索引列匹配的对象信息。</p><p><font color=blue>① 比如只是一个常数或者是某个列，其 <code>ref</code> 是 <code>const</code></font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033417.png" alt="image-20220814103925203"></p><p><font color=blue>② 当进行多表连接查询时，对被驱动表s2执行的查询引用了atguigudb1.s1.id字段进行等值查询</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.id <span class="operator">=</span> s2.id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033329.png" alt="image-20220814104029459"></p><p><font color=blue>③ 当连接条件使用函数时，其 <code>ref</code> 就是 <code>func</code></font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s2.key1 <span class="operator">=</span> <span class="built_in">UPPER</span>(s1.key1);</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033857.png" alt="image-20220814104217790"></p><h3 id="6-4-9-rows-☆"><a href="#6-4-9-rows-☆" class="headerlink" title="6.4.9 rows ☆"></a>6.4.9 rows ☆</h3><p><font color=blue>① 预估的需要读取的记录条目数，条目数越小越好。这是因为值越小，加载I&#x2F;O的页数就越少~</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">&gt;</span> <span class="string">&#x27;z&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033295.png" alt="image-20220814104350297"></p><h3 id="6-4-10-filtered"><a href="#6-4-10-filtered" class="headerlink" title="6.4.10 filtered"></a>6.4.10 filtered</h3><p>&#x3D;&#x3D;经过搜索条件后过滤剩下的记录所占的百分比&#x3D;&#x3D;。&#x3D;&#x3D;百分比越高越好&#x3D;&#x3D;，比如同样 rows 是 40，如果 filter 是 100，则是从 40 条记录里进行查找，如果 filter 是 10，则是从 400 条记录里进行查找，相比较而言当然是前者的效率更高哦。</p><p><font color=blue>① 如果执行的是单表扫描，那么计算时需要估计除了对应搜索条件外的其他搜索条件满足的记录有多少条</font> 晕了就看看下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">&gt;</span> <span class="string">&#x27;z&#x27;</span> <span class="keyword">AND</span> common_field <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果是 10，表示有 347 条记录满足 key1 &gt; ‘z’ 的条件，这 347 条记录的 10% 满足 common_field &#x3D; ‘a’ 条件。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033280.png" alt="image-20220814104530103"></p><p><font color=blue>② 实际上，对于单表查询，这个字段没有太大的意义，我们更加关注连接查询时的 filtered 值，它决定了被驱动表要执行的次数。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.key1 <span class="operator">=</span> s2.key1 <span class="keyword">WHERE</span></span><br><span class="line">s1.common_field <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果如下。在标明驱动表 s1 提供给被驱动表的记录数是 9895 条，其中 989.5 条满足过滤条件s1.key1 &#x3D; s2.key1，那么被驱动表需要执行 990 次查询。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033425.png" alt="image-20220814104852338"></p><blockquote><p>filtered&#x3D;(最终查询结果&#x2F;rows列数据)*100%，越大表示过滤后的数据，越是最终结果。<br>相比较filtered越小，减少了数据再次过滤的性能</p></blockquote><h3 id="6-4-11-Extra-☆"><a href="#6-4-11-Extra-☆" class="headerlink" title="6.4.11 Extra ☆"></a>6.4.11 Extra ☆</h3><p>顾名思义，<code>Extra </code>列是用来说明一些额外信息的，包含不适合在其他列中显示但十分重要的额外信息。我们可以通过这些额外信息来<code>更准确的理解MySQL到底将如何执行给定的查询语句</code>。MySQL提供的额外信息有好几十个，我们就不一一介绍了，所以我们只挑比较重要的额外信息介绍给大家。</p><p><font color=blue>① <code>No tables used</code></font></p><p>当查询语句的没有<code>FROM</code>子句时将会提示该额外信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033055.png" alt="image-20220814111715918"></p><p><font color=blue>② <code>Impossible WHERE</code></font></p><p>当查询条件永远不可能满足，查不到数据时会出现该信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">!=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033040.png" alt="image-20220814111830017"></p><p><font color=blue>③ <code>Using where</code></font></p><ul><li>当没有使用索引，普通的 where 查询时，会出现该信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> common_field <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150033056.png" alt="image-20220814111940959"></p><ul><li>使用索引查询，则默默使用索引，什么额外信息也没有。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034481.png" alt="image-20220814112044015"></p><ul><li>索引加普通 where，那还是 using where</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> common_field <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034568.png" alt="image-20220814112128725"></p><p><font color=blue>④ <code>No matching min/max row</code></font></p><p>当查询语句中有 MIN、MAX 等聚合函数，但是并没有符合 where 条件的搜索记录时，会提供额外信息 <code>No matching min/max row</code>（表中根本没有满足 where 条件的字句，找 min、max 没有意义）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(key1) <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;abcdefg&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034576.png" alt="image-20220814112312678"></p><p><font color=blue>⑤ <code>Select tables optimized away</code></font></p><p>当查询语句中有 MIN、MAX 等聚合函数，有符合 where 条件的搜索记录时</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(key1) <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;oCUPss&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034143.png" alt="image-20220814112508271"></p><p><font color=blue>⑥ <code>Using index</code> </font></p><p>在使用覆盖索引的情况提示。所谓覆盖索引，就是&#x3D;&#x3D;索引中覆盖了需要查询的所有字段，不需要再使用聚簇索引进行回表查找&#x3D;&#x3D;。比如下面的例子，使用 key1 作为查找条件，该字段建立了索引，B+ 树可以查找到 key1 字段和主键，因此下面只查找 key1 字段就不用进行回表操作，这是非常棒的情况。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> key1 <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034753.png" alt="image-20220814112621332"></p><p><font color=blue>⑦ <code>Using index condition</code></font></p><p>搜索列中虽然出现了索引列，但是不能够使用索引，这种情况是比较坑的~</p><p>比如下面的查询&#x3D;&#x3D;虽然出现了索引列作为查询条件，但是还是需要进行回表查找&#x3D;&#x3D;，回表操作是一个随机 I&#x2F;O，比较耗时。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">&gt;</span> <span class="string">&#x27;z&#x27;</span> <span class="keyword">AND</span> key1 <span class="keyword">LIKE</span> <span class="string">&#x27;%a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034072.png" alt="image-20220814114314395"></p><p>上面这种情况可以使用<font color=red><strong>索引下推</strong></font>(可以通过配置项进行配置)，&#x3D;&#x3D;使我们使用 WHERE key1 &gt; ‘z’ 得到的结果先进行模糊匹配 key1 LIKE ‘%a’，然后再去回表&#x3D;&#x3D;，就可以减少回表的次数了。</p><p><font color=blue>⑧ <code>Using join buffer</code></font></p><p>在连接查询中，当被驱动表不能够有效利用索引实现提升速度，数据库就使用缓存来尽可能提升一些性能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.common_field <span class="operator">=</span> s2.common_field;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034057.png" alt="image-20220814115201430"></p><p><font color=blue>⑨ <code>Not exists</code></font></p><p>当我们使用左（外）连接时，如果<code>WHERE</code>子句中包含要求被驱动表的某个列等于<code>NULL</code>值的搜索条件，而且那个列又是不允许存储<code>NULL</code>值的，那么在该表的执行计划的Extra列就会提示<code>Not exists</code>额外信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.key1 <span class="operator">=</span> s2.key1 <span class="keyword">WHERE</span> s2.id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034447.png" alt="image-20220814115302073"></p><p><font color=blue>⑩ <code>Using intersect(…) 、 Using union(…) 和 Using sort_union(…)</code> </font></p><ul><li><p>如果执行计划的<code>Extra</code>列出现了<code>Using intersect(...)</code>提示，说明准备使用<code>Intersect</code>索引 合并的方式执行查询，括号中的<code>...</code>表示需要进行索引合并的索引名称；</p></li><li><p>如果出现了<code>Using union(...)</code>提示，说明准备使用<code>Union</code>索引合并的方式执行查询；</p></li><li><p>如果出现了<code>Using sort_union(...)</code>提示，说明准备使用<code>Sort-Union</code>索引合并的方式执行查询</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">WHERE</span> key1 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">OR</span> key3 <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034777.png" alt="image-20220814115726815"></p><p><font color=blue>⑪ <code>Zero limit</code></font></p><p>当我们的<code>LIMIT</code>子句的参数为<code>0</code>时，表示压根儿不打算从表中读出任何记录，将会提示该额外信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM s1 LIMIT 0;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034392.png" alt="image-20220814115904221"></p><p><font color=blue>⑫ <code>Using filesort</code></font></p><p>很多情况下排序操作无法使用到索引，只能在内存中（记录较少的时候）或者磁盘中（记录较多的时候）进行排序，MySQL把这种在内存中或者磁盘上进行排序的方式统称为**<font color=red>文件排序</font>**（英文名：<code>filesort</code>）。这种情况时比较悲壮的~</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> common_field LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034961.png" alt="image-20220814120453672"></p><p><font color=blue>⑬ <code>Using temporary</code></font></p><p>在许多查询的执行过程中，MySQL可能会借助临时表来完成一些功能，比如&#x3D;&#x3D;去重、排序&#x3D;&#x3D;之类的，比如我们在执行许多包含<code>DISTINCT</code>、<code>GROUP BY</code>、<code>UNION</code>等子句的查询过程中，如果不能有效利用索引来完成查询，MySQL很有可能寻求通过建立内部的临时表来执行查询。如果查询中使用到了内部的临时表，在执行计划的<code>Extra</code>列将会显示<code>Using temporary</code>提示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> common_field <span class="keyword">FROM</span> s1;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> common_field, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> amount <span class="keyword">FROM</span> s1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> common_field;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034987.png" alt="image-20220814121232140"></p><p>执行计划中出现<code>Using temporary</code>并不是一个好的征兆，因为建立与维护临时表要付出很大成本的，所以我们<code>最好能使用索引来替代掉使用临时表</code>。比如：扫描指定的索引idx_key1即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT key1, COUNT(*) AS amount FROM s1 GROUP BY key1;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034664.png" alt="image-20220814121019942"></p><h3 id="6-4-12-小结"><a href="#6-4-12-小结" class="headerlink" title="6.4.12 小结"></a>6.4.12 小结</h3><ul><li>EXPLAIN不考虑各种Cache，只考虑SQL本身</li><li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li><li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况部分统计</li><li>信息是估算的，并非精确值</li></ul><h1 id="7-EXPLAIN-的进一步使用"><a href="#7-EXPLAIN-的进一步使用" class="headerlink" title="7. EXPLAIN 的进一步使用"></a>7. EXPLAIN 的进一步使用</h1><h2 id="7-1-EXPLAIN-四种输出格式"><a href="#7-1-EXPLAIN-四种输出格式" class="headerlink" title="7.1 EXPLAIN 四种输出格式"></a>7.1 EXPLAIN 四种输出格式</h2><p>这里谈谈EXPLAIN的输出格式。EXPLAIN可以输出四种格式： &#x3D;&#x3D;传统格式 ，JSON格式， TREE格式 以及 可视化输出&#x3D;&#x3D;。用户可以根据需要选择适用于自己的格式。</p><h3 id="7-1-1-传统格式"><a href="#7-1-1-传统格式" class="headerlink" title="7.1.1 传统格式"></a>7.1.1 传统格式</h3><p>传统格式简单明了，输出是一个表格形式，概要说明查询计划。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.key1 <span class="operator">=</span> s2.key2 <span class="keyword">WHERE</span> s1.common_field <span class="operator">=</span><span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034257.png" alt="image-20220814131829731"></p><h3 id="7-1-2-JSON-格式"><a href="#7-1-2-JSON-格式" class="headerlink" title="7.1.2 JSON 格式"></a>7.1.2 JSON 格式</h3><p>第1种格式中介绍的<code>EXPLAIN</code>语句输出中缺少了一个衡量执行计划好坏的重要属性–成本。 而JSON格式是四种格式里面输出&#x3D;&#x3D;信息最详尽&#x3D;&#x3D;的格式，里面包含了执行的成本信息。</p><p><strong><font color=red>JSON格式：在EXPLAIN单词和真正的查询语句中间加上<code>FORMAT=JSON</code> </font></strong></p><p>传统格式与json格式的各个字段存在如下表所示的对应关系(mysql5.7官方文档)。<br><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034616.png" alt="image-20220814122734392"></p><p>案例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN FORMAT<span class="operator">=</span>JSON <span class="keyword">SELECT</span> s1.key1, s2.key1 <span class="keyword">FROM</span> s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.key1 <span class="operator">=</span> s2.key1 <span class="keyword">WHERE</span> s2.common_field <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>结果如下，可以看到 json 格式的信息量会更加丰富。尤其是&#x3D;&#x3D;成本信息&#x3D;&#x3D;，是用于衡量一个执行计划的好坏的重要指标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN FORMAT=JSON SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key2 WHERE s1.common_field =&#x27;a&#x27;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">EXPLAIN: &#123;</span><br><span class="line">  &quot;query_block&quot;: &#123;</span><br><span class="line">    &quot;select_id&quot;: 1,</span><br><span class="line">    &quot;cost_info&quot;: &#123;</span><br><span class="line">      &quot;query_cost&quot;: &quot;1360.07&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;nested_loop&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;table&quot;: &#123;</span><br><span class="line">          &quot;table_name&quot;: &quot;s1&quot;,</span><br><span class="line">          &quot;access_type&quot;: &quot;ALL&quot;,</span><br><span class="line">          &quot;possible_keys&quot;: [</span><br><span class="line">            &quot;idx_key1&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;rows_examined_per_scan&quot;: 9895,</span><br><span class="line">          &quot;rows_produced_per_join&quot;: 989,</span><br><span class="line">          &quot;filtered&quot;: &quot;10.00&quot;,</span><br><span class="line">          &quot;cost_info&quot;: &#123;</span><br><span class="line">            &quot;read_cost&quot;: &quot;914.80&quot;,</span><br><span class="line">            &quot;eval_cost&quot;: &quot;98.95&quot;,</span><br><span class="line">            &quot;prefix_cost&quot;: &quot;1013.75&quot;,</span><br><span class="line">            &quot;data_read_per_join&quot;: &quot;1M&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;used_columns&quot;: [</span><br><span class="line">            &quot;id&quot;,</span><br><span class="line">            &quot;key1&quot;,</span><br><span class="line">            &quot;key2&quot;,</span><br><span class="line">            &quot;key3&quot;,</span><br><span class="line">            &quot;key_part1&quot;,</span><br><span class="line">            &quot;key_part2&quot;,</span><br><span class="line">            &quot;key_part3&quot;,</span><br><span class="line">            &quot;common_field&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;attached_condition&quot;: &quot;((`atguigudb1`.`s1`.`common_field` = &#x27;a&#x27;) and (`atguigudb1`.`s1`.`key1` is not null))&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;table&quot;: &#123;</span><br><span class="line">          &quot;table_name&quot;: &quot;s2&quot;,</span><br><span class="line">          &quot;access_type&quot;: &quot;eq_ref&quot;,</span><br><span class="line">          &quot;possible_keys&quot;: [</span><br><span class="line">            &quot;idx_key2&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;key&quot;: &quot;idx_key2&quot;,</span><br><span class="line">          &quot;used_key_parts&quot;: [</span><br><span class="line">            &quot;key2&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;key_length&quot;: &quot;5&quot;,</span><br><span class="line">          &quot;ref&quot;: [</span><br><span class="line">            &quot;atguigudb1.s1.key1&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;rows_examined_per_scan&quot;: 1,</span><br><span class="line">          &quot;rows_produced_per_join&quot;: 989,</span><br><span class="line">          &quot;filtered&quot;: &quot;100.00&quot;,</span><br><span class="line">          &quot;index_condition&quot;: &quot;(cast(`atguigudb1`.`s1`.`key1` as double) = cast(`atguigudb1`.`s2`.`key2` as double))&quot;,</span><br><span class="line">          &quot;cost_info&quot;: &#123;</span><br><span class="line">            &quot;read_cost&quot;: &quot;247.38&quot;,</span><br><span class="line">            &quot;eval_cost&quot;: &quot;98.95&quot;,</span><br><span class="line">            &quot;prefix_cost&quot;: &quot;1360.08&quot;,</span><br><span class="line">            &quot;data_read_per_join&quot;: &quot;1M&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;used_columns&quot;: [</span><br><span class="line">            &quot;id&quot;,</span><br><span class="line">            &quot;key1&quot;,</span><br><span class="line">            &quot;key2&quot;,</span><br><span class="line">            &quot;key3&quot;,</span><br><span class="line">            &quot;key_part1&quot;,</span><br><span class="line">            &quot;key_part2&quot;,</span><br><span class="line">            &quot;key_part3&quot;,</span><br><span class="line">            &quot;common_field&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br></pre></td></tr></table></figure><p>我们使用<code>#</code>后面跟随注释的形式为大家解释了 <code>EXPLAIN FORMAT=JSON</code> 语句的输出内容，但是大家有疑问 <code>cost_info</code>里边的成本看着怪怪的，它们是怎么计算出来的？</p><p>先看 s1 表的 “cost_info”部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;cost_info&quot;: &#123;</span><br><span class="line">&quot;read_cost&quot;: &quot;914.80&quot;,</span><br><span class="line">    &quot;eval_cost&quot;: &quot;98.95&quot;,</span><br><span class="line">    &quot;prefix_cost&quot;: &quot;1013.75&quot;,</span><br><span class="line">    &quot;data_read_per_join&quot;: &quot;1M&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>read_cost</code> 是由下边这两部分组成的：<ul><li><p><code>IO</code>成本</p></li><li><p>检测 <code>rows × (1 - filter) </code>条记录的 <code>CPU </code>成本</p></li></ul></li></ul><blockquote><p>💚 rows和filter都是我们前边介绍执行计划的输出列，在JSON格式的执行计划中，rows相当于rows_examined_per_scan，filtered名称不变</p></blockquote><ul><li><p><code>eval_cost</code>是这样计算的：</p><ul><li>检测 <code>rows × filter</code> 条记录的成本。</li></ul></li><li><p><code>prefix_cost</code>就是单独查询 s1 表的成本，也就是：<code>read_cost + eval_cost</code></p></li><li><p><code>data_read_per_join </code>表示在此次查询中需要读取的数据量。</p></li></ul><p>对于 s2 表的 “cost_info” 部分是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;cost_info&quot;: &#123;</span><br><span class="line">&quot;read_cost&quot;: &quot;247.38&quot;,</span><br><span class="line">    &quot;eval_cost&quot;: &quot;98.95&quot;,</span><br><span class="line">    &quot;prefix_cost&quot;: &quot;1360.08&quot;,</span><br><span class="line">    &quot;data_read_per_join&quot;: &quot;1M&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 s2 表是被驱动表，所以可能被读取多次，这里的 <code>read_cost </code>和 <code>eval_cost </code>是访问多次 s2 表后累加起来的值，大家主要关注里边儿的 <code>prefix_cost </code>的值代表的是整个连接查询预计的成本，也就是单次查询 s1 表和多次查询 s2 表后的成本的和，也就是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">247.38</span> + <span class="number">98.95</span> + <span class="number">1013.75</span> = <span class="number">1360.08</span></span><br></pre></td></tr></table></figure><h3 id="7-1-3-TREE-格式"><a href="#7-1-3-TREE-格式" class="headerlink" title="7.1.3 TREE 格式"></a>7.1.3 TREE 格式</h3><p>TREE 格式是 8.0.16 版本之后引入的新格式，主要根据查询的各个部分之间的关系和各部分的执行顺序 来描述如何查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN FORMAT<span class="operator">=</span>TREE <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.key1 <span class="operator">=</span> s2.key2 <span class="keyword">WHERE</span> s1.common_field <span class="operator">=</span><span class="string">&#x27;a&#x27;</span>\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">EXPLAIN: <span class="operator">-</span><span class="operator">&gt;</span> Nested loop <span class="keyword">inner</span> <span class="keyword">join</span>  (cost<span class="operator">=</span><span class="number">1360.08</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">990</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">Filter</span>: ((s1.common_field <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>) <span class="keyword">and</span> (s1.key1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>))  (cost<span class="operator">=</span><span class="number">1013.75</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">990</span>)</span><br><span class="line">        <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">Table</span> scan <span class="keyword">on</span> s1  (cost<span class="operator">=</span><span class="number">1013.75</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">9895</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> Single<span class="operator">-</span><span class="type">row</span> index lookup <span class="keyword">on</span> s2 <span class="keyword">using</span> idx_key2 (key2<span class="operator">=</span>s1.key1), <span class="keyword">with</span> index <span class="keyword">condition</span>: (<span class="built_in">cast</span>(s1.key1 <span class="keyword">as</span> <span class="keyword">double</span>) <span class="operator">=</span> <span class="built_in">cast</span>(s2.key2 <span class="keyword">as</span> <span class="keyword">double</span>))  (cost<span class="operator">=</span><span class="number">0.25</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="7-1-4-可视化输出"><a href="#7-1-4-可视化输出" class="headerlink" title="7.1.4 可视化输出"></a>7.1.4 可视化输出</h3><p>可视化输出，可以通过 MySQL Workbench 可视化查看 MySQL 的执行计划。通过点击 Workbench 的放大镜图标，即可生成可视化的查询计划</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034098.png"></p><p>上图按从左到右的连接顺序显示表。红色框表示 全表扫描 ，而绿色框表示使用索引查找对于每个表，显示使用的索引。还要注意的是，每个表格的框上方是每个表访问所发现的行数的估计值以及访问该表的成本</p><h2 id="7-2-SHOW-WARNINGS-的使用"><a href="#7-2-SHOW-WARNINGS-的使用" class="headerlink" title="7.2 SHOW WARNINGS 的使用"></a>7.2 SHOW WARNINGS 的使用</h2><p>&#x3D;&#x3D;可以显示数据库真正执行的 SQL&#x3D;&#x3D; ，因为有时候MySQL执行引擎会对我们的SQL进行优化~</p><p><font color=blue>① 先使用 <code>Explain</code>，我们写的 sql 按道理是使用 s1 作为驱动表，s2作为被驱动表</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> s1.key1, s2.key1 <span class="keyword">FROM</span> s1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> s2 <span class="keyword">ON</span> s1.key1 <span class="operator">=</span> s2.key1 <span class="keyword">WHERE</span> s2.common_field <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;<span class="operator">*</span></span><br></pre></td></tr></table></figure><p>但是 执行结果把 s2 作为了驱动表，s1 作为了被驱动表<br><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150034776.png" alt="image-20220814133158223"></p><p>紧接着使用<code>SHOW WARNINGS</code> ，原来执行引擎将<code> LEFT JOIN</code>优化成了 <code>INNER JOIN</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> WARNINGS\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">  Level: Note</span><br><span class="line">   Code: <span class="number">1003</span></span><br><span class="line">Message: <span class="comment">/* select#1 */</span> <span class="keyword">select</span> `atguigudb1`.`s1`.`key1` <span class="keyword">AS</span> `key1`,`atguigudb1`.`s2`.`key1` <span class="keyword">AS</span> `key1` </span><br><span class="line"><span class="keyword">from</span> `atguigudb1`.`s1` </span><br><span class="line"><span class="keyword">join</span> `atguigudb1`.`s2` </span><br><span class="line"><span class="keyword">where</span> ((`atguigudb1`.`s1`.`key1` <span class="operator">=</span> `atguigudb1`.`s2`.`key1`) </span><br><span class="line"><span class="keyword">and</span> (`atguigudb1`.`s2`.`common_field` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>))</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>上面 message 中显示的&#x3D;&#x3D;是数据库优化、重写后真正执行的查询语句&#x3D;&#x3D;。果然它帮我们做了优化</p><p><font color=blue>② 再举一个例子：下面是一个 子查询SQL，应该对应着两个不同的id~</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key2 FROM s2 WHERE common_field = &#x27;a&#x27;);</span><br></pre></td></tr></table></figure><p>但是真正执行后，对应着竟然是相同的id</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150035985.png" alt="image-20220814134557598"></p><p>我们使用<code>SHOW WARNINGS\G;</code>进行分析，发现执行引擎将其优化成了 <strong>多表连接查询</strong>的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW WARNINGS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Warning</span><br><span class="line">   Code: 1739</span><br><span class="line">Message: Cannot use ref access on index &#x27;idx_key1&#x27; due to type or collation conversion on field &#x27;key1&#x27;</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: /* select#1 */ select `atguigudb1`.`s1`.`id` AS `id`,`atguigudb1`.`s1`.`key1` AS `key1`,`atguigudb1`.`s1`.`key2` AS `key2`,`atguigudb1`.`s1`.`key3` AS `key3`,`atguigudb1`.`s1`.`key_part1` AS `key_part1`,`atguigudb1`.`s1`.`key_part2` AS `key_part2`,`atguigudb1`.`s1`.`key_part3` AS `key_part3`,`atguigudb1`.`s1`.`common_field` AS `common_field` </span><br><span class="line">from `atguigudb1`.`s2` </span><br><span class="line">join `atguigudb1`.`s1` </span><br><span class="line">where ((`atguigudb1`.`s2`.`common_field` = &#x27;a&#x27;) </span><br><span class="line">and (cast(`atguigudb1`.`s1`.`key1` as double) = cast(`atguigudb1`.`s2`.`key2` as double)))</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="8-分析优化器执行计划：trace"><a href="#8-分析优化器执行计划：trace" class="headerlink" title="8. 分析优化器执行计划：trace"></a>8. 分析优化器执行计划：trace</h1><p><code>OPTIMIZE_TRACE</code> 是 mysql 5.6 中引入的一个跟踪工具，它可以跟踪优化器做出的各种决策，比如访问表的方法，各种开销计算，各种转换，结果会被记录到 <code>information_schema.optimizer_trace</code>中。</p><p>此功能默认关闭。开启trace，并设置格式为JSON，同时设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;,end_markers_in_json<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size<span class="operator">=</span><span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><p>开启后，可分析如下语句：</p><ul><li>SELECT</li><li>INSERT</li><li>REPLACE</li><li>UPDATE</li><li>DELETE</li><li>EXPLAIN</li><li>SET</li><li>DECLARE</li><li>CASE</li><li>IF</li><li>RETURN</li><li>CALL</li></ul><p>测试：执行如下 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>最后， 查询 information_schema.optimizer_trace 就可以知道 MySQL 是如何执行 SQL 的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line"> <span class="comment">//第1部分：查询语句</span></span><br><span class="line"> QUERY<span class="punctuation">:</span> select * from student where id &lt; <span class="number">10</span></span><br><span class="line"> <span class="comment">//第2部分：QUERY字段对应语句的跟踪信息</span></span><br><span class="line"> TRACE<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;join_preparation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//预备工作</span></span><br><span class="line">    <span class="attr">&quot;select#&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;expanded_query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/* select#1 */ select `student`.`id` AS</span></span><br><span class="line"><span class="string">`id`,`student`.`stuno` AS `stuno`,`student`.`name` AS `name`,`student`.`age` AS</span></span><br><span class="line"><span class="string">`age`,`student`.`classId` AS `classId` from `student` where (`student`.`id` &lt; 10)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="comment">/* join_preparation */</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;join_optimization&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//进行优化</span></span><br><span class="line">    <span class="attr">&quot;select#&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;condition_processing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//条件处理</span></span><br><span class="line">       <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WHERE&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;original_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;transformation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;equality_propagation&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;resulting_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;transformation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;constant_propagation&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;resulting_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;transformation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;trivial_condition_removal&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;resulting_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">     <span class="punctuation">&#125;</span> <span class="comment">/* condition_processing */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;substitute_generated_columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//替换生成的列</span></span><br><span class="line">     <span class="punctuation">&#125;</span> <span class="comment">/* substitute_generated_columns */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;table_dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">//表的依赖关系</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`student`&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;row_may_be_null&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;map_bit&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;depends_on_map_bits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">]</span> <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span> <span class="comment">/* table_dependencies */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ref_optimizer_key_uses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">//使用键</span></span><br><span class="line">     <span class="punctuation">]</span> <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;rows_estimation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">//行判断</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`student`&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;range_analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;table_scan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">3973767</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cost&quot;</span><span class="punctuation">:</span> <span class="number">408558</span></span><br><span class="line">        <span class="punctuation">&#125;</span> <span class="comment">/* table_scan */</span><span class="punctuation">,</span>   <span class="comment">//扫描表</span></span><br><span class="line">         <span class="attr">&quot;potential_range_indexes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">//潜在的范围索引</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;usable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;key_parts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span></span><br><span class="line">          <span class="punctuation">]</span> <span class="comment">/* key_parts */</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">/* potential_range_indexes */</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;setup_range_conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">//设置范围条件</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">/* setup_range_conditions */</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;group_index_range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cause&quot;</span><span class="punctuation">:</span> <span class="string">&quot;not_group_by_or_distinct&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span> <span class="comment">/* group_index_range */</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;skip_scan_range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;potential_skip_scan_indexes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;usable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cause&quot;</span><span class="punctuation">:</span> <span class="string">&quot;query_references_nonkey_column&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span> <span class="comment">/* potential_skip_scan_indexes */</span></span><br><span class="line">        <span class="punctuation">&#125;</span> <span class="comment">/* skip_scan_range */</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;analyzing_range_alternatives&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//分析范围选项</span></span><br><span class="line">          <span class="attr">&quot;range_scan_alternatives&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">             <span class="string">&quot;id &lt; 10&quot;</span></span><br><span class="line">           <span class="punctuation">]</span> <span class="comment">/* ranges */</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index_dives_for_eq_ranges&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;rowid_ordered&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;using_mrr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index_only&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cost&quot;</span><span class="punctuation">:</span> <span class="number">1.91986</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span> <span class="comment">/* range_scan_alternatives */</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzing_roworder_intersect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;usable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cause&quot;</span><span class="punctuation">:</span> <span class="string">&quot;too_few_roworder_scans&quot;</span></span><br><span class="line">         <span class="punctuation">&#125;</span> <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">        <span class="punctuation">&#125;</span> <span class="comment">/* analyzing_range_alternatives */</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;chosen_range_access_summary&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>   <span class="comment">//选择范围访问摘要</span></span><br><span class="line">          <span class="attr">&quot;range_access_plan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;range_scan&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;id &lt; 10&quot;</span></span><br><span class="line">          <span class="punctuation">]</span> <span class="comment">/* ranges */</span></span><br><span class="line">         <span class="punctuation">&#125;</span> <span class="comment">/* range_access_plan */</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;rows_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cost_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">1.91986</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span> <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">       <span class="punctuation">&#125;</span> <span class="comment">/* range_analysis */</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span> <span class="comment">/* rows_estimation */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;considered_execution_plans&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//考虑执行计划</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;plan_prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="punctuation">]</span> <span class="comment">/* plan_prefix */</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`student`&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;best_access_path&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//最佳访问路径</span></span><br><span class="line">         <span class="attr">&quot;considered_access_paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;rows_to_scan&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;access_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;range&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;range_details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;used_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span> <span class="comment">/* range_details */</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;resulting_rows&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cost&quot;</span><span class="punctuation">:</span> <span class="number">2.81986</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">/* considered_access_paths */</span></span><br><span class="line">       <span class="punctuation">&#125;</span> <span class="comment">/* best_access_path */</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;condition_filtering_pct&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span>  <span class="comment">//行过滤百分比</span></span><br><span class="line">        <span class="attr">&quot;rows_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cost_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">2.81986</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span> <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;attaching_conditions_to_tables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//将条件附加到表上</span></span><br><span class="line">       <span class="attr">&quot;original_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;attached_conditions_computation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">]</span> <span class="comment">/* attached_conditions_computation */</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;attached_conditions_summary&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//附加条件概要</span></span><br><span class="line">       <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`student`&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;attached&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span> <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">     <span class="punctuation">&#125;</span> <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;finalizing_table_conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`student`&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;original_table_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;final_table_condition  &quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`student`.`id` &lt; 10)&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span> <span class="comment">/* finalizing_table_conditions */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;refine_plan&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">//精简计划</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`student`&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">]</span> <span class="comment">/* refine_plan */</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="comment">/* join_optimization */</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;join_execution&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>   <span class="comment">//执行</span></span><br><span class="line">    <span class="attr">&quot;select#&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="comment">/* join_execution */</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//第3部分：跟踪信息过长时，被截断的跟踪信息的字节数。</span></span><br><span class="line">MISSING_BYTES_BEYOND_MAX_MEM_SIZE<span class="punctuation">:</span> <span class="number">0</span>  <span class="comment">//丢失的超出最大容量的字节</span></span><br><span class="line"><span class="comment">//第4部分：执行跟踪语句的用户是否有查看对象的权限。当不具有权限时，该列信息为1且TRACE字段为空，一般在</span></span><br><span class="line">调用带有SQL SECURITY DEFINER的视图或者是存储过程的情况下，会出现此问题。</span><br><span class="line">INSUFFICIENT_PRIVILEGES<span class="punctuation">:</span> <span class="number">0</span>  <span class="comment">//缺失权限</span></span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="9-MySQL-监控分析视图-sys-schema"><a href="#9-MySQL-监控分析视图-sys-schema" class="headerlink" title="9. MySQL 监控分析视图 sys schema"></a>9. MySQL 监控分析视图 sys schema</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150035027.png" alt="image-20220814140207739"></p><h2 id="9-1-Sys-schema视图摘要"><a href="#9-1-Sys-schema视图摘要" class="headerlink" title="9.1 Sys schema视图摘要"></a>9.1 Sys schema视图摘要</h2><ol><li>主机相关：以 host_summary 开头，主要汇总了 IO 延迟的信息。</li><li>Innodb 相关：以 innodb 开头，汇总了 innodb buffer 信息和事务等待 innodb 锁的信息。</li><li>I&#x2F;O相关：以 IO 开头，汇总了等待 I&#x2F;O、I&#x2F;O 使用量情况。</li><li>内存使用情况：以 memory 开头，从主机、线程、事件等角度展示内存的使用情况</li><li>连接与会话信息：processlist 和 session 相关视图，总结了会话相关信息。</li><li>表相关：以 schema_table 开头的视图，展示了表的统计信息。</li><li>索引信息：统计了索引的使用情况，包含冗余索引和未使用的索引情况。</li><li>语句相关：以 statement 开头，包含执行全表扫描、使用临时表、排序等的语句信息。</li><li>用户相关：以 user 开头的视图，统计了用户使用的文件 I&#x2F;O、执行语句统计信息。</li><li>等待事件相关信息：以 wait 开头，展示等待事件的延迟情况。</li></ol><h2 id="9-2-Sys-schema视图使用场景"><a href="#9-2-Sys-schema视图使用场景" class="headerlink" title="9.2 Sys schema视图使用场景"></a>9.2 Sys schema视图使用场景</h2><p><strong><font color=blue>1. 索引情况</font></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1. 查询冗余索引</span><br><span class="line">select * from sys.schema_redundant_indexes;</span><br><span class="line"></span><br><span class="line">#2. 查询未使用过的索引</span><br><span class="line">select * from sys.schema_unused_indexes;</span><br><span class="line"></span><br><span class="line">#3. 查询索引的使用情况</span><br><span class="line">select index_name,rows_selected,rows_inserted,rows_updated,rows_deleted</span><br><span class="line">from sys.schema_index_statistics where table_schema=&#x27;dbname&#x27;;</span><br></pre></td></tr></table></figure><p>举例：比如我们查看下数据的的冗余索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sys.schema_redundant_indexes;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150035832.png" alt="image-20220814141233022"></p><p>我们任意选择一条，比如最后一条，然后查看下student_info的索引情况，看看是否<code>idx_cre_time</code>冗余了</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150035664.png" alt="image-20220814141532332"></p><p>可以 看到 <code>idx_cre_time</code>和<code>idx_cre_time_sid</code>两个索引中都有 <code>create_time</code>。而且联合索引性能要高于单列索引，所以<code>idx_cre_time </code>完全可以删掉~</p><p><strong><font color=blue>2. 表相关</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 查询表的访问量</span><br><span class="line"><span class="keyword">select</span> table_schema,table_name,<span class="built_in">sum</span>(io_read_requests<span class="operator">+</span>io_write_requests) <span class="keyword">as</span> io <span class="keyword">from</span> sys.schema_table_statistics <span class="keyword">group</span> <span class="keyword">by</span> table_schema,table_name <span class="keyword">order</span> <span class="keyword">by</span> io <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 查询占用bufferpool较多的表</span><br><span class="line"><span class="keyword">select</span> object_schema,object_name,allocated,data</span><br><span class="line"><span class="keyword">from</span> sys.innodb_buffer_stats_by_table <span class="keyword">order</span> <span class="keyword">by</span> allocated limit <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 查看表的全表扫描情况</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.statements_with_full_table_scans <span class="keyword">where</span> db<span class="operator">=</span><span class="string">&#x27;dbname&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例如：查询表的访问量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查询表的访问量</span><br><span class="line">select table_schema,table_name,sum(io_read_requests+io_write_requests) as io from sys.schema_table_statistics group by table_schema,table_name order by io desc;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208150035051.png" alt="image-20220814142303829"></p><p><strong><font color=blue>3. 语句相关</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span> 监控<span class="keyword">SQL</span>执行的频率</span><br><span class="line"><span class="keyword">select</span> db,exec_count,query <span class="keyword">from</span> sys.statement_analysis</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> exec_count <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span> 监控使用了排序的<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">select</span> db,exec_count,first_seen,last_seen,query</span><br><span class="line"><span class="keyword">from</span> sys.statements_with_sorting limit <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span> 监控使用了临时表或者磁盘临时表的<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">select</span> db,exec_count,tmp_tables,tmp_disk_tables,query</span><br><span class="line"><span class="keyword">from</span> sys.statement_analysis <span class="keyword">where</span> tmp_tables<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">or</span> tmp_disk_tables <span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> (tmp_tables<span class="operator">+</span>tmp_disk_tables) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>4. IO相关</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查看消耗磁盘IO的文件</span><br><span class="line"><span class="keyword">select</span> file,avg_read,avg_write,avg_read<span class="operator">+</span>avg_write <span class="keyword">as</span> avg_io</span><br><span class="line"><span class="keyword">from</span> sys.io_global_by_file_by_bytes <span class="keyword">order</span> <span class="keyword">by</span> avg_read  limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>5. InnoDB相关</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#行锁阻塞情况</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.innodb_lock_waits;</span><br></pre></td></tr></table></figure><blockquote><p><strong><font color=red>风险提示：</font></strong></p><p>通过sys库去查询时，MySQL会&#x3D;&#x3D;消耗大量资源&#x3D;&#x3D;去收集相关信息，严重的可能会导致业务请求被阻塞，从而引起故障。建议生产上&#x3D;&#x3D;不要频繁&#x3D;&#x3D;的去查询sys或者<code>performance_ schema</code>、 <code>information_ schema</code>来完成监控、巡检等工作。</p></blockquote><h1 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h1><p>查询时数据库中最频繁的操作，提高查询速度可以有效地提高MySQL数据库的性能。通过对查询语句的分析可以了解查询语句的执行情况，找出查询语句执行的瓶颈，从而优化查询语句！</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、索引优化与查询优化</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC08%E7%AB%A0_%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B8%8E%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC08%E7%AB%A0_%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B8%8E%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>都有哪些纬度可以进行数据库调优？简言之：</p><ul><li>索引失效、没有充分利用所以——<strong>索引建立</strong></li><li>关联查询太多 JOIN（设计缺陷或不得已的需求）——<strong>SQL 优化</strong></li><li>服务器调优及各个参数设置（缓冲、 线程数）——<strong>调整 my.cnf</strong></li><li>数据过多——<strong>分库分表</strong></li></ul><p>关于数据库调优的知识点非常分散，不同 DBMS，不同的公司，不同的职位，不同的项目遇到的问题都不尽相同。</p><p>虽然 SQL 查询优化的技术很多，但是大体方向上完全可以分为 <code>物理查询优化</code> 和 <code>逻辑查询优化</code> 两大块。</p><ul><li>物理查询优化是通过 <code>索引</code> 和 <code>表连接方式</code> 等技术来进行优化，这里重点需要掌握索引的使用</li><li>逻辑查询优化就是通过 SQL <code>等价变换</code> 提升查询效率，直白一点来讲就是，换一种执行效率更高的查询写法</li></ul><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h2><p>学员表插50万条， 班级表插1万条。</p><p><strong><font color=blue>步骤1：建表</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#班级表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `class` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`className` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`monitor` <span class="type">INT</span> <span class="keyword">NULL</span> ,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line">#学员表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`stuno` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`age` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`classId` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">#<span class="keyword">CONSTRAINT</span> `fk_class_id` <span class="keyword">FOREIGN</span> KEY (`classId`) <span class="keyword">REFERENCES</span> `t_class` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤2：设置参数</font></strong></p><p>命令开启：允许创建函数设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators<span class="operator">=</span><span class="number">1</span>;   </span><br><span class="line"># 不加<span class="keyword">global</span>只是当前窗口有效。</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤3：创建函数</font></strong></p><p>随机产生字符串，保证每条数据都不同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#随机产生字符串</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string(n <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line"><span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span></span><br><span class="line"><span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> n DO </span><br><span class="line"><span class="keyword">SET</span> return_str <span class="operator">=</span>CONCAT(return_str,<span class="built_in">SUBSTRING</span>(chars_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>)); </span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#假如要删除</span><br><span class="line">#<span class="keyword">drop</span> <span class="keyword">function</span> rand_string;</span><br></pre></td></tr></table></figure><p>随机产生班级编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#用于随机产生多少到多少的编号</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_num (from_num <span class="type">INT</span> ,to_num <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(from_num <span class="operator">+</span>RAND()<span class="operator">*</span>(to_num <span class="operator">-</span> from_num<span class="operator">+</span><span class="number">1</span>))  ;</span><br><span class="line"><span class="keyword">RETURN</span> i; </span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#假如要删除</span><br><span class="line">#<span class="keyword">drop</span> <span class="keyword">function</span> rand_num;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤4：创建存储过程</font></strong></p><p>创建往stu表中插入数据的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#创建往stu表中插入数据的存储过程</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_stu(  <span class="keyword">START</span> <span class="type">INT</span> , max_num <span class="type">INT</span> )</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   #设置手动提交事务</span><br><span class="line">REPEAT  #循环</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;  #赋值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (stuno, name ,age ,classId ) <span class="keyword">VALUES</span></span><br><span class="line">((<span class="keyword">START</span><span class="operator">+</span>i),rand_string(<span class="number">6</span>),rand_num(<span class="number">1</span>,<span class="number">50</span>),rand_num(<span class="number">1</span>,<span class="number">1000</span>)); </span><br><span class="line">UNTIL i <span class="operator">=</span> max_num </span><br><span class="line"><span class="keyword">END</span> REPEAT; </span><br><span class="line"><span class="keyword">COMMIT</span>;  #提交事务</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#假如要删除</span><br><span class="line">#<span class="keyword">drop</span> <span class="keyword">PROCEDURE</span> insert_stu;</span><br></pre></td></tr></table></figure><p>创建往class表中插入数据的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#执行存储过程，往class表添加随机数据</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> `insert_class`( max_num <span class="type">INT</span> )</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">REPEAT </span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class ( classname,address,monitor ) <span class="keyword">VALUES</span></span><br><span class="line">(rand_string(<span class="number">8</span>),rand_string(<span class="number">10</span>),rand_num(<span class="number">1</span>,<span class="number">100000</span>)); </span><br><span class="line">UNTIL i <span class="operator">=</span> max_num </span><br><span class="line"><span class="keyword">END</span> REPEAT; </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#假如要删除</span><br><span class="line">#<span class="keyword">drop</span> <span class="keyword">PROCEDURE</span> insert_class;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤5：调用存储过程</font></strong></p><p>往class表添加1万条数据 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#执行存储过程，往class表添加<span class="number">1</span>万条数据 </span><br><span class="line"><span class="keyword">CALL</span> insert_class(<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p>往stu表添加50万条数据,这个时间会稍微有点长，请耐心等待哟~</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#执行存储过程，往stu表添加<span class="number">80</span>万条数据 </span><br><span class="line"><span class="keyword">CALL</span> insert_stu(<span class="number">100000</span>,<span class="number">800000</span>);</span><br></pre></td></tr></table></figure><p>查询下数据是否插入成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> class;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>步骤6：删除某表上的索引</font></strong></p><p>创建删除索引存储过程。这是为了方便我们的学习，因为我们在演示某个索引的效果时，可能需要删除其它索引，如果需要一个个手工删除，就太费劲了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> `proc_drop_index`(dbname <span class="type">VARCHAR</span>(<span class="number">200</span>),tablename <span class="type">VARCHAR</span>(<span class="number">200</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DECLARE</span> done <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> ct <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> _index <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   <span class="keyword">DECLARE</span> _cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span>  <span class="keyword">SELECT</span>  index_name  <span class="keyword">FROM</span></span><br><span class="line">information_schema.STATISTICS  <span class="keyword">WHERE</span> table_schema<span class="operator">=</span>dbname <span class="keyword">AND</span> table_name<span class="operator">=</span>tablename <span class="keyword">AND</span></span><br><span class="line">seq_in_index<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span>  index_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;PRIMARY&#x27;</span> ;</span><br><span class="line">#每个游标必须使用不同的<span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">not</span> found <span class="keyword">set</span> done<span class="operator">=</span><span class="number">1</span>来控制游标的结束</span><br><span class="line">   <span class="keyword">DECLARE</span>  CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">set</span> done<span class="operator">=</span><span class="number">2</span> ;   </span><br><span class="line">#若没有数据返回,程序继续,并将变量done设为<span class="number">2</span></span><br><span class="line">    <span class="keyword">OPEN</span> _cur;</span><br><span class="line">    <span class="keyword">FETCH</span> _cur <span class="keyword">INTO</span> _index;</span><br><span class="line">    WHILE _index<span class="operator">&lt;&gt;</span><span class="string">&#x27;&#x27;</span> DO</span><br><span class="line">       <span class="keyword">SET</span> <span class="variable">@str</span> <span class="operator">=</span> CONCAT(&quot;drop index &quot; , _index , &quot; on &quot; , tablename );</span><br><span class="line">       <span class="keyword">PREPARE</span> sql_str <span class="keyword">FROM</span> <span class="variable">@str</span> ;</span><br><span class="line">       <span class="keyword">EXECUTE</span> sql_str;</span><br><span class="line">       <span class="keyword">DEALLOCATE</span> <span class="keyword">PREPARE</span> sql_str;</span><br><span class="line">       <span class="keyword">SET</span> _index<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       <span class="keyword">FETCH</span> _cur <span class="keyword">INTO</span> _index;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"> <span class="keyword">CLOSE</span> _cur;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>执行存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> proc_drop_index(&quot;dbname&quot;,&quot;tablename&quot;);</span><br></pre></td></tr></table></figure><h2 id="2-索引失效案例"><a href="#2-索引失效案例" class="headerlink" title="2. 索引失效案例"></a>2. 索引失效案例</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301613943.png" alt="image-20220816104223377"></p><h3 id="2-1-全值匹配我最爱"><a href="#2-1-全值匹配我最爱" class="headerlink" title="2.1 全值匹配我最爱"></a>2.1 全值匹配我最爱</h3><p><strong><font color=red>全值匹配可以充分的利用组合索引~</font></strong> </p><p>系统中经常出现的sql语句如下，当没有建立索引时，<code>possible_keys</code>和<code>key</code>都为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># SQL_NO_CACHE表示不使用查询缓存。</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> NAME <span class="operator">=</span> <span class="string">&#x27;abcd&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此时执行SQL，数据查询速度会比较慢，耗时0.12s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> NAME <span class="operator">=</span> <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.12</span> sec)</span><br></pre></td></tr></table></figure><p>接下来我们建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_age <span class="keyword">ON</span> student(age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_classid <span class="keyword">ON</span> student(age,classId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_classid_name <span class="keyword">ON</span> student(age,classId,NAME);</span><br></pre></td></tr></table></figure><blockquote><p>💌Q &#x3D;&#x3D;上面三个索引有什么区别，为什么这么建立索引？&#x3D;&#x3D;<br>上面建立索引是与三条sql的使用场景对应的，遵守了全值匹配的规则，就是说建立几个复合索引字段，最好就用上几个字段。且按照顺序来用。</p></blockquote><p>建立索引后执行，发现使用到了联合索引，且耗时较短 0.00s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> NAME <span class="operator">=</span> <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+----------------------------------------------+----------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys                                <span class="operator">|</span> key                  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>               <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+----------------------------------------------+----------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> student <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_age,idx_age_classid,idx_age_classid_name <span class="operator">|</span> idx_age_classid_name <span class="operator">|</span> <span class="number">73</span>      <span class="operator">|</span> const,const,const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+----------------------------------------------+----------------------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> NAME <span class="operator">=</span> <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>上面的索引可能不生效哦，在数据量较大的情况下，我们进行全值匹配<code>SELECT *</code>，优化器可能经过计算发现，我们使用索引查询所有的数据后，还需要对查找到的数据进行回表操作，性能还不如全表扫描。这里我们没有造这么多数据，所以就不演示效果咯。</p><h3 id="2-2-最左匹配原则"><a href="#2-2-最左匹配原则" class="headerlink" title="2.2 最左匹配原则"></a>2.2 最左匹配原则</h3><p>在 MySQL 建立联合索引时会遵守最佳左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p><p><strong><font color=blue>1. 下面的SQL将使用索引idx_age</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> student.name<span class="operator">=</span><span class="string">&#x27;abcd&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>2. 下面的sql不会使用索引，因为我没有创建classId或者name的索引</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> student.name<span class="operator">=</span><span class="string">&#x27;abcd&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Q:为什么不会使用idx_age_classid索引？<br>索引idx_age_classid的B+树会先使用age排序，在使用classId给age相同的数据排序，这个索引根本用不上哟。这就是下面的最左前缀原则。</p></blockquote><p><strong><font color=blue>3.下面的sql查询就是遵守这一原则的正确打开方式</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> student.classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> student.name<span class="operator">=</span><span class="string">&#x27;abcd&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=blue>4. 思考：下面sql会不会使用索引呢？</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.classId<span class="operator">=</span><span class="number">4</span> <span class="keyword">AND</span> student.age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> student.name<span class="operator">=</span><span class="string">&#x27;abcd&#x27;</span>;</span><br></pre></td></tr></table></figure><p>答案是会！因为优化器会执行优化的哦，会调整查询条件的顺序。不过在开发过程中我们还是要保持良好的开发习惯哟。</p><p><strong><font color=blue>5. 思考：删去索引<code>idx_age_classid</code>和<code>idx_age</code>,只保留<code>idx_age_classid_name</code>，执行如下sql，会不会使用索引？</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span>  student.age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> student.name<span class="operator">=</span><span class="string">&#x27;abcd&#x27;</span>;</span><br></pre></td></tr></table></figure><p>答案是会，但是只会用一部分。看看执行结果</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301613171.png" alt="image-20220824161042002"></p><p>使用了idx_age_classid_name，但是key_len是5，也就是说只使用了age部分的排序，因为age是int类型，4个字节加上null值列表一共5个字节哦。想想就知道，B+树是先按照age排序，再按照classid排序，最后按照name排序，因此不能跳过classId的排序直接就使用name的排序哦。</p><p>结论：MySQL 可以为多个字段创建索引，一个索引可以包括 16 个字段，对于多列字段，**<font color=red>过滤条件要使用索引那必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法使用</font>**。如果查询条件中没有使用这些字段中的第一个字段时，多列索引不会被使用。</p><blockquote><p><strong>拓展:Alibaba《Java开发手册》</strong></p><p>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></blockquote><h3 id="2-3-主键插入顺序"><a href="#2-3-主键插入顺序" class="headerlink" title="2.3 主键插入顺序"></a>2.3 主键插入顺序</h3><p>对于一个使用 InnoDB 存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在 <code>聚簇索引</code> 的叶子节点的。而记录又是存储在数据页中，数据页和记录又是按照 <code>记录主键值从小到大</code> 的顺序进行排序，所以如果我们 <code>插入</code> 的记录的 <code>主键是依次增大</code> 的话，那我们每插满一个数据页就换到下一个数据页继续插，而如果我们插入的 <code>主键值忽大忽小</code> 的话，就比较麻烦了，假设某个数据页存储的记录已经满了，它存储的主键值在 1~100 之间：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301613083.png" alt="image-20220824161409652"></p><p>如果此时再插入一条主键值为 <code>9</code> 的记录，那它插入的位置就如下图:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301613098.png" alt="image-20220824161420173"></p><p>可这个数据页已经满了，再插进来咋办呢?我们需要把当前 <code>页面分裂</code> 成两个页面，把本页中的一些记录移动到新创建的这个页中。页面分裂和记录移位意味着什么？意味着：<code>性能损耗</code>！所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的 <code>主键值依次递增</code> ，这样就不会发生这样的性能损耗了。 所以我们建议：让主键具有 <code>AUTO_INCREMENT</code> ，让存储引擎自己为表生成主键，而不是我们手动插入，比如<code>person_info</code>表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301613122.png" alt="image-20220824161706495"></p><p>我们自定义的主键列 <code>id</code> 拥有 <code>AUTO_INCREMENT</code> 属性，在插入记录时存储引擎会自动为我们填入自增的主键值。这样的主键占用空间小，顺序写入，减少页分裂。</p><blockquote><p>🎀Tips：<br>我们一般将主键策略设置为自动递增<code>AUTO_INCREMENT</code>哦！(核心业务表除外，后面会介绍这种情况)</p></blockquote><h3 id="2-4-计算、函数、类型转换（自动或手动）导致索引失效"><a href="#2-4-计算、函数、类型转换（自动或手动）导致索引失效" class="headerlink" title="2.4 计算、函数、类型转换（自动或手动）导致索引失效"></a>2.4 计算、函数、类型转换（自动或手动）导致索引失效</h3><p><strong><font color=blue>举例1：当使用函数时</font></strong></p><ol><li>这两条 sql 哪种写法更好？</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 此语句比下一条要好！（能够使用上索引）</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.name <span class="keyword">LIKE</span> <span class="string">&#x27;abc%&#x27;</span>;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">LEFT</span>(student.name,<span class="number">3</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>; </span><br></pre></td></tr></table></figure><ol start="2"><li>创建索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> student(NAME); </span><br></pre></td></tr></table></figure><ol start="3"><li>第一种：索引优化生效</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.name <span class="keyword">LIKE</span> <span class="string">&#x27;abc%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> student <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> idx_name      <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">63</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">22</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.name <span class="keyword">LIKE</span> <span class="string">&#x27;abc%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+--------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> stuno  <span class="operator">|</span> name   <span class="operator">|</span> age  <span class="operator">|</span> classId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+--------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4290221</span> <span class="operator">|</span> <span class="number">247516</span> <span class="operator">|</span> aBCiho <span class="operator">|</span>   <span class="number">48</span> <span class="operator">|</span>     <span class="number">936</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ......  <span class="operator">|</span>          ........ <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4243832</span> <span class="operator">|</span> <span class="number">201127</span> <span class="operator">|</span> ABcIkb <span class="operator">|</span>   <span class="number">26</span> <span class="operator">|</span>     <span class="number">483</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+--------+------+---------+</span></span><br><span class="line"><span class="number">22</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="4"><li>第二种：索引优化失效</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">LEFT</span>(student.name,<span class="number">3</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> student <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">499907</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">LEFT</span>(student.name,<span class="number">3</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p>type 为“ALL”，表示没有使用到索引，查询时间为 0.21 秒，查询效率较之前低很多</p><p><strong><font color=blue>举例2：当条件有计算时</font></strong></p><ol><li>student表的字段stuno上设置有索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_sno <span class="keyword">ON</span> student(stuno);</span><br></pre></td></tr></table></figure><ol start="2"><li>索引优化失效</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE id, stuno, NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> <span class="number">900001</span>; </span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301613370.png" alt="image-20220824165532304"></p><p>可以看到如果对索引进行了表达式计算，索引就失效了。这是因为我们需要把索引字段的值都取出来，然后一次进行表达式的计算来进行条件判断，因此采用的就是<code>全表扫描</code> 的方式，运行时间也会慢很多。</p><ol start="3"><li>去掉上面SQL的计算，索引优化生效：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE id, stuno, NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> stuno <span class="operator">=</span> <span class="number">900000</span>; </span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614089.png" alt="image-20220824165631933"></p><p> <strong><font color=blue>举例3：类型转换导致索引失效</font></strong></p><p>下列哪个SQL语句可以用到索引（假设name字段上设置有索引）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 未使用到索引</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="number">123</span>;</span><br><span class="line"># 使用到索引</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>name = 123</code> 发生类型转换，相当于使用了隐形 函数，索引失效</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614546.png" alt="image-20220824170121497"></p><blockquote><p>结论：设计实体类属性时，一定要与数据库字段类型相对应。否则，就会出现类型转换的情况</p></blockquote><h3 id="2-5-范围条件右边的列索引失效"><a href="#2-5-范围条件右边的列索引失效" class="headerlink" title="2.5 范围条件右边的列索引失效"></a>2.5 范围条件右边的列索引失效</h3><p>环境准备：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除student表上的所有索引</span><br><span class="line"><span class="keyword">CALL</span> proc_drop_index(<span class="string">&#x27;atguigudb2&#x27;</span>,<span class="string">&#x27;student&#x27;</span>);</span><br><span class="line"># 创建age、classId、NAME的联合索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_classId_name <span class="keyword">ON</span> student(age,classId,NAME);</span><br></pre></td></tr></table></figure><p><strong><font color=blue>1. 如果系统经常出现的sql如下，那么索引 idx_age_classId_name 这个索引还能正常使用么？</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> student.age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> student.classId<span class="operator">&gt;</span><span class="number">20</span> <span class="keyword">AND</span> student.name <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614793.png" alt="image-20220824174623086"></p><p>不能，&#x3D;&#x3D;范围右边的列不能使用&#x3D;&#x3D;。比如 &lt;、&lt;&#x3D;、&gt;、&gt;&#x3D; 和 between 等</p><p>有同学会好奇，我改变下<code>WHERE</code>后面字段的顺序呢，是否可以使用呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> student.age<span class="operator">=</span><span class="number">30</span> <span class="keyword">AND</span> student.name <span class="operator">=</span><span class="string">&#x27;abc&#x27;</span> <span class="keyword">AND</span> student.classId<span class="operator">&gt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>答案也是不能<del>，因为 &#x3D;&#x3D;优化器会自动帮你满足最左前缀原则&#x3D;&#x3D; ，即优化器会 先根据联合索引进行排序 ，联合索引的顺序才能决定</del></p><blockquote><p><strong>解释一下为什么范围查询会导致索引失效：</strong><br>因为根据范围查找筛选后的数据，无法保证范围查找后面的字段是有序的。</p><p>例如：a_b_c这个索引，你根据b范围查找&gt;2的，在满足b&gt;2的情况下，如b：3,4，c可能是5,3、因为c无序，那么c的索引便失效了</p></blockquote><p><strong><font color=blue>2. 改进</font></strong></p><p>可以建立如下索引（范围字段放在最后）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_age_name_classid <span class="keyword">on</span> student(age,name,classid); </span><br></pre></td></tr></table></figure><p>进行验证，可以看到联合索引所有的列都用上了</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614217.png" alt="image-20220824174830572"></p><blockquote><p>应用开发中范围查询，例如：金额查询，日期查询往往都是范围查询。应将查询条件放置where语句最后。（创建的联合索引中，&#x3D;&#x3D;务必把范围设计到的字段写在最后&#x3D;&#x3D;）</p></blockquote><h3 id="2-6-不等于（-或者-）索引失效"><a href="#2-6-不等于（-或者-）索引失效" class="headerlink" title="2.6 不等于（!&#x3D; 或者 &lt;&gt;）索引失效"></a>2.6 不等于（!&#x3D; 或者 &lt;&gt;）索引失效</h3><ul><li>为name字段创建索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> student(NAME);</span><br></pre></td></tr></table></figure><ul><li>查看索引是否失效</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.name <span class="operator">&lt;&gt;</span> <span class="string">&#x27;abc&#x27;</span> ;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> student.name <span class="operator">!=</span> <span class="string">&#x27;abc&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614465.png" alt="image-20220824182716862"></p><h3 id="2-7-is-null可以使用索引，is-not-null无法使用索引"><a href="#2-7-is-null可以使用索引，is-not-null无法使用索引" class="headerlink" title="2.7 is null可以使用索引，is not null无法使用索引"></a>2.7 is null可以使用索引，is not null无法使用索引</h3><ul><li>IS NULL：可以触发索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614009.png" alt="image-20220824182818489"></p><ul><li>IS NOT NULL：无法触发索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614481.png" alt="image-20220824182851982"></p><blockquote><p>结论：最好在设计数据库的时候就将 <code>字段设置为 NOT NULL 约束</code>。比如可以将 INT 类型的字段，默认设置为 0。将字符串的默认值设置为空字符串（“”）。</p><p>扩展：同理，在查询中使用 <code>not like</code> 也无法使用索引，导致全表扫描</p></blockquote><h3 id="2-8-like-以通配符-开头索引失效"><a href="#2-8-like-以通配符-开头索引失效" class="headerlink" title="2.8 like 以通配符 % 开头索引失效"></a>2.8 like 以通配符 % 开头索引失效</h3><p>在使用 LIKE 关键字进行查询的查询语句中，如果匹配字符串的第一个字符为“%”，索引就不会其作用。只有“%”不在第一个位置，索引才会起作用。</p><ul><li>使用到索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;ab%&#x27;</span>; </span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614010.png" alt="image-20220824183323044"></p><ul><li>未使用到索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%ab%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614737.png" alt="image-20220824183400615"></p><blockquote><p><strong>拓展：Alibaba《Java 开发手册》</strong></p><p>【强制】页面搜索&#x3D;&#x3D;严禁左模糊或者全模糊&#x3D;&#x3D;，如果需要请走搜索引擎来解决。</p></blockquote><h3 id="2-9-OR-前后存在非索引的列，索引失效"><a href="#2-9-OR-前后存在非索引的列，索引失效" class="headerlink" title="2.9 OR 前后存在非索引的列，索引失效"></a>2.9 OR 前后存在非索引的列，索引失效</h3><p>在WHERE 子句中，如果在 OR 前的条件列进行了索引，而在 OR 后的条件列没有进行索引，那么索引会失效。也就是说，&#x3D;&#x3D;OR 前后的两个条件中的列都是索引时，查询中才使用索引&#x3D;&#x3D;。</p><p>因为 OR 的含义就是两个只要满足一个即可，因此 &#x3D;&#x3D;只有一个条件列进行了索引是没有意义的&#x3D;&#x3D;，只要有条件列没有进行索引，就会进行&#x3D;&#x3D;全表扫描&#x3D;&#x3D;，因此索引的条件列也会失效。</p><p>查询语句使用 OR 关键字的情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引（只有<span class="keyword">OR</span>前面的字段有索引）</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age <span class="keyword">ON</span> student(age);</span><br><span class="line"># 未使用到索引</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> classid <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614874.png" alt="image-20220824183640699"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 再为<span class="keyword">OR</span>后面的字段创建一个索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_cid <span class="keyword">ON</span> student(classid);</span><br><span class="line"># 使用到索引</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> classid <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614428.png" alt="image-20220824184608531"></p><blockquote><p>解释下 OR 前后存在非索引的列，索引失效</p><p>因为 OR前后一个使用索引，一个进行全表扫描，还没有直接进行全表扫描更快~</p></blockquote><h3 id="2-10-数据库和表的字符集统一使用utf8mb4-utf8mb3"><a href="#2-10-数据库和表的字符集统一使用utf8mb4-utf8mb3" class="headerlink" title="2.10 数据库和表的字符集统一使用utf8mb4&#x2F;utf8mb3"></a>2.10 数据库和表的字符集统一使用utf8mb4&#x2F;utf8mb3</h3><p>统一使用 utf8mb4（5.5.3版本以上支持）兼容性更好，统一字符集可以避免由于字符集转换产生的乱码。不同的 <code>字符集</code> 进行比较前需要进行 <code>转换</code> 会造成索引失效。</p><h3 id="2-11-练习及一般性建议"><a href="#2-11-练习及一般性建议" class="headerlink" title="2.11 练习及一般性建议"></a>2.11 练习及一般性建议</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614388.png"></p><p><strong>一般性建议：</strong></p><ul><li>对于单列索引，尽量选择针对当前 query 过滤性更好的索引</li><li>在选择组合索引的时候，当前 query 中过滤性最好的字段在索引字段顺序中，位置越靠前越好</li><li>在选择组合索引的时候，尽量选择能够包含当前 query 中的 where 子句中更多字段的索引</li><li>在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面。</li></ul><p>总之，书写 SQL 语句时，尽量避免造成索引失效的情况。</p><h2 id="3-关联查询优化"><a href="#3-关联查询优化" class="headerlink" title="3. 关联查询优化"></a>3. 关联查询优化</h2><h3 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h3><p>创建Type表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `type` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建book表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `book` (</span><br><span class="line">`bookid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`bookid`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在type表中执行20次如下数据，插入20条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TYPE(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">20</span>));</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>同样的，在book表中插入20条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(card) <span class="keyword">VALUES</span>(<span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">20</span>));</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><h3 id="3-1-采用左外连接"><a href="#3-1-采用左外连接" class="headerlink" title="3.1 采用左外连接"></a>3.1 采用左外连接</h3><p>我们知道多表查询分为外连接和内连接，而外连接又分为左外连接，右外连接和满外连接。其中外连接中，左外连接与右外连接可以通过交换表来相互改造，其原理也是类似的，而满外连接无非是二者的一个综合，因此外连接我们只介绍左外连接的优化即可。</p><p><strong><font color=blue>1.下面开始 EXPLAIN 分析，当没有使用索引时，可以看到是全表扫描~</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> `type` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card <span class="operator">=</span> book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614498.png" alt="image-20220824230108579"></p><p>在上面的查询sql中，type表是驱动表，book表是被驱动表。在执行查询时，会先查找驱动表中符合条件的数据，再根据驱动表查询到的数据在被驱动表中根据匹配条件查找对应的数据。因此被驱动表嵌套查询的次数是20*20&#x3D;400次。实际上，由于我们总是需要在被驱动表中进行查询，优化器帮我们已经做了优化，上面的查询结果中可以看到，使用了<code>join buffer</code>，将数据缓存起来，提高检索的速度。</p><p><strong><font color=blue>2. 为了提高外连接的性能，我们添加下索引</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX Y <span class="keyword">ON</span> book(card); #【被驱动表】，可以避免全表扫描</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> `type` </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card <span class="operator">=</span> book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614819.png" alt="image-20220824230338583"></p><p>对于外层表来说，虽然其查询仍然是全表扫描，但是因为是左外连接，<code>LEFT JOIN</code>左边的表的数据无论是否满足条件都会保留，因此全表扫描也是不赖的。另外可以看到第二行的 type 变为了 ref，rows 也变成了1，优化比较明显。这是由左连接特性决定的。<code>LEFT JOIN</code> 条件用于确定如何从右表搜索行，左边一定都有，所以 <code>右边是我们的关键点，一定需要建立索引</code></p><p><strong><font color=blue>3. 我们当然也可以给type表建立索引。</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX X <span class="keyword">ON</span> `type`(card); #【驱动表】，无法避免全表扫描</span><br><span class="line"># <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `type` <span class="keyword">ADD</span> INDEX X (card);</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> `type` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card <span class="operator">=</span> book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301614985.png" alt="image-20220824230536748"></p><blockquote><p>注意，外连接的关联条件中，两个关联字段的类型、字符集一定要保持一致，否则索引会失效哦。</p></blockquote><p><strong><font color=blue>4. 删除索引Y，我们继续查询</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除索引</span><br><span class="line"><span class="keyword">DROP</span> INDEX Y <span class="keyword">ON</span> book;</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> `type` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card <span class="operator">=</span> book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615026.png" alt="image-20220824230642449"></p><p>book表使用<code>join buffer</code>，再次验证了左外连接左边的表是驱动表，右边的表是被驱动表，后面我们将与内连接在这一点进行对比。</p><blockquote><p>左外链接左表是驱动表右表是被驱动表，右外链接和此相反，内链接则是按照数据量的大小，数据量少的是驱动表，多的是被驱动表</p></blockquote><h3 id="3-2-采用内连接"><a href="#3-2-采用内连接" class="headerlink" title="3.2 采用内连接"></a>3.2 采用内连接</h3><p><strong><font color=blue>1. 删除现有的索引，换成 inner join(MySQL自动选择驱动表)</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index X <span class="keyword">on</span> type;</span><br><span class="line"><span class="keyword">drop</span> index Y <span class="keyword">on</span> book;# (如果已经删除了可以不用再执行该操作)</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> type <span class="keyword">INNER</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card<span class="operator">=</span>book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615690.png" alt="image-20220826120632384"></p><p><strong><font color=blue>2. 为book表添加索引优化</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">ADD</span> INDEX Y (card);</span><br><span class="line"></span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span>  type <span class="keyword">INNER</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card<span class="operator">=</span>book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615170.png" alt="image-20220826120800619"></p><p><strong><font color=blue>3. 向type表中再增加20条数据，为type表增加索引优化，观察情况</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 再向type表中插入<span class="number">20</span>条数据，此时type:<span class="number">40</span>条数据，book:<span class="number">20</span>条数据 (过程省略)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> type <span class="keyword">ADD</span> INDEX X (card);</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> type <span class="keyword">INNER</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card<span class="operator">=</span>book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615458.png" alt="image-20220826121414744"></p><p>上面的两次查询中，第一次是使用type作为驱动表，book作为被驱动表。而第二次是使用book作为驱动表，type作为被驱动表。&#x3D;&#x3D;对于内连接来说，查询优化器可以决定谁作为驱动表，谁作为被驱动表出现的&#x3D;&#x3D;</p><p><strong><font color=blue>4. 接着，删除被驱动表的索引</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX X <span class="keyword">ON</span> `type`;</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> type <span class="keyword">INNER</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card<span class="operator">=</span>book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615018.png" alt="image-20220826122407713"></p><p>被驱动表进行了反转。这是因为内连接优化器可以决定（被）驱动表。在只有一个表存在索引的情况下，会<strong>选择存在索引的表作为被驱动表</strong>(因为被驱动表查询次数更多)</p><p><strong><font color=blue>5. 再加上索引，观察结果</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `type` <span class="keyword">ADD</span> INDEX X (card);</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> type <span class="keyword">INNER</span> <span class="keyword">JOIN</span> book <span class="keyword">ON</span> type.card<span class="operator">=</span>book.card;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615138.png" alt="image-20220826123444163"></p><p>被驱动表又进行了反转~</p><blockquote><p>结论：对于内连接来说，在两个表的连接条件都存在索引的情况下，会选择小表作为驱动表。“&#x3D;&#x3D;小表驱动大表&#x3D;&#x3D;”</p></blockquote><h3 id="3-3-join-语句原理"><a href="#3-3-join-语句原理" class="headerlink" title="3.3 join 语句原理"></a>3.3 join 语句原理</h3><p>join 方式连接多表，本质就是各个表之间数据的循环匹配。MySQL 5.5 版本之前，MySQL 只支持一种表间关联方式，就是嵌套循环。如果关联表的数据量很大，则 join 关联的执行时间会非常漫长。在 MySQL 5.5 以后的版本中，MySQL 通过引入 BNLJ 算法来优化嵌套执行。</p><h4 id="3-3-1-驱动表和被驱动表"><a href="#3-3-1-驱动表和被驱动表" class="headerlink" title="3.3.1 驱动表和被驱动表"></a>3.3.1 驱动表和被驱动表</h4><p>驱动表就是主表，被驱动表就是从表、非驱动表。</p><ul><li><strong>对于内连接来说:</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">JOIN</span> B <span class="keyword">ON</span> ...</span><br></pre></td></tr></table></figure><p>A 并不一定就是驱动表，优化器会根据你的查询语句做优化，决定先查哪张表。先查询的哪张表就是驱动表，反之就是被驱动表。通过 explain 关键字可以查看。</p><blockquote><p>3.2 已经总结了优化器选择的规律：两表中一个表有索引，一个表没有索引，则没有索引的为驱动表，有索引的为被驱动表；两个表都没有索引，则小表驱动大表。</p><p>💡Q:上面的规律是一成不变的吗？如果一个表有索引，但是数据量很小，一个表没有索引，但是数据量很大，情况会是怎样的呢？<br>我们要明白优化器的优化原理：对于内连接mysql会选择扫描次数比较少的作为驱动表，因此实际生产中最好使用<code>Explain</code>测试验证。</p></blockquote><ul><li><strong>对于外连接来说：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> ...</span><br><span class="line"># 或</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> B <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> A <span class="keyword">ON</span> ...</span><br></pre></td></tr></table></figure><p>通常，大家会认为 A 就是驱动表，B 就是被驱动表。但也未必。测试如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> a(f1 <span class="type">INT</span>,f2 <span class="type">INT</span>,INDEX(f1)) ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> b(f1 <span class="type">INT</span>,f2 <span class="type">INT</span>) ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> a <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> b <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">6</span>),(<span class="number">7</span>,<span class="number">7</span>),(<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line"># 测试<span class="number">1</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span>(a.f1<span class="operator">=</span>b.f1) <span class="keyword">WHERE</span> (a.f2<span class="operator">=</span>b.f2);</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615050.png" alt="image-20220826132157586"></p><p>明明我们写的是<code>a LEFT JOIN b</code>,但是我们执行sql查询时，却是b作为了驱动表，a作为了被驱动表。</p><p>实际上，&#x3D;&#x3D;查询优化器会帮你把外连接改造为内连接，然后根据其优化策略选择驱动表与被驱动表&#x3D;&#x3D;</p><h4 id="3-3-2-Simple-Nested-Loop-Join（简单嵌套循环连接）"><a href="#3-3-2-Simple-Nested-Loop-Join（简单嵌套循环连接）" class="headerlink" title="3.3.2 Simple Nested-Loop Join（简单嵌套循环连接）"></a>3.3.2 Simple Nested-Loop Join（简单嵌套循环连接）</h4><p>算法相当简单，从表 A 取出一条数据 1，遍历表 B，将匹配到的数据放到 result。以此类推，驱动表 A 中的每一条记录与被动驱动表 B 的记录进行判断：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615939.png" alt="image-20220826133623699"></p><p>可以看到这种方式效率是非常低的，以上述表 A 数据 100 条，表 B 数据 1000 条，则 A*B&#x3D;10 万次。开销统计如下：</p><table><thead><tr><th align="left">开销统计</th><th align="left">SNLJ</th></tr></thead><tbody><tr><td align="left">外表扫描次数</td><td align="left">1</td></tr><tr><td align="left">内表扫描次数</td><td align="left">A</td></tr><tr><td align="left">读取记录数</td><td align="left">A+B*A</td></tr><tr><td align="left">JOIN 比较次数</td><td align="left">B*A</td></tr><tr><td align="left">回表读取记录次数</td><td align="left">0</td></tr></tbody></table><p>当然 MySQL 肯定不会这么粗暴的进行表的连接，所以就出现了后面的两种其的优化算法。</p><p>另外，从读取记录数来看：A+B*A中，驱动表A对性能的影响权重更大。因此我们优化器会选择小表驱动大表。</p><h4 id="3-3-3-Index-Nested-Loop-Join（索引嵌套循环连接）"><a href="#3-3-3-Index-Nested-Loop-Join（索引嵌套循环连接）" class="headerlink" title="3.3.3 Index Nested-Loop Join（索引嵌套循环连接）"></a>3.3.3 Index Nested-Loop Join（索引嵌套循环连接）</h4><p>Index Nested-Loop Join 其优化的思路主要是为了 <code>减少内层表数据的匹配次数</code>，所以要求被驱动表上必须 <code>有索引</code> 才行。通过外层表匹配条件直接与内层索引进行匹配，避免和内层表的每条记录进行比较，这样极大地减少了对内层表的匹配次数。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615162.png" alt="image-20220826134205095"></p><p>驱动表中的每条记录通过被驱动表的索引进行访问，因为索引查询的成本是比较固定的，故 MySQL 优化器都倾向于使用记录数少的表作为驱动表（外表）。</p><table><thead><tr><th align="left">开销统计</th><th align="left">SNLJ</th><th align="left">INLJ</th></tr></thead><tbody><tr><td align="left">外表扫描次数</td><td align="left">1</td><td align="left">1</td></tr><tr><td align="left">内表扫描次数</td><td align="left">A</td><td align="left">0</td></tr><tr><td align="left">读取记录数</td><td align="left">A+B*A</td><td align="left">A+B（match）</td></tr><tr><td align="left">JOIN 比较次数</td><td align="left">B*A</td><td align="left">A*Index（Height）</td></tr><tr><td align="left">回表读取记录次数</td><td align="left">0</td><td align="left">B（match）（if possible）</td></tr></tbody></table><p>如果被驱动表加索引，效率是非常高的，如果索引不是主键索引，所以还得进行一次回表查询。相比，被驱动表的索引是主键索引，效率会更高</p><h4 id="3-3-4-Block-Nested-Loop-Join（快嵌套循环连接）"><a href="#3-3-4-Block-Nested-Loop-Join（快嵌套循环连接）" class="headerlink" title="3.3.4 Block Nested-Loop Join（快嵌套循环连接）"></a>3.3.4 Block Nested-Loop Join（快嵌套循环连接）</h4><p>如果存在索引，那么会使用 index 的方式进行 join，如果 join 的列没有索引，被驱动表要扫描的次数太多了。每次访问被驱动表，其表中的记录都会被加载到内存中，然后再从驱动表中取一条与其匹配，匹配结束后清除内存，然后再从驱动表中加载一条记录，然后把驱动表的记录再加载到内存匹配，这样周而复始，大大增加了 IO 次数。为了减少被驱动表的 IO 次数，就出现了 <code>Block Nested-Loop Join</code>的方式</p><p>不再是逐条获取驱动表的数据，而是一块一块的获取，引入了 <code>join buffer 缓冲区</code>，将驱动表 join 相关的部分数据列（大小受 join buffer 的限制）缓存到 join buffer 中，然后全表扫描被驱动表，被驱动表的每一条记录一次性和 join buffer 中的所有驱动表记录进行匹配（内存中操作），将简单嵌套循环中的多次比较合并成一次，降低了被动表的访问频率。</p><blockquote><p>注意：</p><p>这里缓存的不只是关联表的列，select 后面的列也会缓存起来</p><p>在一个有 N 个 join 关联的 SQL 中会分配 N-1 个 join buffer。所以查询的时候尽量减少不必要的字段，可以 让 join buffer 中存放更多的列。</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615499.png" alt="image-20220826135208899"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301620444.png" alt="image-20220826135248800"></p><p>参数设置：</p><ul><li><p>block_nested_loop</p><p>通过 <code>show variables like &#39;%optimizer_switch%&#39;</code> 查看 <code>block_nested_loop</code> 状态。默认是开启的。</p></li><li><p>join_buffer_size</p><p>驱动表能不能一次加载完，要看 join buffer 能不能存储所有的数据，默认情况下 <code>join_buffer_size = 256K</code>。</p><p>join <em>buffer</em> size 的最大值在 32 位系统可以申请 4G，而在 64 位操做系统下可以申请大于 4G 的 join_buffer空间（64 位 Windows 除外，其大值会被截断为 4GB并发出警告）。</p></li></ul><h4 id="3-3-5-小结"><a href="#3-3-5-小结" class="headerlink" title="3.3.5 小结"></a>3.3.5 小结</h4><ol><li>保证被驱动表的 JOIN 字段已经创建了索引（减少内层表的循环匹配次数）</li><li>需要 JOIN 的字段，数据类型保持绝对一致。</li><li>LEFT JOIN 时，选择小表作为驱动表， 大表作为被驱动表 。减少外层循环的次数。</li><li>INNER JOIN 时，MySQL 会自动将小结果集的表选为驱动表 。选择相信 MySQL 优化策略。</li><li>能够直接多表关联的尽量直接关联，不用子查询。(减少查询的趟数)</li><li>不建议使用子查询，建议将子查询 SQL 拆开结合程序多次查询，或使用 JOIN 来代替子查询。</li><li>衍生表建不了索引</li><li>默认效率比较：&#x3D;&#x3D;INLJ &gt; BNLJ &gt; SNLJ&#x3D;&#x3D;</li><li>正确理解小表驱动大表：大小不是指表中的记录数，而是永远用小结果集驱动大结果集（其本质就是减少外层循环的数据数量）。 比如A表有100条记录，B表有1000条记录，但是where条件过滤后，B表结果集只留下50个记录，A表结果集有80条记录，此时就可能是B表驱动A表。其实上面的例子还是不够准确，因为结果集的大小也不能粗略的用结果集的行数表示，而是&#x3D;&#x3D;表行数 * 每行大小&#x3D;&#x3D;。其实要理解你只需要结合Join Buffer就好了，因为表行数 * 每行大小越小，其占用内存越小,就可以在Join Buffer中尽量少的次数加载完了。</li></ol><h4 id="3-3-6-Hash-Join"><a href="#3-3-6-Hash-Join" class="headerlink" title="3.3.6 Hash Join"></a>3.3.6 Hash Join</h4><p>&#x3D;&#x3D;从 MySQL 8.0.20 版本开始将废弃 BNLJ，因为加入了 hash join 默认都会使用 hash join&#x3D;&#x3D;</p><ul><li><p>Nested Loop：</p><p>对于被连接的数据子集较小的情况，Nested Loop 是个较好的选择。</p></li><li><p>Hash Join 是做 <code>大数据集连接</code> 时的常用方法，优化器使用两个表中较小（相对较小）的表利用 join key 在内存中建立 <code>散列表</code>，然后扫描较大的表并探测散列表，找出与 Hash 表匹配的行。</p><ul><li>这种方式适用于较小的表完全可以放于内存中的情况，这样总成本就是访问两个表的成本之和</li><li>在表很大的情况下并不能完全放入内存，这时优化器会将它分割成 <code>若干不同的分区</code>，不能放入内存的部分就把该分区写入磁盘的临时段，此时要求有较大的临时段从而尽量提高 I&#x2F;O 的性能。</li><li>它能够很好的工作于没有索引的大表和并行查询的环境中，并提供最好的性能。大多数人都说它是 Join 的重型升降机。Hash Join 只能应用于等值连接（如 WHERE A.COL1 &#x3D; B.COL2），这是由 Hash 的特点决定的。</li></ul></li></ul><table><thead><tr><th align="left">类型</th><th align="left">Nested Loop</th><th align="left">Hash Join</th></tr></thead><tbody><tr><td align="left">使用条件</td><td align="left">任何条件</td><td align="left">等值连接（&#x3D;）</td></tr><tr><td align="left">相关资源</td><td align="left">CPU、磁盘 I&#x2F;O</td><td align="left">内存、临时空间</td></tr><tr><td align="left">特点</td><td align="left">当有高选择性索引或进行限制性搜索时效率比较高，能够快速返回第一次的搜索结果</td><td align="left">当缺乏索引或者索引条件模糊时，Hash Join 比 Nested Loop 有效。在数据仓库环境下，如果表的记录数多，效率高</td></tr><tr><td align="left">缺点</td><td align="left">当索引丢失或者查询条件限制不够时，效率很低；当表的记录数较多，效率低</td><td align="left">为简历哈希表，需要大量内存。第一次的结果返回较慢</td></tr></tbody></table><h2 id="4-子查询优化"><a href="#4-子查询优化" class="headerlink" title="4. 子查询优化"></a>4. 子查询优化</h2><p>MySQL 从 4.1 版本开始支持子查询，使用子查询可以进行 SELECT 语句的嵌套查询，即一个 SELECT 查询的结果作为另一个 SELECT 语句的条件。<code>子查询可以一次性完成很多逻辑上需要多个步骤才能完成的操作</code> 。</p><p><strong>子查询是 MySQL 的一项重要的功能，可以帮助我们通过一个 SQL 语句实现比较复杂的查询。但是，子查询的执行效率不高。</strong> 通常我们可以将其优化成一个连接查询~</p><p>原因:</p><p><font color=blue>①</font> 执行子查询时，MySQL 需要为内层查询语句的查询结果<code>建立一个临时表</code> ，然后外层查询语句从临时表中查询记录。查询完毕后，再<code>撤销这些临时表</code> 。这样会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><p><font color=blue>②</font> 子查询的结果集存储的临时表，不论是内存临时表还是磁盘临时表都 <code>不会存在索引</code> ，所以查询性能会受到一定的影响。</p><p><font color=blue>③</font> 对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p>&#x3D;&#x3D;在 MySQL 中，可以使用连接（JOIN）查询来替代子查询。&#x3D;&#x3D; 连接查询 <code>不需要建立临时表</code>，其 <code>速度比子查询要快</code>，如果查询中使用索引的话，性能就会更好。</p><p><strong><font color=green>举例1：查询学生表中是班长的学生信息</font></strong></p><ul><li>使用子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#创建班级表中班长的索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_monitor <span class="keyword">ON</span> class(monitor);</span><br><span class="line"></span><br><span class="line">#查询班长的信息</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student stu1</span><br><span class="line">    <span class="keyword">WHERE</span> stu1.`stuno` <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> monitor</span><br><span class="line">    <span class="keyword">FROM</span> class c</span><br><span class="line">    <span class="keyword">WHERE</span> monitor <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>推荐：使用多表查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> stu1.<span class="operator">*</span> <span class="keyword">FROM</span> student stu1 <span class="keyword">JOIN</span> class c </span><br><span class="line"><span class="keyword">ON</span> stu1.`stuno` <span class="operator">=</span> c.`monitor`</span><br><span class="line"><span class="keyword">WHERE</span> c.`monitor` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><strong><font color=green>举例2：取所有不为班长的同学</font></strong></p><ul><li>不推荐</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询不为班长的学生信息</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE a.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> student a </span><br><span class="line"><span class="keyword">WHERE</span>  a.stuno  <span class="keyword">NOT</span>  <span class="keyword">IN</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> monitor <span class="keyword">FROM</span> class b </span><br><span class="line">            <span class="keyword">WHERE</span> monitor <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>推荐</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 转换成左连接查询</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  student a <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> class b </span><br><span class="line"><span class="keyword">ON</span> a.stuno <span class="operator">=</span>b.monitor</span><br><span class="line"><span class="keyword">WHERE</span> b.monitor <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><blockquote><p>结论：尽量不要使用 NOT IN 或者 NOT EXISTS，用 <code>LEFT JOIN xxx ON xx WHERE xx IS NULL</code> 替代</p></blockquote><h2 id="5-排序优化"><a href="#5-排序优化" class="headerlink" title="5. 排序优化"></a>5. 排序优化</h2><h3 id="5-1-排序优化"><a href="#5-1-排序优化" class="headerlink" title="5.1 排序优化"></a>5.1 排序优化</h3><p><strong>问题：在 WHERE 条件字段上加索引，但是为什么在 ORDER BY 字段上还要加索引呢？</strong></p><p>在 MySQL 中，支持两种排序方式，分别是 <code>FileSort</code> 和 <code>Index</code> 排序。</p><ul><li>Index 排序中，索引可以保证数据的有序性，就不需要再进行排序，<code>效率更更高</code>。</li><li>FileSort 排序则一般在 <code>内存中</code> 进行排序，占用 <code>CPU 较多</code>。如果待排序的结果较大，会产生临时文件 I&#x2F;O 到磁盘进行排序的情况，效率低。</li></ul><p><strong>优化建议:</strong></p><ol><li>SQL 中，可以在 WHERE 子句和 ORDER BY 子句中使用索引，目的是在 WHERE 子句中 <code>避免全表扫描</code>，在 ORDER BY 子句 <code>避免使用 FileSort 排序</code>。当然，某些情况下全表扫描，或者 FileSort 排序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。</li><li>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用单索引列；如果不同就使用联合索引。</li><li>无法使用 Index 时，需要对 FileSort 方式进行调优。</li></ol><h3 id="5-2-测试"><a href="#5-2-测试" class="headerlink" title="5.2 测试"></a>5.2 测试</h3><p>执先案例前，调用存储过程删除student和class表上的索引。只留主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> proc_drop_index(<span class="string">&#x27;atguigudb2&#x27;</span>,<span class="string">&#x27;student&#x27;</span>);</span><br><span class="line"><span class="keyword">call</span> proc_drop_index(<span class="string">&#x27;atguigudb2&#x27;</span>,<span class="string">&#x27;class&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以下是否能使用索引，能否去掉 <code>using filesort</code></p><p><strong>过程一：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid;  </span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615099.png" alt="image-20220826151348825"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615874.png" alt="image-20220826151419544"></p><p><strong>过程二：</strong></p><p><strong><font color=blue>1. 创建索引，但是不加limit限制，索引失效</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  INDEX idx_age_classid_name <span class="keyword">ON</span> student (age,classid,NAME);</span><br><span class="line"></span><br><span class="line">#不限制,索引失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid; </span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615019.png" alt="image-20220826151550127"></p><p>我们不是建立了索引嘛，为啥显示没有使用呢？这是优化器通过计算发现，这里需要回表的数据量特别大，使用索引的性能代价反而比不上不用索引的。</p><p><strong><font color=blue>2. 假如我们最后只查询二级索引中有的字段，观察结果：</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 会使用索引 （覆盖索引）</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> SQL_NO_CACHE age,classid,name,id <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid;  </span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615338.png" alt="image-20220826151951066"></p><p><strong><font color=blue>3. 假如我们限制排序返回的结果数量，观察结果：</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#增加limit过滤条件，使用上索引了。</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301615418.png" alt="image-20220826152308067"></p><p><strong>过程三：order by 时顺序错误，索引失效</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#创建索引age,classid,stuno</span><br><span class="line"><span class="keyword">CREATE</span>  INDEX idx_age_classid_stuno <span class="keyword">ON</span> student (age,classid,stuno); </span><br><span class="line"></span><br><span class="line">#以下哪些索引失效?</span><br><span class="line"># 失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> classid LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> classid,NAME LIMIT <span class="number">10</span>;  </span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid,stuno LIMIT <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,classid LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>过程四：order by 时规则不一致, 索引失效 （顺序错，不索引；方向反，不索引）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>, classid <span class="keyword">ASC</span> LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> classid <span class="keyword">DESC</span>, NAME <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>,classid <span class="keyword">DESC</span> LIMIT <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>, classid <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>过程五：无过滤，不索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">45</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> classid;</span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">45</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> classid,NAME; </span><br><span class="line"></span><br><span class="line"># 失效</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> classid<span class="operator">=</span><span class="number">45</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> classid<span class="operator">=</span><span class="number">45</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_cid <span class="keyword">ON</span> student(classid);</span><br><span class="line"></span><br><span class="line"># 可以</span><br><span class="line">EXPLAIN  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> classid<span class="operator">=</span><span class="number">45</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">INDEX a_b_c(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 能使用索引最左前缀 <span class="operator">-</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="operator">-</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a,b</span><br><span class="line"><span class="operator">-</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a,b,c</span><br><span class="line"><span class="operator">-</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">DESC</span>,b <span class="keyword">DESC</span>,c <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line">如果 <span class="keyword">WHERE</span> 使用索引的最左前缀定义为常量，则 <span class="keyword">order</span> <span class="keyword">by</span> 能使用索引 </span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b,c</span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">AND</span> b <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> c</span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b,c</span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">AND</span> b <span class="operator">&gt;</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b,c</span><br><span class="line"></span><br><span class="line">不能使用索引进行排序</span><br><span class="line"><span class="operator">-</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">ASC</span>,b <span class="keyword">DESC</span>,c <span class="keyword">DESC</span> <span class="comment">/* 排序不一致 */</span> </span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> g <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> b,c <span class="comment">/*丢失a索引*/</span></span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> c <span class="comment">/*丢失b索引*/</span></span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="operator">=</span> const <span class="keyword">ORDER</span> <span class="keyword">BY</span> a,d <span class="comment">/*d不是索引的一部分*/</span></span><br><span class="line"><span class="operator">-</span> <span class="keyword">WHERE</span> a <span class="keyword">in</span> (...) <span class="keyword">ORDER</span> <span class="keyword">BY</span> b,c <span class="comment">/*对于排序来说，多个相等条件也是范围查询*/</span></span><br></pre></td></tr></table></figure><h3 id="5-3-案例实战"><a href="#5-3-案例实战" class="headerlink" title="5.3 案例实战"></a>5.3 案例实战</h3><p>下面我们通过一个案例来实战filesort和index两种排序。&#x3D;&#x3D;对ORDER BY子句，尽量使用 Index 方式排序，避免使用 FileSort 方式排序&#x3D;&#x3D;。</p><p><font color=blue><strong>场景:查询年龄为30岁的，且学生编号小于101000的学生，按用户名称排序</strong></font></p><p>执行案例前先清除student上的索引，只留主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_age <span class="keyword">ON</span> student;</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_age_classid_stuno <span class="keyword">ON</span> student;</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_age_classid_name <span class="keyword">ON</span> student;</span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">call</span> proc_drop_index(<span class="string">&#x27;atguigudb2&#x27;</span>,<span class="string">&#x27;student&#x27;</span>);</span><br></pre></td></tr></table></figure><p>测试以下的查询，此时显然使用的是filesort进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> stuno <span class="operator">&lt;</span><span class="number">101000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> NAME ;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616220.png" alt="image-20220317213102709"></p><p>结论：type 是 ALL，即最坏的情况。Extra 里还出现了 Using filesort，也是最坏的情况。优化是必须的。</p><p><strong>方案一：为了去掉 filesort 我们可以创建特定索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建新索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_name <span class="keyword">ON</span> student(age,NAME);</span><br><span class="line"># 进行测试，可以看到已经使用了索引，虽然仅仅使用到了age这个字段</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> stuno <span class="operator">&lt;</span> <span class="number">101000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> NAME ;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616745.png" alt="image-20220317213227501"></p><p><strong>方案二：尽量让 where 的过滤条件和排序使用上索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_age_name <span class="keyword">ON</span> student;</span><br><span class="line"># 建立三个字段的索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_stuno_name <span class="keyword">ON</span> student (age,stuno,NAME);</span><br><span class="line"># 进行测试</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> SQL_NO_CACHE <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> stuno <span class="operator">&lt;</span><span class="number">101000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> NAME ;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616962.png" alt="image-20220317213450582"></p><p>此时又使用了filesort，这是为什么呢？这是因为此时filesort的性能更高。不信你可以对比执行下（0.03sec和0.00sec），看看时间的区别。结果竟然有 filesort 的 sql 运行速度，超过了已经优化掉 filesort的 sql，而且快了很多，几乎一瞬间就出现了结果。看来优化器做的工作真的特别灵活</p><p><strong>原因</strong>：所有的排序都是在条件过滤之后才执行的。所以，如果条件过滤大部分数据的话，剩下几百几千条数据进行排序其实并不是很消耗性能，即使索引优化了排序，但实际提升性能很有限。相对的 stuno &lt; 10100 这个条件，如果没有用到索引的话，要对几万条数据进行扫描，这是非常消耗性能的，所以索引放在这个字段上性价比最高，是最优选择。</p><blockquote><p>结论:</p><ol><li>两个索引同时存在，mysql 自动选择最优的方案。（对于这个例子，mysql 选择 idx_age_stuno_name）。但是，<code>随着数据量的变化，选择的索引也会随之变化的</code> 。</li><li><strong>当【范围条件】和【group by 或者 order by】的字段出现二选一时，优先观察条件字段的过滤数量，如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。反之，亦然。</strong></li></ol></blockquote><p>思考：这里我们使用如下索引，是否可行? (<strong>可行</strong>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_age_stuno_name <span class="keyword">ON</span> student;</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_stuno <span class="keyword">ON</span> student(age,stuno);</span><br></pre></td></tr></table></figure><h3 id="5-4-filesort-算法：双路排序和单路排序"><a href="#5-4-filesort-算法：双路排序和单路排序" class="headerlink" title="5.4 filesort 算法：双路排序和单路排序"></a>5.4 filesort 算法：双路排序和单路排序</h3><p>排序的字段若不在索引列上，则 filesort 会有两种算法：<code>双路排序</code> 和 <code>单路排序</code></p><p><font color=blue>1. <strong>双路排序（慢）</strong></font></p><ul><li><code>MySQL4.1 之前是使用双路排序</code>，字面意思就是两次扫描磁盘，最终得到数据， 读取行指针和 <code>order by 列</code>，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</li><li>从磁盘取排序字段，在 buffer 进行排序，再从 <code>磁盘取其他字段</code> 。</li></ul><p>取一批数据，要对磁盘进行两次扫描，众所周知，IO 是很耗时的，所以在 MySQL4.1 之后，出现了第二种改进的算法，就是单路排序。</p><p><font color=blue>2. <strong>单路排序（快）</strong></font></p><p>从磁盘读取查询需要的 <code>所有列</code> ，按照 order by 列在 buffer 对它们进行排序，然后扫描排序后的列表进行输出， 它的效率更快一些，避免了第二次读取数据。并且把随机 IO 变成了顺序 IO，但是它会使用更多的空间， 因为它把每一行都保存在内存中了。</p><p><strong>结论及引申出的问题</strong></p><ul><li><p>由于单路是后出的，总体而言好过双路</p></li><li><p>但是用单路有问题</p><ul><li><p>在 sort_buffer 中，单路比多路要<code>多占用很多空间</code>，因为单路是把所有字段都取出，所以可能取出的数据的总大小超出了<code>sort_buffer</code>的容量，导致每次只能取 sort_buffer 容量大小的数据，进行排序（创建 temp 文件，多路合并），排完再取 sort_buffer 容量大小，再排……从而多次I&#x2F;O。</p></li><li><p>单路本来想省一次 I&#x2F;O 操作，<code>反而导致了大量的 I/O 操作</code>，反而得不偿失。</p></li></ul></li></ul><p><font color=red><strong>优化策略</strong></font></p><ul><li><p><strong>尝试提高 sort_buffer_size</strong></p><ul><li><p>不管用哪种算法，提高这个参数都会提高效率，要根据系统的能力去提高，因为这个参数是针对每个进程（connection）的 1M - 8M 之间调整。MySQL5.7，InnoDB 存储引擎默认值都是 1048576 字节，1MB。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616578.png" alt="image-20220826160456207"></p></li></ul></li><li><p><strong>尝试提高 max_length_for_sort_data</strong></p><ul><li><p>提高这个参数，会增加改进算法的概率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span><span class="string">&#x27;%max_length_for_sort_data%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>但是如果设的太高，数据总容量超出 sort_buffer_size 的概率就增大，明显症状是高的磁盘 I&#x2F;O 活动和低的处理器使用率。如果需要返回的列的总长度大于 max_length_for_sort_data，使用双路算法，否则使用单路算法。1024-8192字节之间调整。</p></li></ul></li><li><p><em><em>Order by 时 select</em> 是一个大忌。最好只Query需要的字段。</em>*</p><ul><li>当 Query 的字段大小综合小于 max_length_for_sort_data，而且排序字段不是 TEXT|BLOG 类型时，会改进后的算法——单路排序，否则用老算法——多路排序。</li><li>两种算法的数据都有可能超出 sort_buffer_size 的容量，超出之后，会创建 tmp 文件进行合并排序，导致多次 I&#x2F;O，但是用单路排序算法的风险会更大一些，所以要提高 sort_buffer_size</li></ul></li></ul><h2 id="6-GROUP-BY优化"><a href="#6-GROUP-BY优化" class="headerlink" title="6. GROUP BY优化"></a>6. GROUP BY优化</h2><ul><li>group by 使用索引的原则几乎跟 order by 一致 ，group by 即使没有过滤条件用到索引，也可以直接使用索引。</li><li>group by 先排序再分组，遵照索引建的最佳左前缀法则</li><li>当无法使用索引列，增大 <code>max_length_for_sort_data</code> 和 <code>sort_buffer_size</code> 参数的设置</li><li>where 效率高于 having，能写在 where 限定的条件就不要写在 having 中了</li><li>减少使用 order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct 这些语句较为耗费 CPU，数据库的 CPU 资源是极其宝贵的。</li><li>包含了 order by、group by、distinct 这些查询的语句，where 条件过滤出来的结果集请保持在 1000 行以内，否则 SQL 会很慢。</li></ul><h2 id="7-优化分页查询"><a href="#7-优化分页查询" class="headerlink" title="7. 优化分页查询"></a>7. 优化分页查询</h2><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见有非常头疼的问题就是 <code>limit 2000000,10</code>，此时需要 MySQL 排序前 2000010 记录，仅仅返回 2000000-2000010 的记录，其他记录丢弃，查询排序的代价非常大。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">2000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>优化思路一</strong></p><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student t,(<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">2000000</span>,<span class="number">10</span>) a</span><br><span class="line"><span class="keyword">WHERE</span> t.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616923.png" alt="image-20220118212331595"></p><p><strong>优化思路二</strong></p><p>该方案适用于主键自增的表，可以把 Limit 查询转换成某个位置的查询 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">2000000</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616809.png" alt="image-20220118212357618"></p><h2 id="8-优先考虑覆盖索引"><a href="#8-优先考虑覆盖索引" class="headerlink" title="8. 优先考虑覆盖索引"></a>8. 优先考虑覆盖索引</h2><h3 id="8-1-什么是覆盖索引？"><a href="#8-1-什么是覆盖索引？" class="headerlink" title="8.1 什么是覆盖索引？"></a>8.1 什么是覆盖索引？</h3><p><strong>理解方式一</strong>：索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据；当能通过读取索引就可以得到想要的数据，那就不需要读取行了。 &#x3D;&#x3D;一个索引包含了满足查询结果的数据就叫做覆盖索引。&#x3D;&#x3D;</p><p><strong>理解方式二</strong>：非聚簇复合索引的一种形式，它包括在查询里的 SELECT、JOIN 和 WHERE 子句用到的所有列（即建索引的字段正好是覆盖查询条件中所涉及的字段）。</p><p>简单说就是， <code>索引列+主键</code> 包含 <code>SELECT 到 FROM 之间查询的列</code>。</p><p><strong>举例一：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#删除之前的索引</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_age_stuno <span class="keyword">ON</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_name <span class="keyword">ON</span> student (age,NAME);</span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&lt;&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616617.png" alt="image-20220317220113590"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> age,NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&lt;&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616971.png" alt="image-20220317220203223"></p><blockquote><p>注意：前面我们提到如果使用上<code>&lt;&gt;</code>就不会使用上索引了 并不是绝对的。比如上面这条SQL就用上了！！！Attention！我们讲解的关于 索引失效以及索引优化都是根据效率来决定的。对于二级索引来说：查询时间 &#x3D; 二级索引计算时间 + 回表查询时间，由于我们使用的是覆盖索引，回表查询时间 &#x3D; 0，索引优化器考虑到这一点就使用上 二级索引了~</p></blockquote><p><strong>举例二：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616195.png" alt="image-20220317220552145"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> id,age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616530.png" alt="image-20220317220630975"></p><p>同上，由于也使用了覆盖索引，最终SQL执行也正常使用上了索引~</p><h3 id="8-2-覆盖索引的利弊"><a href="#8-2-覆盖索引的利弊" class="headerlink" title="8.2 覆盖索引的利弊"></a>8.2 覆盖索引的利弊</h3><p><font color=#5d0308><strong>好处:</strong></font></p><p><strong><font color=blue>1. 避免Innodb表进行索引的二次查询（回表）</font></strong></p><p>Innodb 是以聚集索引的顺序来存储的，对于 Innodb 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据，在查找到相应的键值后，还需通过主键进行二次查询才能获取我们真实所需要的数据。</p><p>在覆盖索引中，二级索引的键值中可以获取所要的数据，避免了对主键的二次查询，减少了 IO 操作，提升了查询效率。</p><p><strong><font color=blue>2. 可以把随机 IO 变成顺序 IO 加快查询效率</font></strong></p><p>由于覆盖索引是按键值的顺序存储的，对于 I&#x2F;O 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 I&#x2F;O 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 I&#x2F;O 转变成索引查找的顺序 I&#x2F;O。</p><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p><strong><font color=#5d0308>弊端:</font></strong></p><p><code>索引字段的维护</code> 总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这是业务 DBA，或者称为业务数据架构师的工作。</p><h2 id="9-如何给字符串添加索引"><a href="#9-如何给字符串添加索引" class="headerlink" title="9. 如何给字符串添加索引"></a>9. 如何给字符串添加索引</h2><p>有一张教师表，表定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line">    ID <span class="type">bigint</span> unsigned <span class="keyword">primary</span> key,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    ...</span><br><span class="line">)engine<span class="operator">=</span>innodb;</span><br></pre></td></tr></table></figure><p>讲师要使用邮箱登录，所以业务代码中一定会出现类似于这样的语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> col1, col2 <span class="keyword">from</span> teacher <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>; </span><br></pre></td></tr></table></figure><p>如果 email 这个字段上没有索引，那么这个语句就只能做 <code>全表扫描</code> 。</p><h3 id="9-1-前缀索引"><a href="#9-1-前缀索引" class="headerlink" title="9.1 前缀索引"></a>9.1 前缀索引</h3><p>MySQL是支持前缀索引的。默认地，如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> index index1(email); </span><br><span class="line">#或</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> index index2(email(<span class="number">6</span>));</span><br></pre></td></tr></table></figure><p>这两种不同的定义在数据结构和存储上有什么区别呢?下图就是这两个索引的示意图。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301616747.png" alt="image-20220828195350954"></p><p>以及</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617322.png" alt="image-20220828195404648"></p><p><font color=blue><strong>如果使用的是 index1</strong> （即 email 整个字符串的索引结构），执行顺序是这样的:</font></p><ol><li>从 index1 索引树找到满足索引值是’ <a href="mailto:&#122;&#x68;&#97;&#x6e;&#x67;&#115;&#115;&#x78;&#x79;&#122;&#64;&#x78;&#x78;&#x78;&#x2e;&#x63;&#111;&#109;">&#122;&#x68;&#97;&#x6e;&#x67;&#115;&#115;&#x78;&#x79;&#122;&#64;&#x78;&#x78;&#x78;&#x2e;&#x63;&#111;&#109;</a> ’的这条记录，取得 ID2 的值;</li><li>到主键上查到主键值是 ID2 的行，判断 email 的值是正确的，将这行记录加入结果集;</li><li>取 index1 索引树上刚刚查到的位置的下一条记录，发现已经不满足email&#x3D;’ <a href="mailto:&#122;&#x68;&#97;&#110;&#103;&#x73;&#x73;&#x78;&#121;&#122;&#x40;&#120;&#120;&#120;&#x2e;&#99;&#x6f;&#x6d;">&#122;&#x68;&#97;&#110;&#103;&#x73;&#x73;&#x78;&#121;&#122;&#x40;&#120;&#120;&#120;&#x2e;&#99;&#x6f;&#x6d;</a> ’的条件了，循环结束。</li></ol><p>这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</p><p><font color=blue><strong>如果使用的是 index2</strong>（即 email(6) 索引结构），执行顺序是这样的：</font></p><ol><li>从 index2 索引树找到满足索引值是’zhangs’的记录，找到的第一个是 ID1;</li><li>到主键上查到主键值是 ID1 的行，判断出 email 的值不是’ <a href="mailto:&#122;&#104;&#x61;&#x6e;&#x67;&#x73;&#x73;&#120;&#x79;&#x7a;&#64;&#x78;&#120;&#120;&#46;&#99;&#x6f;&#109;">&#122;&#104;&#x61;&#x6e;&#x67;&#x73;&#x73;&#120;&#x79;&#x7a;&#64;&#x78;&#120;&#120;&#46;&#99;&#x6f;&#109;</a> ’，这行记录丢弃;</li><li>取 index2 上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出 ID2，再到 ID 索引上取整行然后判断，这次值对了，将这行记录加入结果集;</li><li>重复上一步，直到在 idxe2 上取到的值不是’zhangs’时，循环结束。</li></ol><p>也就是说 <font color=red><strong>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong> </font>前面已经讲过区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。</p><h3 id="9-2-前缀索引对覆盖索引的影响"><a href="#9-2-前缀索引对覆盖索引的影响" class="headerlink" title="9.2 前缀索引对覆盖索引的影响"></a>9.2 前缀索引对覆盖索引的影响</h3><p>前面我们说了使用&#x3D;&#x3D;前缀索引可能会增加扫描行数&#x3D;&#x3D;，这会影响到性能。其实，前缀索引的影响不止如此，我们再看一下另外一个场景：</p><p>如果使用 index1（即 email 整个字符串的索引结构）的话，可以利用覆盖索引，从 index1 查到结果后直接就返回了，不需要回到 ID 索引再去查一次。而如果使用 index2（即 email(6) 索引结构）的话，就不得不回到 ID 索引再去判断 email 字段的值。</p><p>即使你将 index2 的定义修改为 email(18) 的前缀索引，这时候虽然 index2 已经包含了所有的信息，但 InnoDB 还是要回到 id 索引再查一下，因为系统并不确定前缀索引的定义是否截断了完整信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,email <span class="keyword">from</span> teacher <span class="keyword">where</span> email<span class="operator">=</span><span class="string">&#x27;songhongkangexxx.com&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>结论:</p><p>&#x3D;&#x3D;使用前缀索引就用不上覆盖索引对查询性能的优化了&#x3D;&#x3D;，这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p></blockquote><h3 id="9-3-拓展内容"><a href="#9-3-拓展内容" class="headerlink" title="9.3 拓展内容"></a>9.3 拓展内容</h3><p>对于类似于邮箱这样的字段来说，使用前缀索引的效果可能还不错。但是，遇到前缀的区分度不够好的情况时，我们要怎么办呢?</p><p>比如，我们国家的身份证号，一共 18 位，其中前 6 位是地址码，所以同一个县的人的身份证号前 6 位一般会是相同的。</p><p>假设你维护的数据库是一个市的公民信息系统，这时候如果对身份证号做长度为 6 的前缀索引的话，这个索引的区分度就非常低了。按照我们前面说的方法，可能你需要创建长度为 12 以上的前缀索引，才能够满足区分度要求。</p><p>但是，索引选取的越长，占用的磁盘空间就越大，相同的数据页能放下的索引值就越少，搜索的效率也就会越低。<br>那么，如果我们能够确定业务需求里面只有按照身份证进行等值查询的需求，还有没有别的处理方法呢?这种方法，既可以占用更小的空间，也能达到相同的查询效率。有!</p><p><strong>第一种方式是使用倒序存储。</strong>如果你存储身份证号的时候把它倒过来存，每次查询的时候：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> field list <span class="keyword">from</span> teacher <span class="keyword">where</span> id_card<span class="operator">=</span>reverse(input_id_card_string);</span><br></pre></td></tr></table></figure><p>由于身份证号的最后 6 位没有地址码这样的重复逻辑，所以最后这 6 位很可能就提供了足够的区分度。当然，实践中你还要使用 count(distinct) 方法去做验证。</p><p><strong>第二种方式是使用 hash 字段。</strong>你可以在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> id_card_crc <span class="type">int</span> unsignedadd index(id_card_crc);</span><br></pre></td></tr></table></figure><p>然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段，由于校验码可能存在冲突，也就是说两个不同的身份证号通过 crc32() 函数得到的结果可能是相同的，所以你的查询语句 where 部分要判断 id_card 的值是否精确相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> field list <span class="keyword">from</span> twhere id_card_rc<span class="operator">=</span>crc32(input_id_card_string) <span class="keyword">and</span> id_card<span class="operator">=</span>input id_card_string</span><br></pre></td></tr></table></figure><p>这样，索引的长度变成了4个字节，比原来小了很多。</p><blockquote><p>从查询效率上看，使用 hash 字段方式的查询性能相对更稳定一些，因为 crc32 算出来的值虽然有冲突的概率但是概率非常小，可以认为每次查询的平均扫描行数接近 1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</p></blockquote><h2 id="10-索引下推"><a href="#10-索引下推" class="headerlink" title="10. 索引下推"></a>10. 索引下推</h2><p>Index Condition Pushdown(ICP) 是 MySQL 5.6 中新特性，是一种&#x3D;&#x3D;在存储引擎层使用索引过滤数据&#x3D;&#x3D;的一种优化方式。ICP 可以&#x3D;&#x3D;减少存储引擎访问基表的次数以及 MySQL 服务器访问存储引擎的次数&#x3D;&#x3D;。</p><h3 id="10-1-使用前后对比"><a href="#10-1-使用前后对比" class="headerlink" title="10.1 使用前后对比"></a>10.1 使用前后对比</h3><p><strong>在不使用 ICP 索引扫描的过程：</strong></p><ul><li>storage 层：只将满足 index key 条件的索引记录对应的整行记录取出，返回给 server 层</li><li>server 层：对返回的数据，使用后面的 where 条件过滤，直至返回最后一行。</li></ul><p><strong>使用 ICP 扫描的过程：</strong></p><ul><li>storage层：首先将 index key 条件满足的索引记录区间确定，然后在索引上使用 index filter 进行过滤。将满足的 index filter 条件的索引记录才去回表取出整行记录返回 server 层。不满足 index filter 条件的索引记录丢弃，不回表、也不会返回 server 层。</li><li>server 层：对返回的数据，使用 table filter 条件做最后的过滤。</li></ul><p><strong>使用前后的成本差别：</strong></p><ul><li>使用前，存储层多返回了需要被 index filter 过滤掉的整行记录</li><li>使用 ICP 后，直接就去掉了不满足 index filter 条件的记录，省去了他们回表和传递到 server 层的成本。</li><li>ICP 的加速效果取决于在存储引擎内通过 ICP 筛选掉的数据的比例。</li></ul><blockquote><p>索引中包含这个字段，但是没有使用到这个字段的索引(比如‘%a%’)，却可以使用这个字段在索引中进行条件过滤，从而减少回表的记录条数，这种情况就叫做索引下推</p></blockquote><h3 id="10-2-ICP-的开启、关闭"><a href="#10-2-ICP-的开启、关闭" class="headerlink" title="10.2 ICP 的开启、关闭"></a>10.2 ICP 的开启、关闭</h3><ul><li>默认情况下启用索引条件下推。可以通过设置系统变量 <code>optimizer_switch </code>控制 <code>indexcondition_pushdown</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#关闭索引下推</span><br><span class="line"><span class="keyword">SET</span> optimizer_switch<span class="operator">=</span>index_condition_pushdown<span class="operator">=</span>off;</span><br><span class="line"></span><br><span class="line">#打开索引下推</span><br><span class="line"><span class="keyword">SET</span> optimizerswitch<span class="operator">=</span>indexcondition_pushdown<span class="operator">=</span><span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><ul><li>当使用索引条件下推时，<code>EXPLAIN</code>语句输出结果中<code>Extra</code>列内容显示为<code>Using index condition</code></li></ul><h3 id="10-3-ICP-使用案例"><a href="#10-3-ICP-使用案例" class="headerlink" title="10.3 ICP 使用案例"></a>10.3 ICP 使用案例</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301620330.png" alt="image-20220828212345673"></p><p>为该表定义联合索引 <code>zip_last_first(zipcode, lastname, firstname)</code> 。如果我们知道了一个人的邮编，但是不确定这个人的姓氏，我们可以进行如下检索:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> people</span><br><span class="line"><span class="keyword">WHERE</span> zipcode<span class="operator">=</span> <span class="string">&#x27;000001&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> lastname <span class="keyword">LIKE</span> <span class="string">&#x27;%张%&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> address <span class="keyword">LIKE</span> <span class="string">&#x27;%北京市%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行查看SQL的查询计划，Extra 中显示了<code>Using index condition</code> ，这表示使用了索引下推。即：先使用索引的zipcode字段进行匹配，然后 &#x3D;&#x3D;索引下推&#x3D;&#x3D; 使用lastname字段进行过滤，最后再进行回表。</p><p>另外，Using where表示条件中包含需要过滤的非索引列的数据，即address LIKE ‘%北京市%’这个条件并不是索引列，需要在服务端过滤掉。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617739.png" alt="image-20220828220045412"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617764.png" alt="image-20220828212600518"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617290.png" alt="image-20220828212715729"></p><h3 id="11-4-开启和关闭ICP的性能对比"><a href="#11-4-开启和关闭ICP的性能对比" class="headerlink" title="11.4 开启和关闭ICP的性能对比"></a>11.4 开启和关闭ICP的性能对比</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617811.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617219.png" alt="image-20220828213739703"></p><p>结果如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617611.png" alt="image-20220828213847767"></p><p>多次测试效率对比来看，使用ICP优化的查询效率会好一些。这里建议多存储一些数据效果更明显。</p><h3 id="10-5-ICP-的使用条件"><a href="#10-5-ICP-的使用条件" class="headerlink" title="10.5 ICP 的使用条件"></a>10.5 ICP 的使用条件</h3><ol><li>只能用于二级索引（secondary index）</li><li>explain 显示的执行计划中 type 值（join 类型）为 <code>range</code> 、 <code>ref</code> 、 <code>eq_ref</code> 或者 <code>ref_or_null</code> 。</li><li>并非全部 where 条件都可以用 ICP 筛选，如果 where 条件的字段不在索引列中，还是要读取整表的记录到 server 端做 where 过滤。</li><li>ICP 可以用于 MyISAM 和 InnnoDB 存储引擎</li><li>MySQL 5.6 版本的不支持分区表的 ICP 功能，5.7 版本的开始支持。</li><li>当 SQL 使用覆盖索引时，不支持 ICP 优化方法。</li></ol><h2 id="11-普通索引-vs-唯一索引"><a href="#11-普通索引-vs-唯一索引" class="headerlink" title="11. 普通索引 vs 唯一索引"></a>11. 普通索引 vs 唯一索引</h2><p>在不同的业务场景下，应该选择普通索引，还是唯一索引？</p><p>假设你在维护一个居民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果居民系统需要按照身份证号查姓名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> CUser <span class="keyword">where</span> id_card<span class="operator">=</span><span class="string">&#x27;xxxxxxxyyyyyyzzzzz&#x27;</span>;</span><br></pre></td></tr></table></figure><p>所以，你一定会考虑在 id_card 字段上建索引。<br>由于身份证号字段比较大，不建议把身份证号当做主键。现在有两个选择，要么给 id_card 字段创建 唯一素引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p><p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB中，每个数据页的大小默认是16KB</p><p><strong>从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</strong></p><p>假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引，假设字段 k 上的值都不重复。 这个表的建表语句是:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    k <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    index (k)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)。</p><h3 id="11-1-查询过程"><a href="#11-1-查询过程" class="headerlink" title="11.1 查询过程"></a>11.1 查询过程</h3><p>假设，执行查询的语句是 <code>select id from test where k=5</code>。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一 个不满足k&#x3D;5条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><p>那么，这个不同带来的性能差距会有多少呢？答案是， <code>微乎其微</code>。</p><p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB</p><p>因为引擎是按页读写的，所以说，当找到 k&#x3D;5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p>当然，如果 k&#x3D;5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p><p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p><h3 id="11-2-更新过程"><a href="#11-2-更新过程" class="headerlink" title="11.2 更新过程"></a>11.2 更新过程</h3><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，介绍一下 change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话， 在不影响数据一致性的前提下，<code>InooDB 会将这些更新操作缓存在 change buffer 中</code> ，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 <code>merge</code>。除了 <code>访问这个数据页</code> 会触发 merge 外，系统有 <code>后台线程会定期</code> merge。在 <code>数据库正常关闭（shutdown）</code> 的过程中，也会执行 merge 操作。</p><p>如果能够将更新操作先记录在 change buffer， <code>减少读磁盘</code> ，语句的执行速度会得到明显的提升。而且， 数据读入内存是需要占用 buffer pool 的，所以这种方式还能够 <code>避免占用内存</code> ，提高内存利用率。</p><p><strong>那么，什么条件下可以使用 change buffer 呢？</strong></p><p>对干唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4.400) 这个记录，就要先判断现在表中是否已经存在 k&#x3D;4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p><p>因此，&#x3D;&#x3D;唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用&#x3D;&#x3D;。</p><p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数<code>innodb change buffer maxsize</code> 来动态设置。这个参数设置为 50 的时候，表示 changebuffer 的大小最多只能占用 buffer pool 的 50%。</p><p><strong>如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB的处理流程是怎样的？</strong></p><p>第一种情况是，这个记录要更新的目标页在内存中。这时：</p><ul><li>对干唯一索引来说，找到 3 和 5 之间的位置，判断为没有冲突，插入这个值，语句执行结束</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的CPU时间。</p><p>第二种情况是，这个记录要更新的目标页不在内存中。这时：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束;</li><li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li></ul><p>&#x3D;&#x3D;将数据从磁盘读入内存涉及随机 I&#x2F;O 的访问，是数据库里面成本最高的操作之一&#x3D;&#x3D;。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><blockquote><p>案例：</p><p>某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。</p></blockquote><h3 id="11-3-change-buffer的使用场景"><a href="#11-3-change-buffer的使用场景" class="headerlink" title="11.3 change buffer的使用场景"></a>11.3 change buffer的使用场景</h3><p>change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：<strong>普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</strong></p><p>因为 merge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是&#x3D;&#x3D;将记录的变更动作缓存下来&#x3D;&#x3D;，所以&#x3D;&#x3D;在一个数据页做 merge 之前，change buffer 记录的变更越多&#x3D;&#x3D;（也就是这个页面上要更新的次数越多），&#x3D;&#x3D;收益就越大&#x3D;&#x3D;。</p><p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是<code>账单类、日志类</code>的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，之后由干马上要访问这个数据页，会立即触发 merge 过程，这样随机访问 I&#x2F;O 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，changebuffer 反而起到了副作用。</p><ol><li>普通索引和唯一索引应该怎么选择？其实，这两类索引在查询能力上是没差别的，主要考虑的是对 <code>更新性能</code> 的影响。所以，建议你 <code>尽量选择普通索引</code> 。</li><li>在实际使用中会发现， <code>普通索引</code> 和 <code>change buffer</code> 的配合使用，对于 <code>数据量大</code> 的表的更新优化还是很明显的。</li><li>如果所有的更新后面，都马上 <code>伴随着对这个记录的查询</code>，那么你应该关闭<code>change buffer</code> 。而在其他情况下，change buffer 都能提升更新性能。</li><li>由于唯一索引用不上 change buffer 的优化机制，因此如果 <code>业务可以接受</code> ，从性能角度出发建议优先考虑非唯一索引。但是如果”业务可能无法确保”的情况下，怎么处理呢？<ul><li>首先， <code>业务正确性优先</code> 。我们的前提是“业务代码已经保证不会写入重复数据”的情况下，讨论性能问题。如果业务不能保证，或者业务就是要求数据库来做约束，那么没得选，必须创建唯一索引。 这种情况下，本节的意义在于，如果碰上了大量插入数据慢、内存命中率低的时候，给你多提供一个排查思路。</li><li>然后，在一些“<code>归档库</code> ”的场景，你是可以考虑使用唯一索引的。比如，线上数据只需要保留半年， 然后历史数据保存在归档库。这时候，归档数据已经是确保没有唯一键冲突了。要提高归档效率， 可以考虑把表里面的唯一索引改成普通索引。</li></ul></li></ol><h2 id="12-其它查询优化策略"><a href="#12-其它查询优化策略" class="headerlink" title="12. 其它查询优化策略"></a>12. 其它查询优化策略</h2><h3 id="12-1-EXISTS-和-IN-的区分"><a href="#12-1-EXISTS-和-IN-的区分" class="headerlink" title="12.1 EXISTS 和 IN 的区分"></a>12.1 EXISTS 和 IN 的区分</h3><p><strong>问题：</strong></p><p>不太理解哪种情况下应该使用 EXISTS，哪种情况应该用 IN。选择的标准是看能否使用表的索引吗?</p><p>回答:</p><p>索引是个前提，其实选择与否还是要看表的大小。你可以将选择的标准理解为 <code>小表驱动大表</code>。在这种方式下效率是最高的。</p><p>比如下面这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> cc <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cc <span class="keyword">FROM</span> B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> cc <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> B.cc <span class="operator">=</span> A.cc)</span><br></pre></td></tr></table></figure><p>当 A 小于 B 时，用 EXISTS。因为 EXISTS 的实现，相当于外表循环，实现的逻辑类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i in A</span><br><span class="line">    <span class="keyword">for</span> j in B</span><br><span class="line">        <span class="keyword">if</span> j.cc == i.cc then ...</span><br></pre></td></tr></table></figure><p>当 B 小于 A 时用 IN，因为实现的逻辑类似于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i in B</span><br><span class="line">    <span class="keyword">for</span> j in A</span><br><span class="line">        <span class="keyword">if</span> j.cc == i.cc then ...</span><br></pre></td></tr></table></figure><p>结论：<strong>哪个表小就用哪个表来驱动，A 表小就用 EXISTS ，B 表小就用 IN</strong></p><h3 id="12-2-COUNT-与-COUNT-具体字段-效率"><a href="#12-2-COUNT-与-COUNT-具体字段-效率" class="headerlink" title="12.2 COUNT(*) 与 COUNT(具体字段) 效率"></a>12.2 COUNT(*) 与 COUNT(具体字段) 效率</h3><p>问：在MySQL中统计数据表的行数，可以使用三种方式 <code>SELECT COUNT(*)</code>、<code>SELECT COUNT(1)</code> 和 <code>SELECT COUNT(具体字段)</code>，使用这三者之间的查询效率是怎样的？</p><p>答：</p><p>前提：如果你要统计的是某个字段的非空数据行数，则另当别论，毕竟比较执行效率的前提是结果一样才可以。</p><p><strong>环节1：</strong><code>COUNT(*)</code> 和 <code>COUNT(1)</code> 都是对所有结果进行 COUNT，COUNT(*) 和 COUNT(1) 本质上并没有区别（二者执行时间可能略有差别，不过你还是可以把它俩的执行效率看成是相等的）。如果有 WHERE 子句，则是对所有符合筛选条件的数据行进行统计；如果没有 WHERE 子句，则是对数据表的数据行数进行统计。</p><p><strong>环节2：</strong>如果是 MvlSAM 存储引擎，统计数据表的行数只需要 O(1)的复杂度，这是因为每张MvlSAM 的数据表都有一个 meta 信息存储了 row_count 值，而一致性则由表级锁来保证。</p><p>如果是 InnoDB 存储引擎，因为 InnoDB 支持事务，采用行级锁和 MVCC 机制，所以无法像 MyISAM 一样，维护一个 row_count 变量，因此需要采用扫描全表，是 O(n) 的复杂度，进行循环+计数的方式来完成统计。</p><p><strong>环节3：</strong>在 InnoDB 引擎中，如果采用 COUNT(具体字段) 来统计数据行数，要尽量采用二级索引。因为主键采用的索引是聚簇索引，聚簇索引包含的信息多，明显会大于二级索引。对于 <code>COUNT(*)</code> 和<code>COUNT(1)</code> 来说，它们不需要查找具体的行，只是统计行数，系统会自动采用占用空间更小的二级索引来进行统计。</p><p>如果有多个二级索引，会使用 keylen 小的二级索引进行扫描。当没有二级索引的时候，才会采用主键索引来进行统计。</p><h3 id="12-3-关于-SELECT"><a href="#12-3-关于-SELECT" class="headerlink" title="12.3 关于 SELECT(*)"></a>12.3 关于 SELECT(*)</h3><p>在表查询中，建议明确字段，不要使用 * 作为查询的字段列表，推荐使用 SELECT &lt;字段列表&gt; 查询。原因：</p><ol><li>MySQL 在解析的过程中，会通过 <code>查询数据字典</code> 将”*”按序转换成所有列名，这会大大的耗费资源和时间。</li><li>无法使用 <code>覆盖索引</code></li></ol><h3 id="12-4-LIMIT-1-对优化的影响"><a href="#12-4-LIMIT-1-对优化的影响" class="headerlink" title="12.4 LIMIT 1 对优化的影响"></a>12.4 LIMIT 1 对优化的影响</h3><p>针对的是会扫描全表的SQL语句，如果你可以确定结果集只有一条，那么加上 <code>LIMIT 1</code> 的时候，当找到一条结果的时候就不会继续扫描了，这样会加快查询速度。</p><p>如果数据表已经对字段建立了唯一索引，那么可以通过索引进行查询，不会全表扫描的话，就不需要加上 <code>LIMIT 1</code>了。</p><h3 id="12-5-多使用COMMIT"><a href="#12-5-多使用COMMIT" class="headerlink" title="12.5 多使用COMMIT"></a>12.5 多使用COMMIT</h3><p>只要有可能，在程序中尽量多使用 COMMIT，这样程序的性能得到提高，需求也会因为 COMMIT 所释放的资源而减少。</p><p>COMMIT 所释放的资源:</p><ul><li>回滚段上用于恢复数据的信息</li><li>被程序语句获得的锁</li><li>redo &#x2F; undo log buffer 中的空间</li><li>管理上述 3 种资源中的内部花费</li></ul><h2 id="13-淘宝数据库，主键如何设计的"><a href="#13-淘宝数据库，主键如何设计的" class="headerlink" title="13. 淘宝数据库，主键如何设计的?"></a>13. 淘宝数据库，主键如何设计的?</h2><p>聊一个实际问题：淘宝的数据库，主键是如何设计的？</p><p>某些错的离谱的答案还在网上年复一年的流传着，甚至还成为了所谓的 MySQL 军规。其中，一个最明显的错误就是关于 MySQL 的主键设计。</p><p>大部分人的回答如此自信：用8字节的 BIGINT 做主键，而不要用INT。<code>错</code>!</p><p>这样的回答，只站在了数据库这一层，而没有 <code>从业务的角度</code> 思考主键。主键就是一个自增 ID 吗？站在 2022 年的新年档口，用自增做主键，架构设计上可能 <code>连及格都拿不到</code>。</p><h3 id="13-1-自增ID的问题"><a href="#13-1-自增ID的问题" class="headerlink" title="13.1 自增ID的问题"></a>13.1 自增ID的问题</h3><p>自增 ID 做主键，简单易懂，几乎所有数据库都支持自增类型，只是实现上各自有所不同而已。自增 ID 除了简单，其他都是缺点，总体来看存在以下几方面的问题：</p><p><font color=blue><strong>1. 可靠性不高</strong></font></p><p>存在自增ID回溯的问题，这个问题直到最新版本的MySQL 8.0才修复。</p><p><font color=blue><strong>2. 安全性不高</strong></font></p><p>对外暴露的接口可以非常容易猜测对应的信息。比如：&#x2F;User&#x2F;1&#x2F; 这样的接口，可以非常容易猜测用户ID的值为多少，总用户数量有多少，也可以非常容易地通过接口进行数据的爬取。</p><p><font color=blue><strong>3. 性能差</strong></font></p><p>自增 ID 的性能较差，需要在数据库服务器端生成。</p><p><font color=blue><strong>4. 交互多</strong></font></p><p>业务还需要额外执行一次类似 <code>last_insert_id()</code> 的函数才能知道刚才插入的自增值，这需要多一次的网络交互。在海量并发的系统中，多1条SQL，就多一次性能上的开销。</p><p><font color=blue><strong>5. 局部唯一性</strong></font></p><p>最重要的一点，自增 ID 是局部唯一，只在当前数据库实例中唯一，而不是全局唯一，在任意服务器间都是唯一的。对于目前分布式系统来说，这简直就是噩梦。</p><h3 id="13-2-业务字段做主键"><a href="#13-2-业务字段做主键" class="headerlink" title="13.2 业务字段做主键"></a>13.2 业务字段做主键</h3><p>为了能够唯一地标识一个会员的信息，需要为 <code>会员信息表</code> 设置一个主键。那么，怎么为这个表设置主键，才能达到我们理想的目标呢? 这里我们考虑业务字段做主键。 表数据如下:</p><p>在这表里，哪个字段比较合适呢?</p><ul><li><strong>选择卡号(cardno)</strong></li></ul><p>会员卡号（cardno）看起来比较合适，因为会员卡号不能为空，而且有唯一性，可以用来标识一条会员记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo.membermaster</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> cardno <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 会员卡号为主键 -&gt; membername TEXT,</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> memberphone TEXT,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> memberpid TEXT,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> memberaddress TEXT,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> sex TEXT,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> birthday DATETIME</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.06</span> sec)</span><br></pre></td></tr></table></figure><p>不同的会员卡号对应不同的会员，字段“cardno”唯一地标识某一个会员。如果都是这样，会员卡号与会员一一对应，系统是可以正常运行的。</p><p>但实际情况是， <code>会员卡号可能存在重复使用</code> 的情况。比如，张三因为工作变动搬离了原来的地址，不再到商家的门店消费了 (退还了会员卡)，于是张三就不再是这个商家门店的会员了。但是，商家不想让 这个会 员卡空着，就把卡号是“10000001”的会员卡发给了王五。</p><p>从系统设计的角度看，这个变化只是修改了会员信息表中的卡号是“10000001”这个会员 信息，并不会影响到数据一致性。也就是说，修改会员卡号是“10000001”的会员信息， 系统的各个模块，都会获取到修改后的会员信息，不会出现“有的模块获取到修改之前的会员信息，有的模块获取到修改后的会员信息， 而导致系统内部数据不一致”的情况。因此，从 <code>信息系统层面</code> 上看是没问题的。</p><p>但是从使用系统的业务层面 来看，就有很大的问题 了，会对商家造成影响。</p><p>比如，我们有一个销售流水表(trans)，记录了所有的销售流水明细。2020 年 12 月 01 日，张三在门店购买了一本书，消费了 89 元。那么，系统中就有了张三买书的流水记录，如下所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617739.png" alt="image-20220829162818316"></p><p>接着，我们查询一下 2020 年 12 月 01 日的会员销售记录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> b.membername,c.goodsname,a.quantity,a.salesvalue,a.transdate</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> demo.trans <span class="keyword">AS</span> a</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">JOIN</span> demo.membermaster <span class="keyword">AS</span> b</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">JOIN</span> demo.goodsmaster <span class="keyword">AS</span> c</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ON</span> (a.cardno <span class="operator">=</span> b.cardno <span class="keyword">AND</span> a.itemnumber<span class="operator">=</span>c.itemnumber); </span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+------------+---------------------+ </span></span><br><span class="line"><span class="operator">|</span> membername <span class="operator">|</span> goodsname <span class="operator">|</span> quantity <span class="operator">|</span> salesvalue <span class="operator">|</span>           transdate <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+------------+---------------------+ </span></span><br><span class="line"><span class="operator">|</span> 张三        <span class="operator">|</span>        书 <span class="operator">|</span>    <span class="number">1.000</span> <span class="operator">|</span>      <span class="number">89.00</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-12</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+------------+---------------------+ </span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>如果会员卡“10000001”又发给了王五，我们会更改会员信息表。导致查询时:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> b.membername,c.goodsname,a.quantity,a.salesvalue,a.transdate</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> demo.trans <span class="keyword">AS</span> a</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">JOIN</span> demo.membermaster <span class="keyword">AS</span> b</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">JOIN</span> demo.goodsmaster <span class="keyword">AS</span> c</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ON</span> (a.cardno <span class="operator">=</span> b.cardno <span class="keyword">AND</span> a.itemnumber<span class="operator">=</span>c.itemnumber); </span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+------------+---------------------+ </span></span><br><span class="line"><span class="operator">|</span> membername <span class="operator">|</span> goodsname <span class="operator">|</span> quantity <span class="operator">|</span> salesvalue <span class="operator">|</span> transdate           <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+------------+---------------------+ </span></span><br><span class="line"><span class="operator">|</span> 王五        <span class="operator">|</span>        书 <span class="operator">|</span>    <span class="number">1.000</span> <span class="operator">|</span>      <span class="number">89.00</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-12</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+------------+---------------------+ </span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>这次得到的结果是：王五在 2020 年 12 月 01 日，买了一本书，消费 89 元。显然是错误的!结论：千万不能把会员卡号当做主键。</p><ul><li><strong>选择会员电话或身份证号</strong></li></ul><p>会员电话可以做主键吗？不行的。在实际操作中，手机号也存在 <code>被运营商收回</code> ，重新发给别人用的情况。</p><p>那身份证号行不行呢？好像可以。因为身份证决不会重复，身份证号与一个人存在一一对 应的关系。可问题是，身份证号属于 <code>个人隐私</code> ，顾客不一定愿意给你。要是强制要求会员必须登记身份证号，会把很多客人赶跑的。其实，客户电话也有这个问题，这也是我们在设计会员信息表的时候，允许身份证号和电话都为空的原因。</p><p><strong>所以，建议尽量不要用跟业务有关的字段做主键。毕竟，作为项目设计的技术人员，我们谁也无法预测在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现。</strong></p><blockquote><p>经验:</p><p>刚开始使用 MySQL 时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。</p></blockquote><h3 id="13-3-淘宝的主键设计"><a href="#13-3-淘宝的主键设计" class="headerlink" title="13.3 淘宝的主键设计"></a>13.3 淘宝的主键设计</h3><p>在淘宝的电商业务中，订单服务是一个核心业务。请问， <code>订单表的主键</code> 淘宝是如何设计的呢？是自增ID吗？</p><p>打开淘宝，看一下订单信息：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301617124.png" alt="image-20220829163123686"></p><p>从上图可以发现，订单号不是自增ID!我们详细看下上述4个订单号:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1550672064762308113</span><br><span class="line">1481195847180308113</span><br><span class="line">1431156171142308113</span><br><span class="line">1431146631521308113</span><br></pre></td></tr></table></figure><p>订单号是 19 位的长度，且订单的最后 5 位都是一样的，都是 08113。且订单号的前面 14 位部分是单调递增的。</p><p>大胆猜测，淘宝的订单 ID 设计应该是：<code>订单ID = 时间 + 去重字段 + 用户ID后6位尾号</code></p><p>这样的设计能做到全局唯一，且对分布式系统查询及其友好。</p><h3 id="13-4-推荐的主键设计"><a href="#13-4-推荐的主键设计" class="headerlink" title="13.4 推荐的主键设计"></a>13.4 推荐的主键设计</h3><p><code>非核心业务</code>：对应表的主键自增 ID，如告警、日志、监控等信息。</p><p><code>核心业务</code>：<strong>主键设计至少应该是全局唯一且是单调递增</strong>。全局唯一保证在各系统之间都是唯一的，单调递增是希望插入时不影响数据库性能。</p><p>这里推荐最简单的一种主键设计：UUID。</p><p><strong>UUID的特点:</strong></p><p>全局唯一，占用 36 字节，数据无序，插入性能差。</p><p><strong>认识UUID:</strong></p><ul><li>为什么UUID是全局唯一的?</li><li>为什么UUID占用36个字节?</li><li>为什么UUID是无序的?</li></ul><p>MySQL数据库的UUID组成如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID = 时间 + UUID 版本（16字节）- 时钟序列（4字节） - MAC 地址（12字节）</span><br></pre></td></tr></table></figure><p>我们以 UUID 值：e0ea12d4-6473-11eb-943c-00155dbaa39d 举例</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301618227.png" alt="image-20220830155849839"></p><p><strong><font color=blue>1. 为什么UUID是全局唯一的？</font></strong></p><p>在 UUID 中时间部分占用 60 位，存储的类似 TIMESTAMP 的时间戳，但表示的是从1582-10-15 00:00:00.00 到现在的 100 ns 的计数。可以看到 UUID 存储的时间精度比 TIMESTAMPE 更高，时间维度发生重复的概率降低到1&#x2F;100ns。</p><p>时钟序列是为了避免时钟被回拨导致产生时间重复的可能性。MAC地址用于全局唯一。</p><p><strong><font color=blue>2. 为什么UUID占用36个字节？</font></strong></p><p>UUID 根据字符串进行存储，设计时还带有无用”-“字符串，因此总共需要36个字节。</p><p><strong><font color=blue>3. 为什么UUID是随机无序的呢？</font></strong></p><p>因为 UUID 的设计中，将时间低位放在最前面，而这部分的数据是一直在变化的，并且是无序。</p><p><font color=red><strong>改造UUID</strong></font></p><p>若将时间高低位互换，则时间就是单调递增的了，也就变得单调递增了。MySQL 8.0 可以更换时间低位和时间高位的存储方式，这样 UUID 就是有序的UUID了。</p><p>MySQL 8.0 还解决了 UUID 存在的空间占用的问题，除去了 UUID 字符串中无意义的”-“字符串，并且将字符串用二进制类型保存，这样存储空间降低为了16字节。</p><p>可以通过 MySQL 8.0 提供的 uuid_to_bin 函数实现上述功能，同样的，MySQL 也提供了 bin_to_uuid 函数进行 转化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@uuid</span> <span class="operator">=</span> UUID();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@uuid</span>,uuid_to_bin(<span class="variable">@uuid</span>),uuid_to_bin(<span class="variable">@uuid</span>,<span class="literal">TRUE</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301618354.png" alt="image-20220118215859456"></p><p><strong>通过函数 <code>uuid_to_bin(@uuid,true)</code> 将 UUID 转化为有序 UUID 了</strong>。&#x3D;&#x3D;全局唯一 + 单调递增&#x3D;&#x3D;，这不就是我们想要的主键！</p><h3 id="13-5-有序-UUID-性能测试"><a href="#13-5-有序-UUID-性能测试" class="headerlink" title="13.5 有序 UUID 性能测试"></a>13.5 有序 UUID 性能测试</h3><p>16 字节的有序 UUID，相比之前 8 字节的自增ID，性能和存储空间对比究竟如何呢？</p><p>我们来做一个测试，插入 1 亿条数据，每条数据占用 500 字节，含有 3 个二级索引，最终的结果如下所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202208301618602.png" alt="image-20220830155246358"></p><p>从上图可以看到插入 1 亿条数据有序 UUID 是最快的，而且在实际业务使用中有序 UUID 在 <code>业务端就可以生成</code> 。还可以进一步减少 SQL 的交互次数。</p><p>另外，虽然有序 UUID 相比自增 ID 多了 8 个字节，但实际只增大了 3G 的存储空间，还可以接受。</p><blockquote><p>在当今的互联网环境中，非常不推荐自增 ID 作为主键的数据库设计。更推荐类似有序 UUID 的全局唯一的实现。</p><p>另外在真实的业务系统中，主键还可以加入业务和系统属性，如用户的尾号，机房的信息等。这样的主键设计就更为考验架构师的水平了。</p></blockquote><p><strong>如果不是 MySQL8.0 肿么办?</strong></p><p>手动赋值字段做主键！</p><p>比如，设计各个分店的会员表的主键，因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题。</p><p>可以在总部 MySQL 数据库中，有一个管理信息表，在这个表中添加一个字段，专门用来记录当前会员编号的最大值。</p><p>门店在添加会员的时候，先到总部 MySQL 数据库中获取这个最大值，在这个基础上加 1，然后用这个值作为新会员的“id”同时，更新总部 MySQL 数据库管理信息表中的当前会员编号的最大值。</p><p>这样一来，各个门店添加会员的时候，都对同一个总部 MySQL 数据库中的数据表字段进行操作，就解决了各门店添加会员时会员编号冲突的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、数据库的设计规范</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC09%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC09%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="第11章-数据库的设计规范"><a href="#第11章-数据库的设计规范" class="headerlink" title="第11章 数据库的设计规范"></a>第11章 数据库的设计规范</h1><h2 id="1-为什么需要数据库设计"><a href="#1-为什么需要数据库设计" class="headerlink" title="1. 为什么需要数据库设计"></a>1. 为什么需要数据库设计</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133292.png" alt="image-20221127170346275"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133600.png" alt="image-20221127170536364"></p><h2 id="2-范-式"><a href="#2-范-式" class="headerlink" title="2. 范 式"></a>2. <strong>范 式</strong></h2><h3 id="2-1-范式简介"><a href="#2-1-范式简介" class="headerlink" title="2.1 范式简介"></a>2.1 范式简介</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133440.png" alt="image-20221127170752919"></p><h3 id="2-2-范式都包括哪些"><a href="#2-2-范式都包括哪些" class="headerlink" title="2.2 范式都包括哪些"></a>2.2 范式都包括哪些</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133471.png" alt="image-20221127171149489"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133430.png" alt="image-20221127171744605"></p><h3 id="2-3-键和相关属性的概念"><a href="#2-3-键和相关属性的概念" class="headerlink" title="2.3 键和相关属性的概念"></a>2.3 键和相关属性的概念</h3><p>范式的定义会使用到主键和候选键，数据库中的键(Key)由一个或者多个属性组成。数据表中常用的几种键和属性的定义:</p><ul><li><code>超键</code>︰能唯─标识元组的属性集叫做超键。</li><li><code>候选键</code>︰如果超键不包括多余的属性，那么这个超键就是候选键。·主键:用户可以从候选键中选择一个作为主键。</li><li><code>外键</code>∶如果数据表R1中的某属性集不是R1的主键，而是另一个数据表R2的主键，那么这个属性集就是数据表R1的外键。</li><li><code>主属性</code>:包含在任一候选键中的属性称为主属性。</li><li><code>非主属性</code>:与主属性相对，指的是不包含在任何一个候选键中的属性。</li></ul><p>通常，我们也将候选键称之为<code>“码”</code>，把主键也称为<code>“主码”</code>。因为键可能是由多个属性组成的，针对单个属性，我们还可以用主属性和非主属性来进行区分。</p><p><strong><font color=blue>举例，这里有两个表：</font></strong></p><p><code>球员表(player)</code>：球员编号 | 姓名 | 身份证号 | 年龄 | 球队编号</p><p><code>球队表(team)</code>：球队编号 | 主教练 | 球队所在地</p><ul><li><code>超键</code>：对于球员表来说，超键就是包括球员编号或者身份证号的任意组合，比如（球员编号）（球员编号，姓名）（身份证号，年龄）等。</li><li><code>候选键</code>：就是最小的超键，对于球员表来说，候选键就是（球员编号）或者（身份证号）。</li><li><code>主键</code>：我们自己选定，也就是从候选键中选择一个，比如（球员编号）。</li><li><code>外键</code>：球员表中的球队编号。</li><li><code>主属性</code>、<code>非主属性</code>：在球员表中，主属性是（球员编号）（身份证号），其他的属性（姓名）（年龄）（球队编号）都是非主属性。</li></ul><h3 id="2-4-第一范式-1st-NF"><a href="#2-4-第一范式-1st-NF" class="headerlink" title="2.4 第一范式(1st NF)"></a>2.4 第一范式(1st NF)</h3><p>第一范式主要是确保数据表中每个字段的值必须具有原子性，也就是说数据表中每个字段的值为&#x3D;&#x3D;不可再次拆分&#x3D;&#x3D;的最小数据单位。</p><p>我们在设计某个字段的时候，对于字段×来说，不能把字段×拆分成字段X_1和字段X_2。事实上，任何的DBMS都会满足第一范式的要求，不会将字段进行拆分。</p><p><strong>举例一：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133255.png" alt="image-20221127173416188"></p><p><strong>举例二：</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133986.png" alt="image-20221127173605845"></p><p><strong>举例三</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133511.png" alt="image-20221127174218098"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133870.png" alt="image-20221127174259078"></p><h3 id="2-5-第二范式-2nd-NF"><a href="#2-5-第二范式-2nd-NF" class="headerlink" title="2.5 第二范式(2nd NF)"></a>2.5 第二范式(2nd NF)</h3><p>第二范式要求，在满足第一范式的基础上，还要&#x3D;&#x3D;满足数据表里的每一条数据记录，都是可唯一标识的（也就是一定有主键）。而且所有非主键字段，都必须完全依赖主键，不能只依赖主键的一部分。&#x3D;&#x3D;如果知道主键的所有属性的值，就可以检索到任何元组（行）的任何属性的任何值。(要求中的主键，其实可以拓展替换为候选键)</p><p>另外 第二范式只能&#x3D;&#x3D;完全函数依赖&#x3D;&#x3D;，不能部分函数依赖</p><p><strong>举例1：</strong><br>成绩表 （学号，课程号，成绩）关系中，（学号，课程号）可以决定成绩，但是学号不能决定成绩，课程号也不能决定成绩，所以“<code>（学号，课程号）→成绩</code>”就是 完全依赖关系 。</p><p><strong>举例2：</strong></p><p><code>比赛表 player_game</code>，里面包含球员编号、姓名、年龄、比赛编号、比赛时间和比赛场地等属性，这里候选键和主键都为（球员编号，比赛编号），我们可以通过候选键（或主键）来决定如下的关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(球员编号, 比赛编号) → (姓名, 年龄, 比赛时间, 比赛场地，得分)</span><br></pre></td></tr></table></figure><p>但是这个数据表不满足第二范式，因为数据表中的字段之间还存在着如下的对应关系：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 姓名和年龄部分依赖球员编号。</span><br><span class="line">(球员编号) → (姓名，年龄)</span><br><span class="line"></span><br><span class="line"># 比赛时间, 比赛场地部分依赖(球员编号, 比赛编号)。</span><br><span class="line">(比赛编号) → (比赛时间, 比赛场地)</span><br></pre></td></tr></table></figure><p><strong><font color=red>对于非主属性来说，并非完全依赖候选键。这样会产生怎样的问题呢？(为什么要满足2NF)</font></strong></p><ol><li><p><code>数据冗余</code>： 如果一个球员可以参加 m 场比赛，那么球员的姓名和年龄就重复了 m-1 次。一个比赛也可能会有 n 个球员参加，比赛的时间和地点就重复了 n-1 次。</p></li><li><p><code>插入异常</code>： 如果我们想要添加一场新的比赛，但是这时还没有确定参加的球员都有谁，那么就没<br>法插入。</p></li><li><p><code>删除异常</code>： 如果我要删除某个球员编号，如果没有单独保存比赛表的话，就会同时把比赛信息删<br>除掉。</p></li><li><p><code>更新异常</code>： 如果我们调整了某个比赛的时间，那么数据表中所有这个比赛的时间都需要进行调<br>整，否则就会出现一场比赛时间不同的情况。</p></li></ol><p>为了避免出现上述的情况，我们可以把球员比赛表设计为下面的三张表。</p><table><thead><tr><th align="center">表名</th><th align="center">属性（字段）</th></tr></thead><tbody><tr><td align="center">球员 player 表</td><td align="center">球员编号、姓名和年龄等属性</td></tr><tr><td align="center">比赛 game 表</td><td align="center">比赛编号、比赛时间和比赛场地等属性</td></tr><tr><td align="center">球员比赛关系 player_game 表</td><td align="center">球员编号、比赛编号和得分等属性</td></tr></tbody></table><p>这样的话，每张数据表都符合第二范式，也就避免了异常情况的发生。</p><blockquote><p>1NF告诉我们字段属性需要是原子性的，而2NF告诉我们一张表就是一个独立的对象，一张表只表达一个意思</p></blockquote><p><strong>举例三</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230133665.png" alt="image-20221127193808695"></p><blockquote><p>小结: 第二范式(2NF）要求实体的属性完全依赖主关键字。如果存在不完全依赖，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与元实体之间是一对多的关系。</p></blockquote><h3 id="2-6-第三范式-3rd-NF"><a href="#2-6-第三范式-3rd-NF" class="headerlink" title="2.6 第三范式(3rd NF)"></a>2.6 第三范式(3rd NF)</h3><p>第三范式是在第二范式的基础上，确保数据表中的每一个非主键字段都和主键字段直接相关，也就是说，&#x3D;&#x3D;要求数据表中的所有非主键字段不能依赖于其他非主键字段。&#x3D;&#x3D;（即，不能存在非主属性A依赖于非主属性B，非主属性B依赖于主键C的情况，即存在”A–&gt;B–&gt;C”的决定关系）通俗地讲，该规则的意思是所有<code>非主键属性</code>之间不能有&#x3D;&#x3D;传递依赖&#x3D;&#x3D;关系，必须<code>相互独立</code>。（这里的主键可以拓展为候选键）</p><p><strong>举例一</strong></p><p><code>部门信息表</code> ：每个部门有部门编号（dept_id）、部门名称、部门简介等信息。</p><p><code>员工信息表</code> ：每个员工有员工编号、姓名、部门编号。列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。(因为会存在传递依赖，也就会导致4种不合理地方)</p><p>如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</p><p><strong>举例二</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134279.png" alt="image-20221127200525576"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134792.png" alt="image-20221127200454347"></p><p><strong>举例三</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134234.png" alt="image-20221127200701162"></p><table><thead><tr><th align="center">表名</th><th align="center">属性（字段）</th></tr></thead><tbody><tr><td align="center">球队表</td><td align="center">球员编号、姓名和球队名称</td></tr><tr><td align="center">球员表</td><td align="center">球队名称、球队主教练</td></tr></tbody></table><p><strong>举例四</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134215.png" alt="image-20221127201249899"></p><blockquote><p>符合3NF后的数据模型通俗地讲，2NF和3NF通常以这句话概括:“每个非键属性依赖于键，依赖于整个键，并且除了键别无他物”。</p></blockquote><h3 id="2-7-小结"><a href="#2-7-小结" class="headerlink" title="2.7 小结"></a>2.7 小结</h3><p>关于数据表的设计，有三个范式要遵循。</p><p>（1）第一范式（1NF），确保每列保持<code>原子性</code></p><p>数据库的每一列都是不可分割的原子数据项，不可再分的最小数据单元，而不能是集合、数组、记录等非原子数据项。</p><p>（2）第二范式（2NF），确保每列都和主键<code>完全依赖</code></p><p>尤其在复合主键的情况向下，非主键部分不应该依赖于部分主键。</p><p>（3）第三范式（3NF），确保每列都和主键<code>直接相关</code>，而不是间接相关</p><p><strong>范式的优点：</strong>数据的标准化有助于消除数据库中的<code>数据冗余</code>，第三范式（3NF）通常被认为在性能、拓展性和数据完整性方面达到了最好的平衡。</p><p><strong>范式的缺点：</strong>范式的使用，可能<code>降低查询的效率</code>。因为范式等级越高，设计出来的数据表就越多、越精细，数据的冗余度就越低，进行数据查询的时候就可能需要<code>关联多张表</code>，这不但代价昂贵，也可能使一些<code>索引策略无效</code>。</p><p>范式只是提出了设计的标准，实际上设计数据表时，未必一定要符合这些标准。开发中，我们会出现为了性能和读取效率违反范式化的原则，通过<code>增加少量的冗余</code>或重复的数据来提高数据库的<code>读性能</code>，减少关联查询，join表的次数，实现<code>空间换取时间</code>的目的。因此在实际的设计过程中要理论结合实际，灵活运用。</p><blockquote><p>范式本身没有优劣之分，只有适用场景不同。没有完美的设计，只有合适的设计，我们在数据表的设计中，还需要根据需求将范式和反范式混合使用。</p></blockquote><h2 id="3-反范式化"><a href="#3-反范式化" class="headerlink" title="3. 反范式化"></a>3. 反范式化</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>有的时候不能简单按照规范要求设计数据表，因为有的数据看似穴余，其实对业务来说十分重要。这个时候，我们就要遵循<code>业务优先</code>的原则，首先满足业务需求，再尽量减少冗余。</p><p>如果数据库中的数据量比较大，系统的UV和PV访问频次比较高，则完全按照MySQL的三大范式设计数据表，读数据时会产生大量的关联查询，在一定程度上会影响数据库的读性能。如果我们想对查询效率进行优化，反范式化也是一种优化思路。此时，可以通过在数据表中增加冗余字段来提高数据库的读性能。</p><p><font color=blue><strong>规范化 vs 性能</strong></font></p><blockquote><ol><li><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p></li><li><p>在数据规范化的同时 , 要综合考虑数据库的性能</p></li><li><p>通过在给定的表中添加额外的字段，以大量减少需要从中搜索信息所需的时间</p></li><li><p>通过在给定的表中插入计算列，以方便查询</p></li></ol></blockquote><h3 id="3-2-应用举例"><a href="#3-2-应用举例" class="headerlink" title="3.2 应用举例"></a>3.2 应用举例</h3><p><strong>举例一</strong></p><p>员工的信息存储在 <code>employees</code> 表 中，部门信息存储在 <code>departments</code> 表 中。通过 employees 表中的department_id字段与 departments 表建立关联关系。如果要查询一个员工所在部门的名称：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,department_name</span><br><span class="line"><span class="keyword">from</span> employees e <span class="keyword">join</span> departments d</span><br><span class="line"><span class="keyword">on</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p>如果经常需要进行这个操作，连接查询就会浪费很多时间。可以在 employees 表中增加一个冗余字段department_name，这样就不用每次都进行连接操作了。</p><p><strong>举例二</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134576.png" alt="image-20221127203136246"></p><p><strong>举例三</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134032.png" alt="image-20221127203343257"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134928.png" alt="image-20221127203421605"></p><p><strong>举例四</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134008.png" alt="image-20221127203526841"></p><p><strong><font color=blue>实验数据：模拟两张百万量级的数据表</font></strong></p><p>为了更好地进行 SQL 优化实验，我们需要给学生表和课程评论表随机模拟出百万量级的数据。我们可以通过存储过程来实现模拟数据。</p><ul><li><strong>创建表：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE atguigudb3;</span><br><span class="line"></span><br><span class="line">USE atguigudb3;</span><br><span class="line"></span><br><span class="line">#学生表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">  stu_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT ， stu_name <span class="type">VARCHAR</span>(<span class="number">25</span>) ， create_time DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#课程评论表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class_comment(</span><br><span class="line">  comment_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT ， class_id <span class="type">INT</span>,</span><br><span class="line">  comment_text <span class="type">VARCHAR</span>(<span class="number">35</span>) ， comment_time DATETIME ， stu_id <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>创建存储过程</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">###创建向学生表中添加数据的存储过程</span><br><span class="line">DELIMITER</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> batch_insert_student(<span class="keyword">IN</span> <span class="keyword">START</span> <span class="type">INT</span>(<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="type">INT</span> (<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> date_start DATETIME <span class="keyword">DEFAULT</span> (<span class="string">&#x27;2017-01-01 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> date_temp DATETIME;</span><br><span class="line"><span class="keyword">SET</span> date_temp <span class="operator">=</span> date_start;</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">REPEAT</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> date_temp <span class="operator">=</span> DATE_ADD(date_temp,<span class="type">INTERVAL</span> RAND( )<span class="operator">*</span><span class="number">60</span> <span class="keyword">SECOND</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(stu_id, stu_name,create_time)</span><br><span class="line"><span class="keyword">VALUES</span> ((<span class="keyword">START</span><span class="operator">+</span>i), CONCAT (<span class="string">&#x27;stu_&#x27;</span>,i), date_temp) ;</span><br><span class="line">UNTIL i <span class="operator">=</span> max_num</span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###创建向课程评论表中添加数据的存储过程</span><br><span class="line"></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> batch_insert_class_comments(<span class="keyword">IN</span> <span class="keyword">START</span> <span class="type">INT</span>(<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="type">INT</span> (<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> date_start DATETIME <span class="keyword">DEFAULT</span> (<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> date_temp DATETIME;</span><br><span class="line"><span class="keyword">DECLARE</span> comment_text <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> stu_id <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> date_temp <span class="operator">=</span> date_start;</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">REPEAT</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> date_temp <span class="operator">=</span> DATE_ADD(date_temp,<span class="type">INTERVAL</span> RAND( )<span class="operator">*</span><span class="number">60</span> <span class="keyword">SECOND</span>);</span><br><span class="line"><span class="keyword">SET</span> comment_text<span class="operator">=</span>SUBSTR(MD5(RAND()),<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">SET</span> stu_id<span class="operator">=</span><span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `class_comment`(`comment_id`,`class_id`,`comment_text`,`comment_time`,`stu_id`)</span><br><span class="line"><span class="keyword">VALUES</span> ((<span class="keyword">START</span><span class="operator">+</span>i),<span class="number">10001</span>,comment_text,date_temp,stu_id);</span><br><span class="line">UNTIL i <span class="operator">=</span> max_num</span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure><ul><li><strong>调用存储过程</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#调用存储过程,学生id从<span class="number">10001</span>开始，添加<span class="number">1000000</span>条数据</span><br><span class="line"><span class="keyword">CALL</span> batch_insert_student(<span class="number">10000</span>,<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">#添加数据的过程的调用，一个<span class="number">1000000</span>条数据</span><br><span class="line"><span class="keyword">CALL</span> batch_insert_class_comments(<span class="number">10000</span>,<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">#######</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;#<span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> class_comment;#<span class="number">1000000</span></span><br></pre></td></tr></table></figure><ul><li><strong>测试</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">###需求####</span><br><span class="line">#<span class="number">0.050</span></span><br><span class="line"><span class="keyword">SELECT</span> p.comment_text, p.comment_time, stu.stu_name</span><br><span class="line"><span class="keyword">FROM</span> class_comment <span class="keyword">AS</span> p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> stu</span><br><span class="line"><span class="keyword">ON</span> p.stu_id <span class="operator">=</span> stu.stu_id</span><br><span class="line"><span class="keyword">WHERE</span> p.class_id <span class="operator">=</span> <span class="number">10001</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> p.comment_id <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>运行时长为 0.050 秒，对于网站的响应来说，这已经很慢了，用户体验会非常差。<br>如果我们想要提升查询的效率，可以允许适当的数据冗余，也就是在商品评论表中增加用户昵称字段，在 class_comment 数据表的基础上增加 stu_name 字段，就得到了 class_comment2 数据表。</p><ul><li><strong>反范式优化实验对比</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">####进行反范式化的设计#####</span><br><span class="line">#表的复制</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class_comment1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class_comment;</span><br><span class="line"></span><br><span class="line">#添加主键，保证class_comment1与class_comment的结构相同</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> class_comment1</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(comment_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> class_comment1;</span><br><span class="line"></span><br><span class="line">#向课程评论表中增加stu_name字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> class_comment1</span><br><span class="line"><span class="keyword">ADD</span> stu_name <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#给新添加的字段赋值</span><br><span class="line"><span class="keyword">UPDATE</span> class_comment1 c</span><br><span class="line"><span class="keyword">SET</span> stu_name<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> stu_name</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">WHERE</span> c.stu_id<span class="operator">=</span>s.stu_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>如果我们想要查询课程 ID 为 10001 的前 10000 条评论，需要写成下面这样：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查询同样的需求</span><br><span class="line">#<span class="number">0.020</span></span><br><span class="line"><span class="keyword">SELECT</span> comment_text, comment_time, stu_name</span><br><span class="line"><span class="keyword">FROM</span> class_comment1</span><br><span class="line"><span class="keyword">WHERE</span> class_id <span class="operator">=</span> <span class="number">10001</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> class_id <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>优化之后只需要扫描一次聚集索引即可，运行时间为 0.020 秒，查询时间是之前的 1&#x2F;2。 你能看到，在数据量大的情况下，查询效率会有显著的提升。</p><h3 id="3-3-反范式的新问题"><a href="#3-3-反范式的新问题" class="headerlink" title="3.3 反范式的新问题"></a>3.3 反范式的新问题</h3><ul><li>存储<code>空间变大</code>了</li><li>一个表中字段做了修改，另一个表中冗余的字段也需要做同步修改，否则<code>数据不一致</code></li><li>若采用存储过程来支持数据的更新、删除等额外操作，如果更新频繁，会非常<code>消耗系统资源</code></li><li>在<code>数据量小</code>的情况下，反范式不能体现性能的优势，可能还会让数据库的设计更加<code>复杂</code></li></ul><h3 id="3-4-反范式的适用场景"><a href="#3-4-反范式的适用场景" class="headerlink" title="3.4 反范式的适用场景"></a>3.4 反范式的适用场景</h3><p>当冗余信息有价值或者能<code>大幅度提高查询效率</code>的时候，我们才会采取反范式的优化。</p><p><font color=blue>1. 增加冗余字段的建议 </font></p><p>1）这个冗余字段<code>不需要经常进行修改</code></p><p>2）这个冗余字段<code>查询的时候不可或缺</code> (因为经常要用，所以才增加该冗余字段)</p><p><font color=blue>2. 历史快照、历史数据的需要</font></p><p>在现实生活中，我们经常需要一些冗余信息，比如订单中的收货人信息，包括姓名、电话和地址等。每次发生的<code>订单收货信息</code>都属于<code>历史快照</code>，需要进行保存，但用户可以随时修改自己的信息，这时保存这些冗余信息是非常有必要的。</p><p>反范式优化也常用在<code>数据仓库</code>的设计中，因为数据仓库通常<code>存储历史数据</code>，对增删改的实时性要求不强，对历史数据的分析需求强。这时适当允许数据的冗余度，更方便进行数据分析。</p><blockquote><p><strong>简单总结下数据仓库和数据库在使用上的区别:</strong></p><ol><li>数据库设计的目的在于<code>捕获数据</code>，而数据仓库设计的目的在于<code>分析数据</code>；</li><li>数据库对数据的<code>增删改实时性</code>要求强，需要存储在线的用户数据，而数据仓库存储的一般是<code>历史数据</code>;</li><li>数据库设计需要<code>尽量避免冗余</code>，但为了提高查询效率也允许一定的<code>冗余度</code>，而数据仓库在设计上更偏向采用反范式设计</li></ol></blockquote><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;我们的反范式 反的是第二 或 第三范式，第一范式是一定要遵守的哦~</p><h2 id="4-BCNF-巴斯范式"><a href="#4-BCNF-巴斯范式" class="headerlink" title="4. BCNF(巴斯范式)"></a>4. BCNF(巴斯范式)</h2><p>人们在3NF的基础上进行了改进，提出了**巴斯范式(BCNF)<strong>，也叫做</strong>巴斯-科德范式(Boyce-Codd NormalForm)**。BCNF被认为没有新的设计规范加入，只是对第三范式中设计规范要求更强，使得数据库冗余度更小。所以，称为是<code>修正的第三范式</code>，或<code>扩充的第三范式</code>，BCNF不被称为第四范式</p><p>若一个关系达到了第三范式，并且它只有一个候选键，或者它的每个候选键都是单属性，则该关系自然达到BC范式。</p><p>一般来说，一个数据库设计符合3NF或BCNF就可以了</p><p><strong>1、案例</strong></p><p>我们分析如下表的范式情况:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134742.png" alt="image-20221221211602267"></p><p>在这个表中，一个仓库只有一个管理员，同时一个管理员也只管理一个仓库。先来梳理下这些属性之间的依赖关系。</p><p>仓库名决定了管理员，管理员也决定了仓库名，同时（仓库名，物品名）的属性集合可以决定数量这个属性。这样，我们就可以找到数据表的候选键。</p><p><code>候选键</code> ：是（管理员，物品名）和（仓库名，物品名），然后从候选键中选择一个作为 主键 ，比如（仓库名，物品名）。<br><code>主属性</code> ：包含在任一候选键中的属性，也就是仓库名，管理员和物品名。</p><p><code>非主属性</code> ：数量这个属性</p><p><strong>2、是否符合三范式</strong><br>如何判断一张表的范式呢？需要根据范式的等级，从低到高来进行判断</p><ul><li><p>首先，数据表每个属性都是原子性的，符合 1NF 的要求；</p></li><li><p>其次，数据表中非主属性”数量“都与候选键全部依赖，（仓库名，物品名）决定数量，（管理员，物品名）决定数量。因此，数据表符合 2NF 的要求；</p></li><li><p>最后，数据表中的非主属性，不传递依赖于候选键。因此符合 3NF 的要求。</p></li></ul><p><strong>3、存在的问题</strong><br>既然数据表已经符合了 3NF 的要求，是不是就不存在问题了呢？来看下面的情况：</p><ol><li>增加一个仓库，但是还没有存放任何物品。根据数据表实体完整性的要求，主键不能有空值，因此会出现插入异常 ；</li><li>如果仓库更换了管理员，就可能会 修改数据表中的多条记录 ；</li><li>如果仓库里的商品都卖空了，那么此时仓库名称和相应的管理员名称也会随之被删除。</li></ol><p>你能看到，即便数据表符合 3NF 的要求，同样可能存在插入，更新和删除数据的异常情况</p><p><strong>4、问题解决</strong><br>首先需要确认造成异常的原因：&#x3D;&#x3D;主属性仓库名对于候选键（管理员，物品名）是部分依赖的关系，&#x3D;&#x3D;这样就有可能导致上面的异常情况。因此引入&#x3D;&#x3D;BCNF，它在 3NF 的基础上消除了主属性对候选键的部分依赖或者传递依赖关系。&#x3D;&#x3D;</p><p><font color=blue>如果在关系R中，U为主键，A属性是主键的一个属性，若存在A-&gt;Y，Y为主属性(也就是非候选码中的属性)，则该关系不属于BCNF</font>。</p><p>根据 BCNF 的要求，需要把仓库管理关系 warehouse_keeper 表拆分成下面这样：</p><ul><li><code>仓库表</code> ：（仓库名，管理员）</li><li><code>库存表</code> ：（仓库名，物品名，数量）</li></ul><p>这样就不存在主属性对于候选键的部分依赖或传递依赖，上面数据表的设计就符合 BCNF。</p><p><strong><font color=orange>再举例：</font></strong></p><p>有一个 学生导师表，其中包含字段：学生ID，专业，导师，专业GPA，这其中学生ID和专业是联合主键。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134198.png" alt="image-20221221214347478"></p><p>这个表的设计满足三范式，但是这里存在另一个依赖关系，“专业”依赖于“导师”，也就是说每个导师只做一个专业方面的导师，只要知道了是哪个导师，自然就知道是哪个专业的了。</p><p>所以这个表的部分主键Major依赖于非主键属性Advisor，那么我们可以进行以下的调整，拆分成2个表：</p><p>学生导师表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134264.png" alt="image-20221221214511430"></p><p>导师表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134415.png" alt="image-20221221214533669"></p><h2 id="5-第四范式"><a href="#5-第四范式" class="headerlink" title="5. 第四范式"></a>5. 第四范式</h2><p>多值依赖的概念:</p><ul><li><code>多值依赖</code>即属性之间的一对多关系，记为K→→A</li><li><code>函数依赖</code>事实上是单值依赖，所以不能表达属性值之间的一对多关系</li><li><code>平凡的多值依赖</code>∶全集U&#x3D;K+A，一个K可以对应于多个A，即K→→A。此时整个表就是一组一对多关系</li><li><code>非平凡的多值依赖</code>︰全集U&#x3D;K+A+B，一个K可以对应于多个A，也可以对应于多个B，A与B互相独立，即K→→A，K→→B。整个表有多组一对多关系，且有：“一”部分是相同的属性集合，“多””部分是互相独立的属性集合</li></ul><p>第四范式即&#x3D;&#x3D;在满足巴斯-科德范式(BCNF）的基础上，消除非平凡且非函数依赖的多值依赖&#x3D;&#x3D;（即把同一表内的多对多关系删除)</p><p><strong>举例1：</strong><br>职工表(职工编号，职工孩子姓名，职工选修课程)。</p><p>在这个表中，同一个职工可能会有多个职工孩子姓名。同样，同一个职工也可能会有多个职工选修课程，即这里存在着多值事实，不符合第四范式。</p><p>如果要符合第四范式，只需要将上表分为两个表，使它们只有一个多值事实，例如： <code>职工表一 (职工编号，职工孩子姓名)</code>，<code>职工表二 (职工编号，职工选修课程)</code>，两个表都只有一个多值事实，所以符合第四范式</p><p><strong>举例2：</strong><br>比如建立课程、教师、教材的模型。我们规定，每门课程有对应的一组教师，每门课程也有对应的一组教材，一门课程使用的教材和教师没有关系。我们建立的关系表如下：</p><p>课程ID，教师ID，教材ID；这三列作为联合主键。</p><p>为了表述方便，我们用Name代替ID，这样更容易看懂：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134153.png" alt="image-20221221215720852"></p><p>这个表除了主键，就没有其他字段了，所以肯定满足BC范式，但是却存在<code>多值依赖</code>导致的异常。</p><p>假如下学期想采用一本新的英版高数教材，但是还没确定具体哪个老师来教，那么就无法在这个表中维护Course高数和Book英版高数教材的的关系。</p><p>解决办法是把这个多值依赖的表拆解成2个表，分别建立关系。这是拆分后的表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134365.png" alt="image-20221221215822964"></p><p>以及</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134435.png" alt="image-20221221215839791"></p><h2 id="6-第五范式、域键范式"><a href="#6-第五范式、域键范式" class="headerlink" title="6. 第五范式、域键范式"></a>6. 第五范式、域键范式</h2><p>除了第四范式外，还有更高级的第五范式（又称完美范式）和域键范式（DKNF）。</p><p>在满足第四范式（4NF）的基础上，消除不是由候选键所蕴含的连接依赖。&#x3D;&#x3D;如果关系模式R中的每一个连接依赖均由R的候选键所隐含&#x3D;&#x3D;，则称此关系模式符合第五范式。</p><p>函数依赖是多值依赖的一种特殊的情况，而多值依赖实际上是连接依赖的一种特殊情况。但连接依赖不像函数依赖和多值依赖可以由<code>语义直接导出</code> ，而是在 <code>关系连接运算 </code>时才反映出来。存在连接依赖的关系模式仍可能遇到数据冗余及插入、修改、删除异常等问题。</p><p>第五范式处理的是<code>无损连接问题</code>，这个范式基本 <code>没有实际意义</code> ，因为无损连接很少出现，而且难以察觉。而域键范式试图定义一个<code>终极范式</code> ，该范式考虑所有的依赖和约束类型，但是实用价值也是最小的，只存在理论研究中。</p><h2 id="7-实战案例"><a href="#7-实战案例" class="headerlink" title="7. 实战案例"></a>7. 实战案例</h2><p>商超进货系统中的进货单表进行剖析：</p><p>进货单表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230134807.png" alt="image-20221221230058669"></p><p>这个表中的字段很多，表里的数据量也很惊人。大量重复导致表变得庞大，效率极低。如何改造?</p><blockquote><p>在实际工作场景中，这种由于数据表结构设计不合理，而导致的数据重复的现象并不少见。往往是系统虽然能够运行，承载能力却很差，稍微有点流量，就会出现内存不足、CUP使用率飙升的情况，甚至会导致整个项目失败</p></blockquote><h3 id="7-1-迭代1次-考虑1NF"><a href="#7-1-迭代1次-考虑1NF" class="headerlink" title="7.1 迭代1次:考虑1NF"></a>7.1 迭代1次:考虑1NF</h3><p>第一范式要求:&#x3D;&#x3D;所有的字段都是基本数据字段，不可进一步拆分&#x3D;&#x3D;。这里需要确认，所有的列中，每个字段只包含—种数据。</p><p>这张表里把“property”这一字段，拆分成”specification (规格)“和”unit(单位)”，这2个字段如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135773.png" alt="image-20221221230249133"></p><h3 id="7-2-迭代2次-考虑2NF"><a href="#7-2-迭代2次-考虑2NF" class="headerlink" title="7.2 迭代2次:考虑2NF"></a>7.2 迭代2次:考虑2NF</h3><p>第二范式要求，在满足第一范式的基础上，&#x3D;&#x3D;还要满足数据表里的每一条数据记录，都是可唯一标识的。而且所有字段，都必须完全依赖主键，不能只依赖主键的一部分&#x3D;&#x3D;</p><p>第1步，就是要确定这个表的主键。通过观察发现，字段““listnumber(单号)”+”barcode(条码)”可以唯一标识每一条记录，可以作为主键。</p><p>第2步，确定好了主键以后，判断哪些字段完全依赖主键，哪些字段只依赖于主键的一部分。把只依赖于主键一部分的字段拆分出去，形成新的数据表。</p><p>首先，进货单明细表里面的“goodsname(名称)” “specification(规格)“unit(单位)“这些信息是商品的属性，只依赖于“barcode(条码)”，不完全依赖主键，可以拆分出去。把这3个字段加上它们所依赖的字段”“barcode(条码)”，拆分形成一个新的数据表“商品信息表”。<br>这样一来，原来的数据表就被拆分成了两个表</p><p>商品信息表:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135752.png" alt="image-20221221230713549"></p><p>进货单表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135798.png" alt="image-20221221230734844"></p><p>此外，字段“supplierid(供应商编号)”“suppliername(供应商名称)””stock(仓库)“只依赖于”listnumber(单号)”，不完全依赖于主键，所以，可以把”supplierid”“suppliername”stock”这3个字段拆出去，再加上它们依赖的字段”listnumber(单号)””，就形成了一个新的表“<code>进货单头表</code>”。剩下的字段，会组成新的表，我们叫它”进货单明细表”。</p><p>原来的数据表就拆分成了3个表</p><p>进货单头表:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135984.png" alt="image-20221221230951770"></p><p>进货单明细表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135702.png" alt="image-20221221231013100"></p><p>商品信息表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135816.png" alt="image-20221221231042371"></p><p>现在来分析一下拆分后的3个表，保证这3个表都满足第二范式的要求</p><p>第3步，在”商品信息表”中，字段”barcode”是有<code>可能存在重复的</code>，比如，用户门店可能有散装称重商品和自产商品，会存在条码共用的情况。所以，所有的字段都不能唯一标识表里的记录。这个时候必须给这个表加上一个主键，比如说是自增字段”<code>itemnumber</code>”。</p><p>现在就可以把进货单明细表里面的字段”barcode”都替换成字段”itemnumber”，这就得到了新的如下表</p><p>进货单明细表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135535.png" alt="image-20221221231358391"></p><p>商品信息表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135871.png" alt="image-20221221231342038"></p><p>拆分后的3个数据表就全部满足了第二范式的要求</p><h3 id="7-3-迭代3次-考虑3NF"><a href="#7-3-迭代3次-考虑3NF" class="headerlink" title="7.3 迭代3次:考虑3NF"></a>7.3 迭代3次:考虑3NF</h3><p>进货单头表还有数据冗余的可能。因为“supplername “依赖”supplierid”那么，这个时候，就可以按照第三范式的原则进行拆分了。进一步拆分一下进货单头表，把它拆解成供货商表和进货单头表。</p><p>供货商表:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135024.png" alt="image-20221221231543741"></p><p>进货单头表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135463.png" alt="image-20221221231609611"></p><p>这2个表都满足第三范式的要求了</p><h3 id="7-4-反范式化-业务优先的原则"><a href="#7-4-反范式化-业务优先的原则" class="headerlink" title="7.4 反范式化:业务优先的原则"></a>7.4 反范式化:业务优先的原则</h3><p>在进货单明细表中，<code>quantity * importprice = importvalue</code>、“importprice”、“quantity”和”importvalue可以通过任意两个计算出第三个来，这就存在冗余字段。如果严格按照第三范式的要求，应该进行进一步优化。优化的办法是删除其中一个字段，只保留另外2个，这样就没有冗余数据了。</p><p>可是，真的可以这样做吗? 要回答这个问题就要先了解下实际工作中的&#x3D;&#x3D;业务优先原则&#x3D;&#x3D;。</p><p>所谓的业务优先原则，就是指一切以业务需求为主，技术服务于业务。<strong>完全按照理论的设计不一定就是最优，还要根据实际情况来决定。</strong>这里就来分析一下不同选择的利与弊。</p><p>对于<code>quantity * importprice =importvalue</code>，看起来”importvalue”似乎是冗余字段，但并不会导致数据不一致，可是，如果把这个字段取消，是会影响业务的。</p><p>因为有的时候，供货商会经常进行一些促销活动，按金额促销，那他们拿来的进货单只有金额，没有价格。而”“importprice”反而是通过“importvalue &#x2F; quantity”计算出来的，经过四舍五入，会产生较大的误差。这样日积月累，最终会导致查询结果出现较大偏差，影响系统的可靠性。</p><p>举例:进货金额(importvalue)是25.5元，数量(quantity)是 34，那么进货价格(importprice)就等于25.5&#x2F;34&#x3D;0.74元，但是如果用这个计算出来的进货价格(importprice)来计算进货金额，那么，进货金额(importvalue)就等于0.74x34&#x3D;25.16元，其中相差了25.5-25.16&#x3D;0.34元</p><p>所以，本着业务优先的原则，在不影响系统可靠性的前提下，可适当增加数据冗余，保留“importvalue”importprice”和“quantity”。</p><p>因此，最后我们可以把进货单表拆分成下面的4个表:</p><p>进货单明细表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135595.png" alt="image-20221221232106379"></p><p>商品信息表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135389.png" alt="image-20221221232038171"></p><p>供货商表:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135598.png" alt="image-20221221231543741"></p><p>进货单头表：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135509.png" alt="image-20221221231609611"></p><p>这样一来，我们就避免了冗余，而且还能够满足业务的需求，这样的数据表设计，才是合格的设计。</p><h2 id="8-ER模型"><a href="#8-ER模型" class="headerlink" title="8. ER模型"></a>8. ER模型</h2><p>数据库设计是牵一发而动全身的。那有没有什么办法提前看到数据库的全貌呢?比如需要哪些数据表、数据表中应该有哪些字段，数据表与数据表之间有什么关系、通过什么字段进行连接，等等。这样才能进行整体的梳理和设计。</p><p>其实，ER模型就是一个这样的工具。ER模型也叫作<code>实体关系模型</code>，是用来描述现实生活中客观存在的事物、事物的属性，以及事物之间关系的一种数据模型。&#x3D;&#x3D;在开发基于数据库的信息系统的设计阶段，通常使用ER模型来描述信息需求和信息特性，帮助我们理清业务逻辑，从而设计出优秀的数据库&#x3D;&#x3D;</p><h3 id="8-1-ER模型包括哪些要素"><a href="#8-1-ER模型包括哪些要素" class="headerlink" title="8.1 ER模型包括哪些要素?"></a>8.1 ER模型包括哪些要素?</h3><p>&#x3D;&#x3D;ER模型中有三个要素。分别是实体、属性和关系&#x3D;&#x3D;</p><ul><li><p><code>实体</code>，可以看做是数据对象，往往对应于现实生活中的真实存在的个体。在ER模型中，用<code>矩形</code>来表示。实体分为两类，分别是<code>强实体</code>和<code>弱实体</code>。强实体是指不依赖于其他实体的实体;弱实体是指对另一个实体有很强的依赖关系的实体。</p></li><li><p><code>属性</code>， 则是指实体的特性。比如超市的地址、联系电话、员工数等。在ER模型中用<code>椭圆形</code>来表示。</p></li><li><p><code>关系</code>， 则是指实体之间的联系。比如超市把商品卖给顾客，就是一种超市与顾客之间的联系。在ER模型中用菱形来表示。</p></li></ul><p>注意:实体和属性不容易区分。这里提供一个原则:要从系统整体的角度出发去看，&#x3D;&#x3D;可以独立存在的是实体，不可再分的是属性&#x3D;&#x3D;。也就是说，属性不能包含其他属性。</p><h3 id="8-2-关系的类型"><a href="#8-2-关系的类型" class="headerlink" title="8.2 关系的类型"></a>8.2 关系的类型</h3><p>在ER模型的3个要素中，关系又可以分为3种类型，分别是一对一、一对多、多对多。</p><ul><li><p><code>一对一</code>︰指实体之间的关系是一一对应的，比如个人与身份证信息之间的关系就是一对一的关系。一个人只能有一个身份证信息，一个身份证信息也只属于一个人。</p></li><li><p><code>一对多</code>∶指一边的实体通过关系，可以对应多个另外一边的实体。相反，另外一边的实体通过这个关系，则只能对应唯一的一边的实体。比如说，新建一个班级表，而每个班级都有多个学生，每个学生则对应一个班级，班级对学生就是一对多的关系。</p></li><li><p><code>多对多</code>︰指关系两边的实体都可以通过关系对应多个对方的实体。比如在进货模块中，供货商与超市之间的关系就是多对多的关系，一个供货商可以给多个超市供货，一个超市也可以从多个供货商那里采购商品。再比如一个选课表，有许多科目，每个科目有很多学生选，而每个学生又可以选择多个科目，这就是多对多的关系。</p></li></ul><h3 id="8-3-建模分析"><a href="#8-3-建模分析" class="headerlink" title="8.3 建模分析"></a>8.3 建模分析</h3><p>ER模型看起来比较麻烦，但是对我们把控项目整体非常重要。如果你只是开发一个小应用，或许简单设计几个表够用了，一旦要设计有一定规模的应用，在项目的初始阶段，建立完整的ER模型就非常关键了。开发应用项目的实质，其实就是<code>建模</code></p><p>此处设计的案例是<code>电商业务</code>，由于电商业务太过庞大且复杂，所以做了业务简化，比如针对SKU(StockKeepingUnit，库存量单位）和SPU(Standard Product Unit，标准化产品单元)的含义上，直接使用了SKU，并没有提及SPU的概念。本次电商业务设计总共有8个实体，如下所示。</p><ul><li>地址实体</li><li>用户实体</li><li>购物车实体</li><li>评论实体</li><li>商品实体</li><li>商品分类实体</li><li>订单实体</li><li>订单详情实体</li></ul><p>其中，<code>用户</code>和<code>商品分类</code>是强实体，因为它们不需要依赖其他任何实体。而其他同于弱实体，因为它们虽然都可以独立存在，但是它们都依赖用户这个实体，因此都是弱实体。知道了这些要素就可以给电商业务创建ER模型了，如图:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135079.png" alt="image-20221223000234590"></p><p>在这个图中，地址和用户之间的添加关系，是一对多的关系，而商品和商品详情示一对一的关系，商品和订单是多对多的关系。 这个 ER 模型，包括了 8个实体之间的 8种关系。</p><p>（1）用户可以在电商平台添加多个地址；</p><p>（2）用户只能拥有一个购物车；</p><p>（3）用户可以生成多个订单；</p><p>（4）用户可以发表多条评论；</p><p>（5）一件商品可以有多条评论；</p><p>（6）每一个商品分类包含多种商品；</p><p>（7）一个订单可以包含多个商品，一个商品可以在多个订单里。</p><p>（8）订单中又包含多个订单详情，因为一个订单中可能包含不同种类的商品</p><h3 id="8-4-ER-模型的细化"><a href="#8-4-ER-模型的细化" class="headerlink" title="8.4 ER 模型的细化"></a>8.4 ER 模型的细化</h3><p>有了这个 ER 模型就可以从整体上<code>理解</code>电商的业务了。刚刚的 ER 模型展示了电商业务的框架，但是只包括了订单，地址，用户，购物车，评论，商品，商品分类和订单详情这八个实体，以及它们之间的关系，还不能对应到具体的表，以及表与表之间的关联。需要<code>把属性加上</code>，用<code>椭圆</code>来表示，这样得到的 ER 模型就更加完整了。</p><p>因此，我们需要进一步去设计一下这个 ER 模型的各个局部，也就是细化下电商的具体业务流程，然后把它们综合到一起，形成一个完整的 ER 模型。这样可以理清数据库的设计思路。</p><p>接下来再分析一下各个实体都有哪些属性，如下所示。</p><p>（1） <code>地址实体</code> 包括用户编号、省、市、地区、收件人、联系电话、是否是默认地址。<br>（2） <code>用户实体</code> 包括用户编号、用户名称、昵称、用户密码、手机号、邮箱、头像、用户级别。<br>（3） <code>购物车实体</code> 包括购物车编号、用户编号、商品编号、商品数量、图片文件url<br>（4）<code>订单实体</code> 包括订单编号、收货人、收件人电话、总金额、用户编号、付款方式、送货地址、下单时间。<br>（5） <code>订单详情实体</code> 包括订单详情编号、订单编号、商品名称、商品编号、商品数量。<br>（6） <code>商品实体</code> 包括商品编号、价格、商品名称、分类编号、是否销售，规格、颜色。<br>（7） <code>评论实体</code> 包括评论id、评论内容、评论时间、用户编号、商品编号<br>（8） <code>商品分类实体</code> 包括类别编号、类别名称、父类别编号</p><p>这样细分之后就可以重新设计电商业务了，ER 模型如图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135648.png" alt="image-20221223000842728"></p><h3 id="8-5-ER-模型图转换成数据表"><a href="#8-5-ER-模型图转换成数据表" class="headerlink" title="8.5 ER 模型图转换成数据表"></a>8.5 ER 模型图转换成数据表</h3><p>通过绘制 ER 模型已经理清了业务逻辑，现在就要进行非常重要的一步了：把绘制好的 ER模型，转换成具体的数据表，下面介绍下转换的原则：<br>（1）一个<code>实体</code>通常转换成一个 <code>数据表</code> ；<br>（2）一个 <code>多对多的关系</code> ，通常也转换成一个 <code>数据表</code> ；<br>（3）一个<code> 1 对 1</code> ，或者 <code>1 对多</code> 的关系，往往通过表的<code> 外键</code> 来表达，而不是设计一个新的数据表；<br>（4） <code>属性</code> 转换成表的 <code>字段 </code>。</p><p>下面结合前面的ER模型，具体讲解一下怎么运用这些转换的原则，把 ER 模型转换成具体的数据表，从而把抽象出来的数据模型，落实到具体的数据库设计当中</p><p><font color=orange>1、一个实体通常转换成一个数据表</font></p><p><strong>先来看一下强实体转换成数据表:</strong></p><p><code>用户实体</code>转换成<code>用户表</code>(user_info)的代码如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info`(</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">200</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `nick_name` <span class="type">varchar</span> (<span class="number">200</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  `passwd` <span class="type">varchar</span> (<span class="number">200</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  `phone_num` <span class="type">varchar</span> (<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `head_img` <span class="type">varchar</span> ( <span class="number">200</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">  `user_level` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户级别&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>商品分类实体</code>转换成商品分类表 (base_category)，由于商品分类可以有一级分类和二级分类，比如一级分类有家居、手机等等分类，二级分类可以根据手机的一级分类分为手机配件，运营商等，这里我们把商品分类实体规划为两张表，分别是一级分类表和二级分类表，之所以这么规划是因为一级分类和二级分类都是有限的，存储为两张表业务结构更加清晰。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#一级分类表</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>`base_category1`(</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span> (<span class="number">10</span>) <span class="keyword">NOT</span><span class="operator">-</span><span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;一级分类表&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#二级分类表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `base_category2`(</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span> (<span class="number">208</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;二级分类名称&#x27;</span>,</span><br><span class="line">  `category1_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;一级分类编号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;二级分类表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>那么如果规划为—张表呢，表结构如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `base_category`(</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span> (<span class="number">200</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名不&#x27;</span>,</span><br><span class="line">  `category_parent_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父分类编号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY ( id  ) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span> <span class="string">&#x27;分类表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果这样分类的话，那么查询一级分类时候，就需要判断父分类编号是否为空，但是如果插入二级分类的时候也是空，就容易造成<code>业务数据混乱</code>。而且查询二级分类的时候IS NOT NULL条件是无法使用到索引的。同时，这样的设计也不符合第二范式(因为父分类编号并不依赖分类编号ID，因为父分类编号可以有很多数据为NULL)，所以需要进行表的拆分。因此无论是<code>业务需求</code>还是<code>数据库表的规范</code>来看都应该拆分为两张表。</p><p><strong>下面我们再把弱实体转换成数据表:</strong></p><p>地址实体转换成地址表(user_address) ，如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_address`(</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;province&#x27;</span> <span class="type">varchar</span> (<span class="number">500</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;省&#x27;</span>,</span><br><span class="line">`city` <span class="type">varchar</span> (<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;市&#x27;</span>,</span><br><span class="line">`user_address` <span class="type">varchar</span> (<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;具体地址&#x27;</span>,</span><br><span class="line">`user_id bipint(<span class="number">20</span>)` <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">`consignee` <span class="type">varchar</span>( <span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收件人&#x27;</span>,</span><br><span class="line">`phone_num ` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT ‘联系方式<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">`is_default` varchar( 1) DEFAULT NULL COMMENT &#x27;</span>是否是默认<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">PRIMARY KEY (`id`)</span></span><br><span class="line"><span class="string">)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=&#x27;</span>用户地址表<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure><p>订单实体转换成订单表（order_info)，如下所示，实际业务中订单的信息会非常多，我们这里做了简化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_info`(</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `consignee` <span class="type">varchar</span> (<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收货人&#x27;</span>,</span><br><span class="line">  `consignee_tel` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;收件人电话&#x27;</span>,</span><br><span class="line">  `total_amount` <span class="type">decimal</span>( <span class="number">10</span>,<span class="number">2</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;总金额&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `payment_way` <span class="type">varchar</span>(<span class="number">20</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;付款方式&#x27;</span>,</span><br><span class="line">  `delivery_address` <span class="type">varchar</span>( <span class="number">1000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;送货地址&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;下单时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORNAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span> <span class="string">&#x27;订单表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>订单详情实体转换成订单详情表（order_detail)，如下所示。(用于体现多对多关系的，见下节)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#订单详情表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_detail`(</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单详情编号&#x27;</span>,</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单编号&#x27;</span>,</span><br><span class="line">  `sku_id` <span class="type">bigint</span>(<span class="number">20</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku_id&#x27;</span>,</span><br><span class="line">  `sku_name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku名称&#x27;</span>,</span><br><span class="line">  `sku_num` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;购买个数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;订单明细表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>购物车实体转换成购物车表(cart_info)，如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `cart_info`(</span><br><span class="line">  `cart_id` <span class="type">bigint</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT<span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `sku_id` <span class="type">bigint</span>(<span class="number">20</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;skuid&#x27;</span> ,</span><br><span class="line">  `sku_num` <span class="type">int</span>( <span class="number">11</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">  `img_url` <span class="type">varchar</span> ( <span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片文件&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;购物车表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>评论实体转换成评论表(members)，如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sku_comments`(</span><br><span class="line">  `comment_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT<span class="string">&#x27;评论编号&#x27;</span>,</span><br><span class="line">  `user_id` bigin)t (<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `sku_id` <span class="type">decimal</span>( <span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> NULI COMMENT <span class="string">&#x27;商品编号&#x27;</span>,</span><br><span class="line">  `comment` <span class="type">varchar</span>(<span class="number">2000</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论内容&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">）ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">45</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMNENT<span class="operator">=</span><span class="string">&#x27;商品评论表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>商品实体转换成商品表(members)，如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sku_info`(</span><br><span class="line">  `sku_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COPMENT<span class="string">&#x27;商品编号(itemID)&#x27;</span>,</span><br><span class="line">   `price` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  `sku_name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku名称&#x27;</span>,</span><br><span class="line">  `sku_desc` <span class="type">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;商品规格描述&#x27;</span>,</span><br><span class="line">  `category3_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;三级分类id(冗余)&#x27;</span>,</span><br><span class="line">  `color` <span class="type">varchar</span> (<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;颜色&#x27;</span>,</span><br><span class="line">  `is_sale` tinyint(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> CONMMENT<span class="string">&#x27;是否销售(1:是0:否)&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">45</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span> <span class="string">&#x27;商品表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><font color=orange>2、一个多对多的关系转换成一个数据表</font><br>这个ER模型中的多对多的关系有1个，即<code>商品</code>和<code>订单</code>之间的关系，同品类的商品可以出现在不同的订单中，不同的订单也可以包含同一类型的商品，所以它们之间的关系是多对多。针对这种情况需要设计一个独立的表来表示，这种表一般称为<code>中间表</code>。</p><p>我们可以设计一个独立的<code>订单详情表</code>，来代表商品和订单之间的包含关系。这个表关联到2个实体，分别是订单、商品。所以，表中必须要包括这2个实体转换成的表的主键。除此之外，我们还要包括该关系自有的属性:商品数量，商品下单价格以及商品名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#订单详情表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_detail`(</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单详情编号&#x27;</span>,</span><br><span class="line">`order_id` <span class="type">bigint</span>(<span class="number">20</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单编号&#x27;</span>,</span><br><span class="line">`sku_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku_id &#x27;</span>,</span><br><span class="line">`sku_name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku名称&#x27;</span>,</span><br><span class="line">`sku_num` <span class="type">varchar</span>(<span class="number">200</span>)<span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;购买个数&#x27;</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;订单明细表&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>公司的订单相关表主要有：order、order_item、sku、spu…其中order_detail相当于order_item</p></blockquote><p><font color=orange>3、通过外键来表达1对多的关系</font><br>在上面的表的设计中，我们可以&#x3D;&#x3D;用外键来表达1对多&#x3D;&#x3D;的关系。比如在商品评论表sku_comments中<br>我们分别把user_id、sku_id定义成外键，以使用下面的语句设置外键。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> fk_comment_user <span class="keyword">FOREIGN</span> KEY (user_id) <span class="keyword">REFERENCES</span> user_info (id),</span><br><span class="line"></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_comment_sku <span class="keyword">FOREIGN</span> KEY (sku_id)<span class="keyword">REFERENCES</span> sku_info (sku_id)</span><br></pre></td></tr></table></figure><p>外键约束主要是在数据库层面上<code>保证数据的一致性</code>，但是因为插入和更新数据需要检查外键，理论上<code>性能会有所下降</code>，对性能是负面的影响。</p><p>实际的项目，不建议使用外键，一方面是<code>降低开发的复杂度</code>(有外键的话主从表类的操作必须先操作主表)，另外是有外键在<code>处理数据的时候非常麻烦</code>。在电商平台，由于<code>并发业务量比较大</code>，所以一般不设置外键，以免影响数据库<code>性能</code>。</p><p>&#x3D;&#x3D;在应用层面做数据的<code>一致性检查</code>，本来就是一个正常的功能需求&#x3D;&#x3D;。如学生选课的场景，课程肯定不是输入的，而是通过下拉或查找等方式从系统中进行选取，就能够保证是合法的课程ID，因此就不需要靠数据库的外键来检查了。</p><p><font color=orange>4、把属性转换成表的字段</font><br>在刚刚的设计中，我们也完成了把属性都转换成了表的字段，比如把商品属性转换成了商品信息表中的字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sku_info`(</span><br><span class="line">  `sku_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COPMENT<span class="string">&#x27;商品编号(itemID)&#x27;</span>,</span><br><span class="line">   `price` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  `sku_name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;sku名称&#x27;</span>,</span><br><span class="line">  `sku_desc` <span class="type">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;商品规格描述&#x27;</span>,</span><br><span class="line">  `category3_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;三级分类id(冗余)&#x27;</span>,</span><br><span class="line">  `color` <span class="type">varchar</span> (<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;颜色&#x27;</span>,</span><br><span class="line">  `is_sale` tinyint(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> CONMMENT<span class="string">&#x27;是否销售(1:是0:否)&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB AUTO_INCRENENT<span class="operator">=</span><span class="number">45</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span> <span class="string">&#x27;商品表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>到这里，我们通过创建<code>电商项目业务流程</code>的ER模型，再把ER模型转换成具体的数据表的过程，完成利用ER模型设计电商项目数据库的工作。</p><p>其实，任何一个基于数据库的应用项目，都可以通过这种<code>先建立ER 模型</code> ，再<code>转换成数据表</code>的方式，完成数据库的设计工作。创建ER模型不是目的，目的是把业务逻辑梳理清楚，设计出优秀的数据库。不是为了建模而建模，要利用创建ER模型的过程来整理思路，这样创建ER模型才有意义。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212230135855.png" alt="image-20221223002758954"></p><h2 id="9-数据表的设计原则"><a href="#9-数据表的设计原则" class="headerlink" title="9. 数据表的设计原则"></a>9. 数据表的设计原则</h2><p>综合以上内容，总结出数据表设计的一般原则：“三少一多”</p><p><font color=orange>1、数据表的个数越少越好 </font></p><p>RDBMS的核心在于对实体和联系的定义，也就是E-R图(Entity Relationship Diagram)，数据表越少，证明实体和联系设计得越简洁，既方便理解又方便操作。</p><p><font color=orange>2、数据表中的字段个数越少越好</font></p><p>字段个数越多，数据冗余的可能性越大。设置字段个数少的前提是各个字段相互独立，而不是某个字段的取值可以由其他字段计算出来。当然字段个数少是相对的，通常会在<code>数据冗余</code>和<code>检索效率</code>中进行平衡。</p><p><font color=orange>3、数据表中联合主键的字段个数越少越好</font></p><p>设置主键是为了确定唯一性，当一个字段无法确定唯一性的时候，就需要采用联合主键的方式(也就是用多个字段来定义一个主健)。<strong>联合主键中的字段越多，占用的索列空间越大</strong>，不仅会加大理解难度，还会增加运行时间和索引空间，因此联合主键的字段个数越少越好。</p><p><font color=orange>4、使用主键和外键越多越好</font></p><p>数据库的设计实际上就是定义各种表，以及各种字段之间的关系。这些关系越多，证明这些实体之间的冗余度越低，<code>利用度越高</code>。这样做的好处在于不仅保证了数据表之间的<code>独立性</code>，还能提升相互之间的关联使用率。</p><p>&#x3D;&#x3D;这里的外键指业务上实现外键，也就是逻辑外键。不一定使用外键约束实现。&#x3D;&#x3D;</p><p>“三少一多”原则的核心就是<code>简单可复用</code>。简单指的是用更少的表、更少的字段、更少的联合主键字段来完成数据表的设计。可复用则是通过主键、外键的使用来增强数据表之间的复用率。因为一个主键可以理解是一张表的代表。键设计得越多，证明它们之间的利用率越高。</p><blockquote><p>注意：这个原则并不是绝对的，有时候我们需要牺牲数据的冗余度来换取数据处理的效率。</p></blockquote><h2 id="10-数据库对象编写建议"><a href="#10-数据库对象编写建议" class="headerlink" title="10. 数据库对象编写建议"></a>10. 数据库对象编写建议</h2><p>前面讲了数据库的设计规范，下面给出的这些规范适用于大多数公司，按照下面的规范来使用数据库，这样数据库可以发挥出更高的性能</p><h3 id="10-1-关于库"><a href="#10-1-关于库" class="headerlink" title="10.1 关于库"></a>10.1 关于库</h3><ol><li>【强制】库的名称必须控制在32个字符以内，只能使用英文字母、数字和下划线，建议以英文字母开头。</li><li>【强制】库名中英文<code>一律小写</code>，不同单词采用<code>下划线</code>分割。须见名知意。</li><li>【强制】库的名称格式：业务系统名称_子系统名。</li><li>【强制】库名禁止使用关键字（如type,order等）。</li><li>【强制】创建数据库时必须<code>显式指定字符集</code>，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：CREATE DATABASE crm_fund <code>DEFAULT CHARACTER SET &#39;utf8&#39;</code>; </li><li>【建议】对于程序连接数据库账号，遵循<code>权限最小原则</code>。使用数据库账号只能在一个DB下使用，不准跨库。程序使用的账号<code>原则上不准有drop权限</code>。 </li><li>【建议】临时库以<code>tmp_</code>为前缀，并以日期为后缀；备份库以<code>bak_</code>为前缀，并以日期为后缀。</li></ol><h3 id="10-2-关于表、列"><a href="#10-2-关于表、列" class="headerlink" title="10.2 关于表、列"></a>10.2 关于表、列</h3><ol><li><p>【强制】表和列的名称必须控制在32个字符以内，表名只能使用英文字母、数字和下划线，建议以<code>英文字母开头</code>。 </p></li><li><p>【强制】 <code>表名、列名一律小写</code>，不同单词采用下划线分割。须见名知意。</p></li><li><p>【强制】表名要求有模块名强相关，同一模块的表名尽量使用<code>统一前缀</code>。比如：crm_fund_item </p></li><li><p>【强制】创建表时必须<code>显式指定字符集</code>为utf8或utf8mb4。 </p></li><li><p>【强制】表名、列名禁止使用关键字（如type,order等）。</p></li><li><p>【强制】创建表时必须<code>显式指定表存储引擎</code>类型。如无特殊需求，一律为InnoDB。 </p></li><li><p>【强制】建表必须有comment。 </p></li><li><p>【强制】字段命名应尽可能使用表达实际含义的英文单词或<code>缩写</code>。如：公司 ID，不要使用 corporation_id, 而用corp_id 即可。</p></li><li><p>【强制】布尔值类型的字段命名为<code>is_描述</code>。如member表上表示是否为enabled的会员的字段命名为 is_enabled。 </p></li><li><p>【强制】禁止在数据库中存储图片、文件等大的二进制数据。通常文件很大，短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时。通常存储于文件服务器(如FastDFS)，数据库只存储文件地址信息。</p></li><li><p>【建议】建表时关于主键：<code>表必须有主键 </code></p><p>(1)强制要求主键为id，类型为int或bigint，且为auto_increment 建议使用unsigned无符号型。 (2)&#x3D;&#x3D;标识表里每一行主体的字段不要设为主键&#x3D;&#x3D;，建议设为其他字段如user_id，order_id等，并建立unique key索引。因为如果设为主键且主键值为随机插入，则会导致innodb内部页分裂和大量随机I&#x2F;O，性能下降。</p></li><li><p>【建议】核心表（如用户表）必须有行数据的<code>创建时间字段</code>（create_time）和<code>最后更新时间字段</code>（update_time），便于查问题。</p></li><li><p>【建议】&#x3D;&#x3D;表中所有字段尽量都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT值</code>&#x3D;&#x3D;。 因为使用NULL值会存在<code>每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差、业务代码容易出现空指针</code>等问题。</p></li><li><p>【建议】所有存储相同数据的<code>列名和列类型必须一致</code>（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的<code>索引失效</code>，导致查询效率降低）。</p></li><li><p>【建议】中间表（或临时表）用于保留中间结果集，名称以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称以<code>bak_</code>开头。中间表和备份表定期清理。</p></li><li><p>【示范】一个较为规范的建表语句：</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_info (</span><br><span class="line">  `id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;真实姓名&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">  `birthday` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  `sex` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `short_introduce` <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;一句话介绍自己，最多50个汉字&#x27;</span>,</span><br><span class="line">  `user_resume` <span class="type">varchar</span>(<span class="number">300</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户提交的简历存放地址&#x27;</span>,</span><br><span class="line">  `user_register_ip` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户注册时的源ip&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `user_review_status` tinyint <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uniq_user_id` (`user_id`),</span><br><span class="line">  KEY `idx_username`(`username`),</span><br><span class="line">  KEY `idx_create_time_status`(`create_time`,`user_review_status`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;网站用户基本信息&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="17"><li>【建议】创建表时，可以使用可视化工具。这样可以确保表、字段相关的约定都能设置上。实际上，我们通常很少自己写 DDL 语句，可以使用一些可视化工具来创建和操作数据库和数据表。可视化工具除了方便，还能直接帮我们将数据库的结构定义转化成 SQL 语言，方便数据库和数据表结构的导出和导入。</li></ol><h3 id="10-3-关于索引"><a href="#10-3-关于索引" class="headerlink" title="10.3 关于索引"></a>10.3 关于索引</h3><ol><li><p>【强制】InnoDB表必须主键为id int&#x2F;bigint auto_increment，且主键值<code>禁止被更新</code>。 </p></li><li><p>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code> (此处是官方写法，代表的其实就是B+树)</p></li><li><p>【建议】主键的名称以<code>pk_</code>开头，唯一键以<code>uni_</code>或<code>uk_</code>开头，普通索引以<code>idx_</code>开头，一律使用小写格式，以字段的名称或缩写作为后缀。</p></li><li><p>【建议】多单词组成的columnname，取前几个单词首字母，加末单词组成column_name。如: sample 表 member_id 上的索引：<code>idx_sample_mid</code>。 </p></li><li><p>【建议】单个表上的索引个数<code>不能超过6个</code>。 </p></li><li><p>【建议】在建立索引时，多考虑建立<code>联合索引</code>，并把区分度最高的字段放在最前面。</p></li><li><p>【建议】在多表 JOIN 的SQL里，<code>保证被驱动表的连接列上有索引</code>，这样JOIN 执行效率最高。</p></li><li><p>【建议】建表或加索引时，保证表里互相不存在<code>冗余索引</code>。 比如：如果表里已经存在key(a,b)， 则key(a)为冗余索引，需要删除。</p></li></ol><h3 id="10-4-SQL编写"><a href="#10-4-SQL编写" class="headerlink" title="10.4 SQL编写"></a>10.4 SQL编写</h3><ol><li><p>【强制】程序端SELECT语句必须指定具体字段名称，<code>禁止写成 *</code>。 </p></li><li><p>【建议】程序端insert语句指定具体字段名称，不要写成INSERT INTO t1 VALUES(…)。 </p></li><li><p>【建议】除静态表或小表（100行以内），DML语句必须有WHERE条件，且使用索引查找。</p></li><li><p>【建议】INSERT INTO…VALUES(XX),(XX),(XX).. 这里XX的值不要超过5000个。 值过多虽然上线很快，但会引起主从<code>同步延迟</code>。</p></li><li><p>【建议】SELECT语句不要使用UNION，<code>推荐使用UNION ALL</code>，并且UNION子句个数限制在5个以内。</p></li><li><p>【建议】线上环境，多表 JOIN 不要超过5个表。</p></li><li><p>【建议】减少使用ORDER BY，和业务沟通能不排序就不排序，或将排序放到程序端去做。ORDER BY、GROUP BY、DISTINCT 这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</p></li><li><p>【建议】包含了ORDER BY、GROUP BY、DISTINCT 这些查询的语句，WHERE 条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</p></li><li><p>【建议】对单表的多次alter操作必须合并为一次。对于超过100W行的大表进行alter table，必须经过DBA审核，并在业务低峰期执行，多个alter需整合在一起。 &#x3D;&#x3D;因为alter table会产生<code>表锁</code>，期间阻塞对于该表的所有写入&#x3D;&#x3D;，对于业务可能会产生极大影响。</p></li><li><p>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep。 </p></li><li><p>【建议】事务里包含SQL不超过5个。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等问题。</p></li><li><p>【建议】事务里更新语句尽量基于主键或UNIQUE KEY，如UPDATE… WHERE id&#x3D;XX;否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</p></li></ol><h2 id="11-PowerDesigner的使用"><a href="#11-PowerDesigner的使用" class="headerlink" title="11. PowerDesigner的使用"></a>11. PowerDesigner的使用</h2><p>PowerDesigner是一款开发人员常用的数据库建模工具，用户利用该软件可以方便地制作 <code>数据流程图 、概念数据模型 、 物理数据模型</code> ，它几乎包括了数据库模型设计的全过程，是Sybase公司为企业建模和设计提供的一套完整的集成化企业级建模解决方案</p><p><strong>安装：</strong><a href="https://www.cnblogs.com/luyj00436/p/16932603.html">https://www.cnblogs.com/luyj00436/p/16932603.html</a></p><h3 id="11-1-开始界面"><a href="#11-1-开始界面" class="headerlink" title="11.1 开始界面"></a>11.1 开始界面</h3><p>当前使用的PowerDesigner版本是16.5的。打开软件即是此页面，可选择Create Model,也可以选择Do Not Show page Again,自行在打开软件后创建也可以！完全看个人的喜好，在后面的学习中不在显示此页面。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242252532.png" alt="image-20221224154632222"></p><p>接下来我们开始为数据库建模</p><ul><li><code>Create Model</code>的作用类似于普通的一个文件，该文件可以单独存放也可以归类存放。</li><li><code>Create Project</code>的作用类似于文件夹，负责把有关联关系的文件集中归类存放。</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254818.png" alt="image-20221224154752872"></p><h3 id="11-2-概念数据模型"><a href="#11-2-概念数据模型" class="headerlink" title="11.2 概念数据模型"></a>11.2 概念数据模型</h3><p>常用的模型有4种，分别是 <code>概念模型</code>(CDM Conceptual Data Model) ， <code>物理模型</code>（PDM,Physical Data Model） ， <code>面向对象的模型</code>（OOM Objcet Oriented Model） 和<code> 业务模型</code>（BPM Business Process Model） 。<br><font color=orange>1、我们先创建概念数据模型</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242252200.png" alt="image-20221224155815431"></p><p>点击上面的ok，即可出现下图左边的概念模型1，可以自定义概念模型的名字，在概念模型中使用最多的就是如图所示的Entity(实体),Relationship(关系)</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253052.png" alt="image-20221224160046422"></p><p><font color=orange>2、选中右边框中Entity这个功能，创建一个实体。双击实体，即可出现下面这个方框。</font>需要注意的是书写name的时候，code自行补全，name可以是英文的也可以是中文的，但是code必须是英文的。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253855.png" alt="image-20221224161617975"></p><p><font color=orange>3、填充实体字段</font></p><p>General中的name和code填好后，就可以点击Attributes（属性）来设置name（名字），code(在数据库中的字段名)，Data Type(数据类型) ，length(数据类型的长度)</p><p>Name: 实体名字一般为中文，如论坛用户</p><p>Code: 实体代号，一般用英文，如XXXUser</p><p>Comment:注释，对此实体详细说明</p><p>Code属性：代号，一般用英文UID DataType</p><p>Domain域，表示属性取值范围如可以创建10个字符的地址域</p><p>M:Mandatory强制属性，表示该属性必填。不能为空</p><p>P:Primary Identifer是否是主标识符，表示实体唯一标识符</p><p>D:Displayed显示出来，默认全部勾选</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253086.png" alt="image-20221224161925349"></p><blockquote><p>Data Type可以使用点击下拉框或…的方式设置，字符串类型必须设置长度</p><p>Ctrl+D删除行或者点击 ×</p></blockquote><p><font color=orange>4、设置主标识符</font></p><p>如果不希望系统自动生成标识符而是手动设置的话，那么切换到Identifiers选项卡，添加一行Identifier，然后单击左上角的“属性”按钮，然后弹出的标识属性设置对话框中单击“添加行”按钮，选择该标识中使用的属性。例如将学号设置为学生实体的标识。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253330.png" alt="image-20221224162751124"></p><p><font color=orange>5、放大模型</font><br>创建好概念数据模型如图所示，但是创建好的字体很小，读者可以<code>按着ctrl键</code>同时滑动鼠标的可滑动按钮即可放大缩写字体，同时也可以看到主标识符有一个*号的标志，同时也显示出来了，name,Data type和length这些可见的属性</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253032.png" alt="image-20221224163015595"></p><p><font color=orange>6、实体关系</font><br>同理创建一个班级的实体（需要特别注意的是，点击完右边功能的按钮后需要点击鼠标指针状态的按钮或者右击鼠标即可，不然很容易乱操作，这点注意一下就可以了），然后使用<code>Relationship</code>（关系）这个按钮可以连接学生和班级之间的关系，建立一对多（班级对学生）或者多对一（学生对班级）的关系。<br><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253581.png" alt="image-20221224164046117"></p><p>需要注意的是点击Relationship这个按钮，就把班级和学生联系起来了，就是一条线，然后双击这条线进行编辑，在General这块起name和code</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253040.png" alt="image-20221224164247336"></p><p>面的name和code起好后就可以在Cardinalities这块查看班级和学生的关系，可以看到班级的一端是一条线，学生的一端是三条，代表班级对学生是一对多的关系即one对many的关系，点击应用，然后确定即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254040.png" alt="image-20221224164331213"></p><p>一对多和多对一练习完还有多对多的练习，如下图操作所示，老师实体和上面介绍的一样，自己将name，data type等等修改成自己需要的即可，满足项目开发需求即可。（comment是解释说明，自己可以写相关的介绍和说明）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253288.png" alt="image-20221224165228805"></p><p>多对多需要注意的是自己可以手动点击按钮将关系调整称为多对多的关系many对many的关系，然后点击应用和确定即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253487.png" alt="image-20221224165320074"></p><p>综上即可完成最简单的学生，班级，教师这种概念数据模型的设计，需要考虑数据的类型和主标识码，是否为空。关系是一对一还是一对多还是多对多的关系，自己需要先规划好再设计，然后就ok了。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253318.png" alt="image-20221224165416016"></p><p>最后<code>CTRL+S</code>保存为 <code>学生管理系统-1.cdm</code> </p><h3 id="11-3-物理数据模型"><a href="#11-3-物理数据模型" class="headerlink" title="11.3 物理数据模型"></a>11.3 物理数据模型</h3><p>上面是概念数据模型，下面介绍一下物理数据模型，以后 经常使用 的就是物理数据模型。打开PowerDesigner，然后点击File–&gt;New Model然后选择如下图所示的物理数据模型，物理数据模型的名字自己起，然后选择自己所使用的数据库即可。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253567.png" alt="image-20221224165757702"></p><p>创建好主页面如图所示，但是右边的按钮和概念模型略有差别，物理模型最常用的三个是<br><code>table(表) </code>， <code>view(视图) </code>， <code>reference(关系) </code>；</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242255487.png" alt="image-20221224174102692"></p><p>鼠标先点击右边table这个按钮然后在新建的物理模型点一下，即可新建一个表，然后双击新建如下图所示，在General的name和code填上自己需要的，点击应用即可），如下图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253656.png" alt="image-20221224174149099"></p><p>然后点击Columns,如下图设置，非常简单，需要注意的就是P（primary主键） , F （foreign key外键） ,M（mandatory强制性的，代表不可为空） 这三个</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242255151.png" alt="image-20221224174330650"></p><p>在此设置学号的自增（MYSQL里面的自增是这个AUTO_INCREMENT），班级编号同理，不多赘述！</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253007.png" alt="image-20221224174611941"></p><p>在下面的这个点上对号即可，就设置好了自增</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242255742.png" alt="image-20221224174834132"></p><p>全部完成后如下图所示。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253631.png"></p><p>班级物理模型同理如下图所示创建即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253295.png" alt="image-20221224175133038"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212300124344.png" alt="image-20221224175204900"></p><p>完成后如下图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253663.png"></p><p>上面的设置好如上图所示，然后下面是关键的地方，点击右边按钮Reference这个按钮，因为是班级对学生是一对多的，所以鼠标从学生拉到班级如下图所示，学生表将发生变化，学生表里面增加了一行，这行是班级表的主键作为学生表的外键，将班级表和学生表联系起来。（仔细观察即可看到区别。）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253704.png"></p><p>做完上面的操作，就可以双击中间的一条线，显示如下图，修改name和code即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253934.png" alt="image-20221224180647469"></p><p>注意：可以在Integrity中为显示的关系起名字。默认是<code>FK+Code</code> ，比如：<code>FK_student_class_r</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253368.png" alt="image-20221224181202233"></p><p>学习了多对一或者一对多的关系，接下来学习多对对的关系，同理自己建好老师表，这里不在叙述，记得老师编号自增，建好如下图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242255839.png"></p><p>下面是多对多关系的关键，由于物理模型多对多的关系需要一个中间表来连接，如下图，只设置一个字段，主键，自增</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253879.png" alt="image-20221224181753560"></p><p>点击应用，然后设置Columns，只添加一个字段</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242255478.png" alt="image-20221224181844319"></p><p>这是设置字段递增，前面已经叙述过好几次</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253456.png" alt="image-20221224182223863"></p><p>设置好后如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242253934.png" alt="image-20221224182411930"></p><p>需要搞清楚，学生也可以有很多老师，老师也可以有很多学生，所以学生和老师都可以是主体；然后我们开始添加学生和教师的关系*~*</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254975.png" alt="image-20221224182834083"></p><blockquote><p>思考一个问题：为什么N：N，需要建立中间表呢，有什么好处呢？</p></blockquote><h3 id="11-4-概念模型转为物理模型"><a href="#11-4-概念模型转为物理模型" class="headerlink" title="11.4 概念模型转为物理模型"></a>11.4 概念模型转为物理模型</h3><p>如下图所示先打开概念模型图，然后点击Tool,如下图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254127.png" alt="image-20221224221907744"></p><p>点开的页面如下所示，name和code已经从概念模型1改成物理模型1了</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254256.png" alt="image-20221224221944635"></p><p>完成后如下图所示，将自行打开修改的物理模型，需要注意的是这些表的数据类型已经自行改变了，而且中间表出现两个主键，即双主键</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254983.png" alt="image-20221224222505024"></p><h3 id="11-5-物理模型转为概念模型"><a href="#11-5-物理模型转为概念模型" class="headerlink" title="11.5 物理模型转为概念模型"></a>11.5 物理模型转为概念模型</h3><p>上面介绍了概念模型转物理模型，下面介绍一下物理模型转概念模型（如下图点击操作即可）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254438.png" alt="image-20221224222606851"></p><p>然后出现如下图所示界面，然后将物理修改为概念 ，点击应用确认即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242255254.png" alt="image-20221224222729059"></p><p>点击确认后将自行打开如下图所示的页面，自己观察有何变化，如果转换为oracle的，数据类型会发生变化，比如Varchar2等等）；</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254414.png" alt="image-20221224222806888"></p><h3 id="11-6-物理模型导出SQL语句"><a href="#11-6-物理模型导出SQL语句" class="headerlink" title="11.6 物理模型导出SQL语句"></a>11.6 物理模型导出SQL语句</h3><p>下面介绍一下物理模型导出SQL语句（点击Database按钮的Generate Database或者按ctrl+G）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254638.png" alt="image-20221224223447802"></p><p>打开之后如图所示，修改好存在sql语句的位置和生成文件的名称即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254640.png" alt="image-20221224223545246"></p><p>在Selection中选择需要导出的表，然后点击应用和确认即可</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254591.png" alt="image-20221224223617401"></p><p>完成以后出现如下图所示，可以点击Edit或者close按钮</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254982.png" alt="image-20221224223643530"></p><p>查看保存的sql文件：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202212242254912.png" alt="image-20221224223752525"></p><p>至此，就完成了导出sql语句，就可以到自己指定的位置查看导出的sql语句了；PowerDesigner在以后在项目开发过程中用来做需求分析和数据库的设计非常的方便和快捷~</p><blockquote><p>关于PowerDesigner导出SQL，字段没有注释，解决办法：<a href="https://blog.csdn.net/weixin_42732880/article/details/125869158">https://blog.csdn.net/weixin_42732880/article/details/125869158</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、事务基础知识</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC11%E7%AB%A0%20%20%E4%BA%8B%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC11%E7%AB%A0%20%20%E4%BA%8B%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><h2 id="1-数据库事务概述"><a href="#1-数据库事务概述" class="headerlink" title="1. 数据库事务概述"></a>1. 数据库事务概述</h2><p>事务是数据库区别于文件系统的重要特性之一，当有了事务就会让数据库始终保持<code>一致性</code>，同时还能通过事务的机制<code>恢复到某个时间点</code>，这样可以保证已提交到数据库的修改不会因为系统崩溃而丢失</p><h3 id="1-1-存储引擎支持情况"><a href="#1-1-存储引擎支持情况" class="headerlink" title="1.1 存储引擎支持情况"></a>1.1 存储引擎支持情况</h3><p><code>SHOW ENGINES </code>命令来查看当前 MySQL 支持的存储引擎都有哪些，以及这些存储引擎是否支持事务。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312842.png" alt="image-20230111230307559"></p><p>能看出在MysQL中，只有InnoDB是支持事务的</p><h3 id="1-2-基本概念"><a href="#1-2-基本概念" class="headerlink" title="1.2 基本概念"></a>1.2 基本概念</h3><p><strong>事务：</strong>一组逻辑操作单元（一组SQL），使数据从一种状态变换到另一种状态。比如下面的转账的两条SQL~</p><p><strong>事务处理的原则</strong>：保证所有事务都作为 <code>一个工作单元</code> 来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交( <code>commit </code>)，那么这些修改就 <code>永久 </code>地保存下来；要么数据库管理系统将 放弃 所作的所有 <code>修改 </code>，整个事务回滚( <code>rollback </code>)到最初状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例: AA用户给BB用户转账<span class="number">100</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">50</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;AA&#x27;</span>;</span><br><span class="line">#服务器宕机</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">50</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;BB&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-事务的ACID特性"><a href="#1-3-事务的ACID特性" class="headerlink" title="1.3 事务的ACID特性"></a>1.3 事务的ACID特性</h3><ul><li><font color=orange>原子性(atomicity)</font></li></ul><p>原子性是指&#x3D;&#x3D;事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚&#x3D;&#x3D;。即要么转账成功，要么转账失败，是不存在中间的状态。如果无法保证原子性会怎么样?就会出现数据不一致的情形，A账户减去100元，而B账户增加100元操作失败，系统将无故丢失100元。</p><ul><li><font color=orange>一致性(consistency)</font></li></ul><p>(国内很多网站上对一致性的阐述有误，具体你可以参考wikipedia对Consistency的阐述)</p><p>根据定义，一致性是指&#x3D;&#x3D;事务执行前后，数据从一个合法性状态变换到另外一个合法性状态&#x3D;&#x3D;。这种状态是<code>语义上的</code>而不是语法上的，跟具体的业务有关。</p><p>那什么是合法的数据状态呢?&#x3D;&#x3D;满足预定的约束的状态&#x3D;&#x3D;就叫做合法的状态。通俗一点，这状态是由你自己来定义的(比如满足现实世界中的约束)。满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的!如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作之前的状态。</p><p>**举例1:**A账户有200元，转账300元出去，此时A账户余额为-100元。你自然就发现了此时数据是不一致的，为什么呢?因为你定义了一个状态，余额这列必须&gt;&#x3D;0。</p><p>**举例2:**A账户200元。转账50元给B账户，A账户的钱扣了，但是B账户因为各种意外，余额并没有增加。你也知道此时数据是不一致的，为什么呢?因为你定义了一个状态，要求A+B的总余额必须不变。</p><p>**举例3:**在数据表中将姓名字段设置为唯一性约束，这时当事务进行提交或者事务发生回滚的时候，如果数据表中的姓名不唯一，就破坏了事务的一致性要求。</p><ul><li><font color=orange>隔离型(isolation)</font></li></ul><p>(可以联系JUC中的临界区的概念，为了避免各个线程都执行临界区的代码，必须加<code>synchronized</code>)</p><p>&#x3D;&#x3D;事务的隔离性是指一个事务的执行不能被其他事务干扰&#x3D;&#x3D; ，即&#x3D;&#x3D;一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰&#x3D;&#x3D;。</p><p>如果无法保证隔离性会怎么样？假设A账户有200元，B账户0元。A账户往B账户转账两次，每次金额为50元，分别在两个事务中执行。如果无法保证隔离性，会出现下面的情形：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">50</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;AA&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">50</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;BB&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>根据图解，发现出现了线程安全的问题，从而导致转账前后总金额不一致的情况~</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312447.png"></p><ul><li><font color=orange>持久性（durability）</font></li></ul><p>持久性是指&#x3D;&#x3D;一个事务一旦被提交，它对数据库中数据的改变就是 永久性的 ，接下来的其他操作和数据库故障不应该对其有任何影响&#x3D;&#x3D;。</p><p>持久性是通过 <code>事务日志</code> 来保证的。日志包括了 <code>重做日志</code> 和 <code>回滚日志</code> 。当我们通过事务对数据进行修改的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。这样做的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执行，从而使事务具有持久性。</p><blockquote><p>总结<br>ACID是事务的四大特性，在这四个特性中，原子性是基础，隔离性是手段，一致性是约束条件，而持久性是目的。</p><p>数据库事务，其实就是数据库设计者为了方便起见，把需要保证原子性、隔离性、一致性和持久性的一个或多个数据库操作称为一个事务。一句话，事务就是ACID~</p></blockquote><h3 id="1-4-事务的状态"><a href="#1-4-事务的状态" class="headerlink" title="1.4 事务的状态"></a>1.4 事务的状态</h3><p>我们现在知道 <code>事务</code> 是一个抽象的概念，它其实对应着一个或多个数据库操作，MySQL根据这些操作所执行的不同阶段把 <code>事务</code> 大致划分成几个状态：</p><ul><li><font color=orange>活动的（active）</font></li></ul><p>事务对应的数据库操作正在执行过程中时，就说该事务处在 <code>活动的</code> 状态。比如转账的事务（两条DML）在执行~</p><ul><li><font color=orange>部分提交的（partially committed）</font></li></ul><p>当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并 <code>没有刷新到磁盘</code>时，我们就说该事务处在 <code>部分提交的</code> 状态。比如转账的事务执行完成，但是还没有进行提交</p><ul><li><font color=orange>失败的（failed）</font></li></ul><p>当事务处在 <code>活动的</code> 或者 <code>部分提交的</code> 状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，就说该事务处在<code>失败的</code>状态。 比如正在转账时，银行突然断电了，事务就会被停止。</p><ul><li><font color=orange>中止的（aborted）</font></li></ul><p>如果事务执行了一部分而变为 <code>失败的</code> 状态，那么就需要把已经修改的事务中的操作还原到事务执行前的状态。换句话说，就是要撤销失败事务对当前数据库造成的影响。把这个撤销的过程称之为 <code>回滚</code> 。当 <code>回滚</code> 操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，就说该事务处在了 <code>中止的</code> 状态。比如当事务执行失败后，需要进行回滚，回滚完毕后的状态就是中止态</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">50</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;AA&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">50</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;BB&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><font color=orange>提交的（committed）</font></li></ul><p>当一个处在 <code>部分提交的</code>状态的事务将修改过的数据都 <code>同步到磁盘</code> 上之后，就可以说该事务处在了 <code>提交的</code> 状态。</p><p>一个基本的状态转换图如下所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312453.png" alt="22_1_13_02"></p><p>图中可见，只有当事务处于 <code>提交的 </code>或者 <code>中止的</code> 状态时，一个事务的生命周期才算是结束了。对于已经提交的事务来说，该事务对数据库所做的修改将永久生效，对于处于中止状态的事务，该事务对数据库所做的所有修改被回滚到没执行该事务之前的状态。</p><h2 id="2-如何使用事务"><a href="#2-如何使用事务" class="headerlink" title="2. 如何使用事务"></a>2. 如何使用事务</h2><p>使用事务有两种方式，分别为<code>显式事务</code>和<code>隐式事务</code></p><h3 id="2-1-显式事务"><a href="#2-1-显式事务" class="headerlink" title="2.1 显式事务"></a>2.1 显式事务</h3><p><font color=red><strong>事务的完成过程</strong></font></p><ul><li>步骤1：开启事务：</li><li>步骤2：一系列的DML操作</li><li>…</li><li>步骤3：结束的状态：提交的状态（COMMIT）、中止的状态（ROLLBACK）</li></ul><p><strong><font color=orange>步骤1：<code> START TRANSACTION</code> 或者 <code>BEGIN </code>，作用是显式开启一个事务。</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><p><code>START TRANSACTION</code> 语句相较于 <code>BEGIN </code>特别之处在于，后边能跟随几个 <code>修饰符</code> ：</p><p>① <code>READ ONLY</code> ：标识当前事务是一个 <code>只读事务</code> ，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。</p><blockquote><p>补充:只读事务中只是不允许修改那些其他事务也能访问到的表中的数据，对于临时表来说(使用CREATE TMEPORARY TABLE创建的表)，由于它们只能在当前会话中可见，所以只读事务其实也是可以对临时表进行增、删、改操作的</p></blockquote><p>② <code>READ WRITE</code> ：标识当前事务是一个<code>读写事务</code> ，也就是属于该事务的数据库操作既可以读取数据，也可以修改数据。</p><p>③ <code>WITH CONSISTENT SNAPSHOT</code> ：启动一致性读。</p><p><strong>举例：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION READ <span class="keyword">ONLY</span>;#开启一个只读事务</span><br><span class="line"><span class="keyword">START</span> TRANSACTION READ <span class="keyword">ONLY</span>,<span class="keyword">WITH</span> CONSISTENT SNAPSHOT;#开启只读事多和一致性读</span><br><span class="line"><span class="keyword">START</span> TRANSACTION READ WRITE,<span class="keyword">WITH</span> CONSISTENT SNAPSHOT;#开启读写事务和一致性读</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p><code>READ ONLY</code>和<code>READ WRITE</code>是用来设置所谓的事务<code>访问模式</code>的，就是以只读还是读写的方式来访问数据库中的数据，一个事务的访问模式不能同时既设置为只读的又设置为读写的，所以不能同时把<code>READ ONLY</code>和<code>READ WRITE</code>放到<code>START TRANSACTION</code>语句后边</p><p>如果不显式指定事务的访问模式，那么该事务的访问模式就是<code>读写</code>模式。</p></blockquote><p><strong><font color=orange>步骤2：一系列事务中的操作（主要是DML，不含DDL）</font></strong></p><p>一系列事务中的操作（主要是DML，不含DDL）</p><p><strong><font color=orange>步骤3：提交事务 或 中止事务（即回滚事务）</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 提交事务。当提交事务后，对数据库的修改是永久性的</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"># 回滚事务。即撤销正在进行的所有没有提交的修改</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"># 将事务回滚到某个保存点</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> [<span class="keyword">SAVEPOINT</span>]</span><br></pre></td></tr></table></figure><p>其中关于SAVEPOINT相关操作有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可么存在多个保存点</span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称;</span><br><span class="line">#删除某个保存点</span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span>保存点名称；</span><br></pre></td></tr></table></figure><h3 id="2-2-隐式事务"><a href="#2-2-隐式事务" class="headerlink" title="2.2 隐式事务"></a>2.2 隐式事务</h3><p>MySQL中有一个系统变量 <code>autocommit </code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span>   autocommit  <span class="operator">|</span>   <span class="keyword">ON</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>默认情况下，如果不显式的使用<code>START TRANSACTION</code>或者<code>BEGIN</code>语句开启一个事务，那么每一条语句都算是一个独立的事务，这种特性称之为事务的<code>自动提交</code>。下边这两条语句就相当于放到两个独立的事务中去执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 假设此时autocommit是默认值</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; #此时这条DML操作是一个独立的事务</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>; #此时这条DML操作是一个独立的事务</span><br></pre></td></tr></table></figure><p>当然，如果想关闭这种 <code>自动提交</code> 的功能，可以使用下边两种方法之一：</p><ul><li>显式的的使用 <code>START TRANSACTION</code> 或者<code>BEGIN</code>语句开启一个事务。这样在本次事务提交或者回滚前会暂时关闭掉自动提交的功能。</li><li>把系统变量<code>autocommit </code>的值设置为<code>OFF </code>，就像这样：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> OFF;</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这样的话，写入的多条语句就算是属于同一个事务了，直到我们显式的写出<code>COMMIT</code>语句来把这个事务提交掉，或者显式的写出<code>ROLLBACK</code>语句来把这个事务回滚掉。</p><blockquote><p>补充: Oracle 默认不自动提交，需要手写COMMIT命令，而MySQL 默认自动提交。</p></blockquote><h3 id="2-3-隐式提交数据的情况"><a href="#2-3-隐式提交数据的情况" class="headerlink" title="2.3 隐式提交数据的情况"></a>2.3 隐式提交数据的情况</h3><ul><li><strong>数据定义语言</strong>(Data definition language，缩写为:DDL)<br>数据库对象，指的就是<code>数据库</code>、<code>表</code>、<code>视图</code>、<code>存储过程</code>等结构。当使用<code>CREATE </code>、<code>ALTER</code>、<code>DROP</code>等语句去修改数据库对象时，就会隐式的提交前边语句所属于的事务。即:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ... #事务中的一条语句</span><br><span class="line"><span class="keyword">UPDATE</span> ...#事务中的一条语句</span><br><span class="line">...  #事务中的其它语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ...# 此语句会隐式的提交前边语句所属于的事务</span><br></pre></td></tr></table></figure><ul><li><p><strong>隐式使用或修改mysql数据库中的表</strong><br>当使用<code>ALTER USER</code>、<code>CREATE USER</code>、<code>DROP USER</code> 、<code>GRANT</code>、<code>RENAME USER</code>、<code>REVOKE</code>、<code>SET PASSWORD</code>等语句时也会隐式的提交前边语句所属于的事务</p></li><li><p><strong>事务控制或关于锁定的语句</strong></p><p>① 当在一个事务还没提交或者回滚时就又使用<code>START TRANSACTION</code>或者<code>BEGIN</code>语句开启了另一个事务时，会<code>隐式的提交</code>上—个事务。即:</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ... #事务中的一条语句</span><br><span class="line"><span class="keyword">UPDATE</span> ... #事务中的一条语句</span><br><span class="line">...       #事务中的其它语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;   #此语句会隐式的提交前面语句所属于的事务</span><br></pre></td></tr></table></figure><p>② 当前的 <code>autocommit </code>系统变量的值为 <code>OFF </code>，我们手动把它调为 <code>ON </code>时，也会 <code>隐式的提交</code> 前边语句所属的事务。<br>③ 使用 <code>LOCK TABLES</code> 、 <code>UNLOCK TABLES</code> 等关于锁定的语句也会 <code>隐式的提交</code> 前边语句所属的事务。</p><ul><li><p><strong>加载数据的语句</strong><br>使用<code>LOAD DATA</code>语句来批量往数据库中导入数据时，也会<code>隐式的提交</code>前边语句所属的事务。</p></li><li><p><strong>关于MySQL复制的一些语句</strong><br>使用<code>START SLAVE</code>、<code>STOP SLAVE</code>、<code>RESET SLAVE</code>、<code>CHANGE MASTER TO</code>等语句时会<code>隐式的提交</code>前边语句所属的事务。</p></li><li><p><strong>其它的一些语句</strong></p><p>使用<code>ANALYZE TABLE</code>、<code>CACHE INDEX</code>、<code>CHECK TABLE</code>、<code>FLUSH</code>、<code>LOAD INDEX INTO CACHE </code>、<code>OPTIMIZE TABLE</code>、<code>REPAIR TABLE</code>、<code>RESET </code>等语句也会隐式的提交前边语句所属的事务。</p></li></ul><h3 id="2-4-使用举例1：提交与回滚"><a href="#2-4-使用举例1：提交与回滚" class="headerlink" title="2.4 使用举例1：提交与回滚"></a>2.4 使用举例1：提交与回滚</h3><p>我们看下在 MySQL 的默认状态下，下面这个事务最后的处理结果是什么。</p><p>先创建user3表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE atguigudb2;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user3(NAME <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">PRIMARY</span> KEY);</span><br></pre></td></tr></table></figure><ul><li><strong><font color=orange>情况一：</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>); #此时不会自动提交数据</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>; #开启一个新的事务</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>); #此时不会自动提交数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>); #受主键的影响，不能添加成功</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">| NAME   |</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">| 张三   |</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong><font color=orange>情况二：</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> user3;  #DDL操作会自动提交数据，不受autocommit变量的影响。</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>); #此时不会自动提交数据</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>);# 默认情况下(即autocommit为<span class="literal">true</span>)，DML操作也会自动提交数据。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>); #事务的失败的状态</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">| NAME   |</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">| 张三   |</span></span><br><span class="line"><span class="comment">| 李四   |</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong><font color=orange>情况三：</font></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> user3;  #DDL操作会自动提交数据，不受autocommit变量的影响。</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@completion_type</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@completion_type</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>); </span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3 <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">| NAME   |</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">| 张三   |</span></span><br><span class="line"><span class="comment">+--------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>能看到相同的SQL代码，只是在事务开始之前设置了<code>SET @@completion_type = 1</code>;结果就和第一次处理的一样，只有一个“张三”。这是为什么呢?<br>这里讲解下 MySQL中completion_type参数的作用，实际上这个参数有3种可能:</p><ul><li><code>completion=0</code>，这是<code>默认情况</code>。当执行COMNIT的时候会提交事务，在执行下一个事务时，还需要使<code>START TRANSACTION </code>或者<code>BEGIN</code>来开启。</li><li><code>completion=1</code>，这种情况下，当提交事务后，相当于执行了<code>COMMIT AND CHAIN</code>，也就是开启一个链式事务，即提交事务之后会开启一个相同隔离级别的事务。</li><li><code>completion=2</code>，这种情况下<code>CONMMIT=COMMIT AND RELEASE</code>，也就是提交后，会自动与服务器断开连接</li></ul><blockquote><p>当我们设置 autocommit&#x3D;0 时，不论是否采用 START TRANSACTION 或者 BEGIN 的方式来开启事务，都需要用 COMMIT 进行提交，让事务生效，使用 ROLLBACK 对事务进行回滚。</p><p>当我们设置 autocommit&#x3D;1 时，每条 SQL 语句都会自动进行提交。 不过这时，如果你采用 START TRANSACTION 或者 BEGIN 的方式来显式地开启事务，那么这个事务只有在 COMMIT 时才会生效，在 ROLLBACK 时才会回滚。</p></blockquote><p>链事务跳转到4.分类</p><h3 id="2-5-使用举例2：测试不支持事务的Engine"><a href="#2-5-使用举例2：测试不支持事务的Engine" class="headerlink" title="2.5 使用举例2：测试不支持事务的Engine"></a>2.5 使用举例2：测试不支持事务的Engine</h3><p><font color=orange>1、创建测试的表</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE atguigudb3;</span><br><span class="line">#举例<span class="number">2</span>：体会INNODB 和 MyISAM</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1(i <span class="type">INT</span>) ENGINE <span class="operator">=</span> INNODB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test2(i <span class="type">INT</span>) ENGINE <span class="operator">=</span> MYISAM;</span><br></pre></td></tr></table></figure><p><font color=orange>2、针对于innodb表,ROLLBACK 会生效~</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"># 执行完，发现表为空，说明回滚成功<span class="operator">~</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1;</span><br></pre></td></tr></table></figure><p><font color=orange>3、针对于myisam表:不支持事务，<code>BEGIN</code>、<code>ROLLBACK</code> 这些都会失效~</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2 <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"># 执行完，发现表中有上面插入的记录，说明MyISAM不支持事务<span class="operator">~</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test2;</span><br></pre></td></tr></table></figure><h3 id="2-6-使用举例3：SAVEPOINT"><a href="#2-6-使用举例3：SAVEPOINT" class="headerlink" title="2.6 使用举例3：SAVEPOINT"></a>2.6 使用举例3：SAVEPOINT</h3><p><font color=orange>1、创建测试表，并简单测试</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user3(NAME <span class="type">VARCHAR</span>(<span class="number">15</span>),balance <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3(NAME,balance) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"># 执行完，发现表中有上面插入的记录，说明默认创建的表是InnoDB的<span class="operator">~</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br></pre></td></tr></table></figure><p><font color=orange>2、测试<code>SAVEPOINT</code></font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> user3 <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> user3 <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#设置保存点（类似于虚拟机的快照）</span><br><span class="line"><span class="keyword">SAVEPOINT</span> s1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> user3 <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#回滚到保存点</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> s1; </span><br><span class="line"></span><br><span class="line"># 执行完，发现balance<span class="operator">=</span><span class="number">800</span>，说明回滚到保存点s1成功<span class="operator">~</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br><span class="line"></span><br><span class="line"># 由于我们还么有<span class="keyword">commit</span>，所以本次可以 对此次事务彻底回滚<span class="operator">~</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>; #回滚操作</span><br><span class="line"></span><br><span class="line"># 执行完，发现balance<span class="operator">=</span><span class="number">1000</span>，说明回滚成功<span class="operator">~</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user3;</span><br></pre></td></tr></table></figure><h2 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3. 事务隔离级别"></a>3. 事务隔离级别</h2><p>MySQL是一个 <code>客户端／服务器</code> 架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称为一个会话（ <code>Session </code>）。每个客户端都可以在自己的会话中向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。事务有 <code>隔离性</code> 的特性，理论上在某个事务 <code>对某个数据进行访问</code> 时，其他事务应该进行 <code>排队</code> ，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样对 <code>性能影响太大</code> ，我们既想保持事务的隔离性，又想让服务器在处理访问同一数据的多个事务时<code> 性能尽量高些</code> ，那就看二者如何权衡取舍了</p><h3 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h3><p>创建一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  studentno <span class="type">INT</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  class <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (studentno)</span><br><span class="line">) Engine<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>然后向这个表里插入一条数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;小谷&#x27;</span>, <span class="string">&#x27;1班&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在表里的数据就是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">+-----------+--------+-------+</span></span><br><span class="line"><span class="comment">| studentno | name   | class  |</span></span><br><span class="line"><span class="comment">+-----------+--------+-------+</span></span><br><span class="line"><span class="comment">| 1         | 小谷    | 1班   |</span></span><br><span class="line"><span class="comment">+-----------+--------+-------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-2-数据并发问题"><a href="#3-2-数据并发问题" class="headerlink" title="3.2 数据并发问题"></a>3.2 数据并发问题</h3><p>针对事务的隔离性和并发性怎么做取舍呢？先看一下访问相同数据的事务在 <code>不保证串行执行</code> （也就是执行完一个再执行另一个）的情况下可能会出现哪些问题：</p><p><font color=orange>1、脏写（ <code>Dirty Write</code> ）</font></p><p>对于两个事务 Session A、Session B，如果事务Session A <code>修改了</code> 另一个 <code>未提交</code> 事务Session B <code>修改过</code> 的数据，那就意味着发生了 <code>脏写</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312451.png" alt="image-20230116212006528"></p><p>Session A和Sessione各开启了一个事务，Session B中的事务先将studentno列为1的记录的name列更新为李四，然后Session A中的事务接着又把这条studentno列为1的记录的name列更新为张三’。如果之后Session B中的事务进行了回滚，那么Session A中的更新也将不复存在，这科现象就称之为脏写。</p><p>这时Session A中的事务就没有效果了，明明把数据更新了，最后也提交事务了，最后看到的数据什么变化也没有。这里大家对事务的隔离级比较了解的话，会发现默认隔离级别下，上面SessionA中的更新语句会处于等待状态，这里只是跟大家说明一下会出现这样现象。</p><p><font color=orange>2、脏读（ <code>Dirty Read</code> ）</font></p><p>对于两个事务 Session A、Session B，Session A <code>读取</code> 了已经被 Session B <code>更新</code> 但还 <code>没有被提交</code> 的字段。之后若 Session B <code>回滚</code> ，Session A <code>读取</code> 的内容就是 <code>临时且无效</code> 的。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312454.png" alt="image-20230116212448090"></p><p>Session A和Session B各开启了一个事务，Session B中的事务先将studentno列为1的记录的name列更新为’张三’，然后Session A中的事务再去查询这条studentno为1的记录，如果读到列name的值为’张三’，而Session B中的事务稍后进行了回滚，那么Session A中的事务相当于&#x3D;&#x3D;读到了一个不存在的数据&#x3D;&#x3D;，这种现象就称之为 <code>脏读</code> 。</p><p><font color=orange>3、不可重复读（ <code>Non-Repeatable Read</code> ）</font></p><p>对于两个事务Session A、Session B，Session A <code>读取</code> 了一个字段，然后 Session B <code>更新</code> 了该字段。 之后Session A <code>再次读取</code>同一个字段，<code> 值就不同</code> 了。那就意味着发生了不可重复读。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312456.png" alt="image-20230116212712018"></p><p>在Session B中提交了几个 <code>隐式事务</code> （注意是隐式事务，意味着语句结束事务就提交了），这些事务都修改了studentno列为1的记录的列name的值，每次事务提交之后，如果Session A中的事务都可以查看到最新的值，这种现象也被称之为 <code>不可重复读</code> 。</p><p><font color=orange>4、幻读（ <code>Phantom</code> ）</font></p><p>对于两个事务Session A、Session B, Session A 从一个表中 <code>读取</code> 了一个字段, 然后 Session B 在该表中 <code>插入</code> 了一些新的行。 之后, 如果 Session A <code>再次读取</code> 同一个表, 就会多出几行。那就意味着发生了幻读。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312229.png" alt="image-20230116213259278"></p><p>Session A中的事务先根据条件 studentno &gt; 0这个条件查询表student，得到了name列值为’张三’的记录；之后Session B中提交了一个 <code>隐式事务</code> ，该事务向表student中插入了一条新记录；之后Session A中的事务再根据相同的条件 studentno &gt; 0查询表student，得到的结果集中包含Session B中的事务新插入的那条记录，这种现象也被称之为 <code>幻读</code> 。我们把新插入的那些记录称之为<code>幻影记录</code>。</p><p><strong>注意1:</strong><br>有的同学会有疑问，那如果Session B中&#x3D;&#x3D;删除了&#x3D;&#x3D;一些符合studentno &gt; 的记录而不是插入新记录，那SessionA之后再根据<code>studentno &gt; 0</code>的条件读取的记录变少了，这种现象算不算幻读呢?这种现象<code>不属于幻读</code>，幻读强调的是一个事务按照某个<code>相同条件多次读取</code>记录时，后读取时读到了之前<code>没有读到的记录</code>。</p><p><strong>注意2:</strong><br>那对于先前已经读到的记录，之后又读取不到这种情况，算啥呢? 这相当于对每一条记录都发生了<code>不可重复读</code>的现象。幻读只是重点强调了读取到了之前读取没有获取到的记录</p><h3 id="3-3-SQL中的四种隔离级别"><a href="#3-3-SQL中的四种隔离级别" class="headerlink" title="3.3 SQL中的四种隔离级别"></a>3.3 SQL中的四种隔离级别</h3><p>上面介绍了几种并发事务执行过程中可能遇到的一些问题，这些问题有轻重缓急之分，我们给这些问题按照严重性来排一下序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">脏写 <span class="operator">&gt;</span> 脏读 <span class="operator">&gt;</span> 不可重复读 <span class="operator">&gt;</span> 幻读</span><br></pre></td></tr></table></figure><p>我们愿意舍弃一部分隔离性来换取一部分性能在这里就体现在：设立一些隔离级别，隔离级别越低，并发问题发生的就越多。 <code>SQL标准</code> 中设立了4个 <code>隔离级别</code> ：</p><ul><li><p><code>READ UNCOMMITTED</code> ：&#x3D;&#x3D;读未提交&#x3D;&#x3D;，在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。&#x3D;&#x3D;不能避免脏读、不可重复读、幻读&#x3D;&#x3D;。</p></li><li><p><code>READ COMMITTED</code> ：&#x3D;&#x3D;读已提交&#x3D;&#x3D;，它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。&#x3D;&#x3D;可以避免脏读，但不可重复读、幻读问题仍然存在&#x3D;&#x3D;。</p></li><li><p><code>REPEATABLE READ</code> ：&#x3D;&#x3D;可重复读&#x3D;&#x3D;，事务A在读到一条数据之后，此时事务B对该数据进行了修改并提交，那么事务A再读该数据，读到的还是原来的内容。&#x3D;&#x3D;可以避免脏读、不可重复读，但幻读问题仍然存在&#x3D;&#x3D;。<font color=red>这是MySQL的默认隔离级别</font>。</p></li><li><p><code>SERIALIZABLE </code>：可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。&#x3D;&#x3D;所有的并发问题都可以避免，但性能十分低下&#x3D;&#x3D;。&#x3D;&#x3D;能避免脏读、不可重复读和幻读&#x3D;&#x3D;。</p></li></ul><p><code>SQL标准</code> 中规定，针对不同的隔离级别，并发事务可以发生不同严重程度的问题，具体情况如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312231.png" alt="image-20230116213753190"></p><blockquote><p>YES表示没有解决</p></blockquote><p><code>脏写</code> 怎么没涉及到？因为脏写这个问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生。</p><p>不同的隔离级别有不同的现象，并有不同的锁和并发机制，&#x3D;&#x3D;隔离级别越高，数据库的并发性能就越差&#x3D;&#x3D;，4种事务隔离级别与并发性能的关系如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312240.png" alt="image-20230116213915702"></p><h3 id="3-4-MySQL支持的四种隔离级别"><a href="#3-4-MySQL支持的四种隔离级别" class="headerlink" title="3.4 MySQL支持的四种隔离级别"></a>3.4 MySQL支持的四种隔离级别</h3><p>不同的数据库厂商对SQL标准中规定的四种隔离级别支持不一样。比如,<code>Oracle就只支持READ COMNITTED（默认隔离级别）和SERIALIZABLE隔离级别</code>。MySQL虽然支持4种隔离级别，但与SQL标准中所规定的各级隔离级别允许发生的问题却有些出入，MySQL在REPEATABLE READ隔离级别下，是可以禁止幻读问题的发生的，禁止幻读的原因在第16章讲解。</p><p>MySQL的默认隔离级别为<code>REPEATABLE READ</code>，可以手动修改一下事务的隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 查看隔离级别，MySQL <span class="number">5.7</span><span class="number">.20</span>的版本之前：</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;tx_isolation&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+---------------+-----------------+</span></span><br><span class="line"><span class="comment">| Variable_name | Value           |</span></span><br><span class="line"><span class="comment">+---------------+-----------------+</span></span><br><span class="line"><span class="comment">| tx_isolation | REPEATABLE-READ  |</span></span><br><span class="line"><span class="comment">+---------------+-----------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># MySQL <span class="number">5.7</span><span class="number">.20</span>版本之后，引入transaction_isolation来替换tx_isolation</span><br><span class="line"></span><br><span class="line"># 查看隔离级别，MySQL <span class="number">5.7</span><span class="number">.20</span>的版本及之后：</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;transaction_isolation&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+-----------------------+-----------------+</span></span><br><span class="line"><span class="comment">| Variable_name         | Value           |</span></span><br><span class="line"><span class="comment">+-----------------------+-----------------+</span></span><br><span class="line"><span class="comment">| transaction_isolation | REPEATABLE-READ |</span></span><br><span class="line"><span class="comment">+-----------------------+-----------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#或者不同MySQL版本中都可以使用的：</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+-------------------------+</span></span><br><span class="line"><span class="comment">| @@transaction_isolation |</span></span><br><span class="line"><span class="comment">+-------------------------+</span></span><br><span class="line"><span class="comment">| REPEATABLE-READ         |</span></span><br><span class="line"><span class="comment">+-------------------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-5-如何设置事务的隔离级别"><a href="#3-5-如何设置事务的隔离级别" class="headerlink" title="3.5 如何设置事务的隔离级别"></a>3.5 如何设置事务的隔离级别</h3><p><font color=orange>1、通过下面的语句修改事务的隔离级别：</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">GLOBAL</span><span class="operator">|</span>SESSION] TRANSACTION ISOLATION LEVEL 隔离级别;</span><br><span class="line">#其中，隔离级别格式：</span><br><span class="line"><span class="operator">&gt;</span> READ UNCOMMITTED</span><br><span class="line"><span class="operator">&gt;</span> READ COMMITTED</span><br><span class="line"><span class="operator">&gt;</span> REPEATABLE READ</span><br><span class="line"><span class="operator">&gt;</span> SERIALIZABLE</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">GLOBAL</span><span class="operator">|</span>SESSION] TRANSACTION_ISOLATION <span class="operator">=</span> <span class="string">&#x27;隔离级别&#x27;</span></span><br><span class="line">#其中，隔离级别格式：</span><br><span class="line"><span class="operator">&gt;</span> READ<span class="operator">-</span>UNCOMMITTED</span><br><span class="line"><span class="operator">&gt;</span> READ<span class="operator">-</span>COMMITTED</span><br><span class="line"><span class="operator">&gt;</span> REPEATABLE<span class="operator">-</span>READ</span><br><span class="line"><span class="operator">&gt;</span> SERIALIZABLE</span><br></pre></td></tr></table></figure><p><font color=orange>2、关于设置时使用GLOBAL或SESSION的影响：</font></p><p><font color=blue>①使用<code>GLOBAL</code>关键字（在全局范围影响）：</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION_ISOLATION <span class="operator">=</span> <span class="string">&#x27;SERIALIZABLE&#x27;</span>;</span><br></pre></td></tr></table></figure><p>则：</p><ul><li>当前已经存在的会话无效</li><li>只对执行完该语句之后产生的会话起作用</li></ul><p><font color=blue>②使用 SESSION 关键字（在会话范围影响）：</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION_ISOLATION <span class="operator">=</span> <span class="string">&#x27;SERIALIZABLE&#x27;</span>;</span><br></pre></td></tr></table></figure><p>则：</p><ul><li>对当前会话的所有后续的事务有效</li><li>如果在事务之间执行，则对后续的事务有效</li><li>该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</li></ul><p>如果在服务器启动时想改变事务的默认隔离级别，可以修改启动参数<code>transaction_isolation</code>的值。比如，在启动服务器时指定了<code>transaction_isolation=SERIALIZABLE</code>,那么事务的默认隔离级别就从原来的<code>REPEATABLE-READ</code>变成了 <code>SERIALIZABLE</code>。</p><blockquote><p>小结：</p><p>数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p></blockquote><p><font color=orange>3、演示global</font></p><ul><li>开启会话A</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312247.png" alt="image-20230116223912102"></p><ul><li>再开启另一个会话B</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312256.png" alt="image-20230116224955767"></p><ul><li>会话A中退出mysql，再登录，会发现设置的隔离级别已经生效了~</li></ul><blockquote><p>msql服务器重启 <code>systemctl restart mysqld</code> 后，隔离级别又重新回到默认~ 毕竟咱们设置的都是在内存级别的~</p></blockquote><p><font color=orange>4、演示session</font></p><ul><li>会话A中</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312737.png" alt="image-20230116225823169"></p><ul><li>会话B中，事务隔离级别也变更成了我们设置的那个~</li></ul><h3 id="3-6-不同隔离级别举例"><a href="#3-6-不同隔离级别举例" class="headerlink" title="3.6 不同隔离级别举例"></a>3.6 不同隔离级别举例</h3><p>1、创建数据表，并初始化数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use atguigudb3;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">  balance <span class="type">DECIMAL</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span>(<span class="number">1</span> ,<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;100&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2、在Xshell中开两个Session，模拟两个事务~ </p><p>3、将两个session中的隔离级别都设置成<code>read-uncommitted</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034628.png" alt="image-20230117150951856"></p><p><strong><font color=orange>4、演示1. 读未提交之脏读</font></strong></p><ul><li>案例一</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034626.png" alt="image-20230117152005238"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034637.png" alt="image-20230117151854807"></p><blockquote><p>之后事务1进行回滚，事务2读取的数据就回到了 100~</p></blockquote><ul><li>案例二</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034639.png"></p><p><font color=orange>5、演示2：读已提交</font></p><ul><li>环境准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> account;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span>(<span class="number">1</span> ,<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;100&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> balance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三   <span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李四   <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>将两个session的隔离级别设置为：<code>read-committed</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction_isolation <span class="operator">=</span> <span class="string">&#x27;read-committed&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@transaction_isolation</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>COMMITTED          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>演示图解</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034635.png"></p><p><font color=orange>6、演示三、可重复读</font></p><ul><li>将两个session的隔离级别设置为：<code>repeatable-read</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction_isolation <span class="operator">=</span> <span class="string">&#x27;repeatable-read&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@transaction_isolation</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>演示图解</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034647.png"></p><p><font color=orange>7、演示四、幻读</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034488.png" alt="image-20230117235449796"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034490.png"></p><p>这里要灵活的理解读取的意思。第一次select是读取，第二次的insert其实也属于隐式的读取，只不过是在mysql的机制中读取的，&#x3D;&#x3D;插入数据也是要先读取一下有没有主键冲突才能决定是否执行插入&#x3D;&#x3D;</p><p><font color=red>幻读，并不是说两次读取获取的结果集不同，幻读侧重的方面是某一次的select 操作得到的结果所表征的数据状态无法支撑后续的业务操作</font>。更为具体一些：&#x3D;&#x3D;select某记录是否存在，不存在，准备插入此记录，但执行insert时发现此记录已存在，无法插入，此时就发生了幻读&#x3D;&#x3D;（如上图所示）。</p><p>在RR隔离级别下，step1、step2是会正常执行的，step3则会报错主键冲突，对于事务B的业务来说是执行失败的，这里事务B就是发生了幻读，因为事务B在step1中读取的数据状态并不能支撑后续的业务操作，事务B:“见鬼了，我刚才读到的结果应该可以支持我这样操作才对啊，为什么现在不可以”。事务B不敢相信的又执行了step4，发现和step1读取的结果是一样的（RR下的 <code>MVCC</code>机制)。此时，幻读无疑已经发生，事务B无论读取多少次，都查不到id&#x3D;3的记录，但它的确无法插入这条他通过读取来认定不存在的记录（此数据已被事务A插入)，对于事务B来说，它幻读了。</p><p>&#x3D;&#x3D;其实RR（Mysql默认隔离级别）也是可以避免幻读的&#x3D;&#x3D;，通过对select操作手动加行X锁(独占锁) (SELECT … FOR UPDATE这也正是SERIALIZABLE 隔离级别下会隐式为你做的事情)，同时，即便当前记录不存在，比如id &#x3D; 3是不存在的，当前事务也会获得一把记录锁（因为InnoDB的行锁锁定的是索引，故记录实体存在与否没关系，存在就加<code>行X锁</code>，不存在就加<code>间隙锁</code>），其他事务则无法插入此索引的记录，故杜绝了幻读。</p><p>在<code>SERIALIZABLE隔离级别</code>下，step1执行时是会隐式的添加<code>行(X)锁/gap(X)锁</code>的，从而step2会被阻塞，step3 会正常执行，待事务1提交后，事务2才能继续执行（主键冲突执行失败)，对于事务1来说业务是正确的，成功的阻塞扼杀了扰乱业务的事务2，对于事务1来说他前期读取的结果是可以支撑其后续业务的。</p><p>所以MySQL的幻读并非什么读取两次返回结果集不同，而是事务在插入事先检测不存在的记录时，惊奇的发现这些数据已经存在了，之前的检测读获取到的数据如同鬼影一般</p><p><font color=blue>补充：隔离级别是 <code>SERIALIZABLE</code> 时的效果：</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301180034511.png"></p><h2 id="4-事务的常见分类"><a href="#4-事务的常见分类" class="headerlink" title="4. 事务的常见分类"></a>4. 事务的常见分类</h2><p>从事务理论的角度来看，可以把事务分为以下几种类型：</p><ul><li>扁平事务（Flat Transactions）</li><li>带有保存点的扁平事务（Flat Transactions with Savepoints）</li><li>链事务（Chained Transactions）</li><li>嵌套事务（Nested Transactions）</li><li>分布式事务（Distributed Transactions）</li></ul><p>下面简单介绍这几种类型：</p><p>1）<code>扁平事务</code>是事务类型中最简单的一种，但是在实际生产环境中，这可能是使用最频繁的事务，在扁平事务中，所有操作都处于同一层次，其由BEGIN WORK开始，由COMMIT WORK或ROLLBACK WORK结束，其间的操作是原子的，要么都执行，要么都回滚，因此，扁平事务是应用程序成为原子操作的基本组成模块。扁平事务虽然简单，但是在实际环境中使用最为频繁，也正因为其简单，使用频繁，故每个数据库系统都实现了对扁平事务的支持。扁平事务的主要限制是不能提交或者回滚事务的某一部分，或分几个步骤提交。</p><p>扁平事务一般有三种不同的结果：①事务成功完成。在平常应用中约占所有事务的96%。②应用程序要求停止事务。比如应用程序在捕获到异常时会回滚事务，约占事务的3%。③外界因素强制终止事务。如连接超时或连接断开，约占所有事务的1%。</p><p>2）<code>带有保存点的扁平事务</code>除了支持扁平事务支持的操作外，还允许在事务执行过程中回滚到同一事务中较早的一个状态。这是因为某些事务可能在执行过程中出现的错误并不会导致所有的操作都无效，放弃整个事务不合乎要求，开销太大。</p><p><code>保存点（Savepoint）</code>用来通知事务系统应该记住事务当前的状态，以便当之后发生错误时，事务能回到保存点当时的状态。对于扁平的事务来说，隐式的设置了一个保存点，然而在整个事务中，只有这一个保存点，因此，回滚只能会滚到事务开始时的状态。</p><p>3）<code>链事务</code>是指一个事务由多个子事务链式组成，它可以被视为保存点模式的一个变种。带有保存点的扁平事务，当发生系统崩溃时，所有的保存点都将消失，这意味着当进行恢复时，事务需要从开始处重新执行，而不能从最近的一个保存点继续执行。链事务的思想是：在提交一个事务时，释放不需要的数据对象，将必要的处理上下文隐式地传给下一个要开始的事务，前一个子事务的提交操作和下一个子事务的开始操作合并成一个原子操作，这意味着下一个事务将看到上一个事务的结果，就好像在一个事务中进行一样。这样，<strong>在提交子事务时就可以释放不需要的数据对象，而不必等到整个事务完成后才释放</strong>。其工作方式如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301162312756.png" alt="image-20230116230734528"></p><p>链事务与带有保存点的扁平事务的不同之处体现在：</p><p>①带有保存点的扁平事务能回滚到任意正确的保存点，而链事务中的回滚仅限于当前事务，即只能恢复到最近的一个保存点。</p><p>②对于锁的处理，两者也不相同，链事务在执行COMMIT后即释放了当前所持有的锁，而带有保存点的扁平事务不影响迄今为止所持有的锁。</p><p>4）<code>嵌套事务</code>是个层次结构框架，由一个顶层事务（Top-Level Transaction）控制着各个层次的事务，顶层事务之下嵌套的事务被称为子事务（Subtransaction），其控制着每一个局部的变换，子事务本身也可以是嵌套事务。因此，嵌套事务的层次结构可以看成是一棵树。</p><p>5）<code>分布式事务</code>通常是在一个分布式环境下运行的扁平事务，因此，需要根据数据所在位置访问网络中不同节点的数据库资源。例如，一个银行用户从招商银行的账户向工商银行的账户转账1000元，这里需要用到分布式事务，因为不能仅调用某一家银行的数据库就完成任务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、MySQL事务日志</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC12%E7%AB%A0_MySQL%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC12%E7%AB%A0_MySQL%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>事务有4种特性<code>:原子性</code>、<code>一致性</code>、<code>隔离性</code>和<code>持久性</code>。那么事务的四种特性到底是基于什么机制实现呢?</p><ul><li>事务的隔离性由<code>锁机制</code>实现</li><li>而事务的原子性、一致性和持久性由事务的<code>redo</code>日志和<code>undo</code>日志来保证。<ul><li>REDO LOG称为<code>重做日志</code>，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的特久性。</li><li>UNDO LOG称为<code>回滚日志</code>，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。</li></ul></li></ul><p>有的DBA或许会认为UNDO是REDO的逆过程，其实不然。REDO和UNDO都可以视为是一种<code>恢复操作</code>。但是:：</p><ul><li><p>redo log：是存储引擎层(innodb)生成的日志，记录的是”<code>物理级别</code>“上的页修改操作，比如页号xxx、偏移量yyy写入了’zzz’数据。&#x3D;&#x3D;主要为了保证数据的可靠性&#x3D;&#x3D;</p></li><li><p>undo log:是存储引擎层(innodb)生成的日志，记录的是<code>逻辑操作</code>日志，比如对某一行数据进行了INSERT语句操作，那么undo log就记录一条与之相反的DELETE操作。&#x3D;&#x3D;主要用于事务的回滚&#x3D;&#x3D;(undo log 记录的是每个修改操作的<code>逆操作</code>)和<code>一致性非锁定读</code>(undo log回滚行记录到某种特定的版本–MVCC，即多版本并发控制）</p></li></ul><h2 id="1-redo日志"><a href="#1-redo日志" class="headerlink" title="1. redo日志"></a>1. redo日志</h2><p>InnoDB存储引擎是以<code>页为单位</code>来管理存储空间的。在真正访问页面之前，需要把在<code>磁盘上</code>的页缓存到内存中的<code>Buffer Pool</code>之后才可以访问。&#x3D;&#x3D;所有的变更都必须先更新缓冲池中的数据，然后缓冲池中的脏页会以一定的频率被刷入磁盘&#x3D;&#x3D;（ <code>checkPoint机制</code>），通过缓冲池来优化CPU和磁盘之间的鸿沟，这样就可以保证整体的性能不会下降太快。</p><h3 id="1-1-为什么需要REDO日志"><a href="#1-1-为什么需要REDO日志" class="headerlink" title="1.1 为什么需要REDO日志"></a>1.1 为什么需要REDO日志</h3><p>一方面，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟，checkpoint机制可以保证数据的最终落盘，然而由于checkpoint <code>并不是每次变更的时候就触发 的</code>，而是master线程隔一段时间去处理的。所以最坏的情况就是事务提交后，刚写完缓冲池，数据库宕机了，那么这段数据就是丢失的，无法恢复。</p><p>另一方面，事务包含 <code>持久性</code> 的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。</p><p>那么如何保证这个持久性呢？<code> 一个简单的做法</code> ：&#x3D;&#x3D;在事务提交完成之前把该事务所修改的所有页面都刷新到磁盘&#x3D;&#x3D;，但是这个简单粗暴的做法有些问题：</p><ul><li><strong><font color=blue>修改量与刷新磁盘工作量严重不成比例</font></strong><br>有时候仅仅修改了某个页面中的一个字节，但是我们知道在InnoDB中是以页为单位来进行磁盘IO的，也就是说在该事务提交时不得不将一个完整的页面从内存中刷新到慈盘，我们又知道一个页面默认是16KB大小，只修改一个字节就要刷新16KB的数据到磁盘上显然是太小题大做了。</li><li><strong><font color=blue>随机IO刷新较慢</font></strong><br>一个事务可能包含很多语句，即使是一条语句也可能修改许多页面，假如该事务修改的这些页面可能并不相邻，这就意味着在将某个事务修改的Buffer Pool中的页面刷新到磁盘时，需要进行很多的随机IO，随机IO比顺序IO要慢，尤其对于传统的机械硬盘来说。</li></ul><p><code>另一个解决的思路</code>∶我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。所以其实没有必要在每次事务提交时就把该事务在内存中修改过的全部页面刷新到磁盘，&#x3D;&#x3D;只需要把修改了哪些东西记录一下就好&#x3D;&#x3D;。比如，某个事务将0号系统表空间中<code>第10号</code>页面中偏移量为<code>100</code>处的值<code>1</code>改成<code>2 </code>。我们只需记录一下：将第0号表空间的<code>第10号</code>页面中偏移量为100处的值更新为2。</p><p>InnoDB引擎的事务采用了WAL技术（<code>Write-Ahead Logging</code> )，这种技术的思想就是<code>先写日志，再写磁盘</code>，&#x3D;&#x3D;只有日志写入成功，才算事务提交成功&#x3D;&#x3D;，这里的日志就是redo log。<font color=red>当发生宕机且数据未刷到磁盘的时候，可以通过redo log来恢复，保证ACID中的D</font>，这就是redo log的作用。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035296.png" alt="image-20230118213029209"></p><h3 id="1-2-REDO日志的好处、特点"><a href="#1-2-REDO日志的好处、特点" class="headerlink" title="1.2 REDO日志的好处、特点"></a>1.2 REDO日志的好处、特点</h3><h4 id="1-好处"><a href="#1-好处" class="headerlink" title="1. 好处"></a>1. 好处</h4><ul><li>redo日志降低了刷盘频率</li><li>redo日志占用的空间非常小</li></ul><p>存储<code>表空间ID</code>、<code>页号</code>、<code>偏移量</code>以及<code>需要更新的值</code>，所需的存储空间是很小的，刷盘快。</p><h4 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h4><ul><li>redo日志是顺序写入磁盘的</li></ul><p>在执行事务的过程中，&#x3D;&#x3D;每执行一条语句，就可能产生若干条redo日志&#x3D;&#x3D;，这些日志是按照产生的顺序写入磁盘的，也就是使用顺序IO，效率比随机lO快。</p><ul><li>事务执行过程中，redo log不断记录</li></ul><p>redo log跟bin log的区别，redo log是<code>存储引擎层</code>产生的，而bin log是<code>数据库层</code>产生的。假设一个事务，对表做10万行的记录插入，在这个过程中，一直不断的往redo log顺序记录，而bin log不会记录，直到这个事务提交，才会一次写入到bin log文件中（bin log是记录主从复制的~）</p><h3 id="1-3-redo的组成"><a href="#1-3-redo的组成" class="headerlink" title="1.3 redo的组成"></a>1.3 redo的组成</h3><p>Redo log可以简单分为以下两个部分：</p><ul><li><code>重做日志的缓冲 (redo log buffer)</code> ，保存在内存中，是易失的。</li></ul><p>在服务器启动时就向操作系统申请了一大片称之为redo log buffer的<code>连续内存</code>空间，翻译成中文就是redo日志缓冲区。这片内存空间被划分成若干个连续的<code>redo log block</code>。一个redo log block占用<code>512字节</code>大小</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035315.png" alt="image-20230119125711415"></p><p><strong>参数设置：innodb_log_buffer_size：</strong><br>redo log buffer 大小，默认 16M ，最大值是4096M，最小值为1M。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%innodb_log_buffer_size%&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+------------------------+----------+</span></span><br><span class="line"><span class="comment">| Variable_name | Value |</span></span><br><span class="line"><span class="comment">+------------------------+----------+</span></span><br><span class="line"><span class="comment">| innodb_log_buffer_size | 16777216 |</span></span><br><span class="line"><span class="comment">+------------------------+----------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>重做日志文件 (redo log file) ，保存在硬盘中，是持久的。</li></ul><p>REDO日志文件如图所示，其中的<code>ib_logfile0</code>和<code>ib_logfile1</code>即为REDO日志</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035312.png" alt="image-20230119130410801"></p><h3 id="1-4-redo的整体流程"><a href="#1-4-redo的整体流程" class="headerlink" title="1.4 redo的整体流程"></a>1.4 redo的整体流程</h3><p>以一个更新事务为例，redo log 流转过程，如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035373.png" alt="image-20230119143720695"></p><p><code>第1步</code>：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝<br><code>第2步</code>：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值<br><code>第3步</code>：当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加写的方式<br><code>第4步</code>：定期将内存中修改的数据刷新到磁盘中</p><blockquote><p><strong>体会：</strong><code>Write-Ahead Log</code>(预先日志持久化)：在持久化一个数据页之前，先将内存中相应的日志页持久化。</p></blockquote><h3 id="1-5-redo-log的刷盘策略"><a href="#1-5-redo-log的刷盘策略" class="headerlink" title="1.5 redo log的刷盘策略"></a>1.5 redo log的刷盘策略</h3><p>redo log的写入并不是直接写入磁盘的，InnoDB引擎会在写redo log的时候先写redo log buffer，之后以 <code>一定的频率</code>刷到真正的redo log file 中。这里的一定频率怎么看待呢？这就是我们要说的刷盘策略。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035317.png" alt="image-20230119144112435"></p><p>注意，redo log buffer刷盘到redo log file的过程并不是真正的刷到磁盘中去，只是刷入到 <code>文件系统缓存</code>（<code>page cache</code>）中去（这是现代操作系统为了提高文件写入效率做的一个优化），真正的写入会交给<code>系统自己来决定</code>（比如page cache足够大了）。那么对于InnoDB来说就存在一个问题，如果交给系统来同步，同样如果系统宕机，那么数据也丢失了（虽然整个系统宕机的概率还是比较小的）。</p><p>针对这种情况，InnoDB给出<code>innodb_flush_log_at_trx_commit </code>参数，该参数控制 commit提交事务时，如何将 redo log buffer 中的日志刷新到 redo log file 中。它支持三种策略：</p><ul><li><code>设置为0</code> ：表示每次事务提交时不进行刷盘操作。（系统默认master thread(后台线程)每隔1s进行一次重做日 志的同步）</li><li><code>设置为1</code> ：表示每次事务提交时都将进行同步，刷盘操作（<code>默认值</code> ）</li><li><code>设置为2</code> ：表示每次事务提交时都只把 redo log buffer 内容写入 page cache，不进行同步。由os自己决定什么时候同步到磁盘文件。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+--------------------------------+-------+</span></span><br><span class="line"><span class="comment">| Variable_name                  | Value |</span></span><br><span class="line"><span class="comment">+--------------------------------+-------+</span></span><br><span class="line"><span class="comment">| innodb_flush_log_at_trx_commit | 1     |</span></span><br><span class="line"><span class="comment">+--------------------------------+-------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>另外，InnoDB存储引擎有一个后台线程，每隔<code>1秒</code>，就会把 <code>redo log buffer</code> 中的内容写到文件系统缓存( <code>page cache</code> ) ，然后调用刷盘操作。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035376.png" alt="image-20230119145340527"></p><p>也就是说，一个没有提交事务的<code>redo log</code> 记录，也可能会刷盘。因为在事务执行过程redo log记录是会写入redo log buffer中，这些redo log记录会被后台线程刷盘</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035186.png" alt="image-20230119145412718"></p><p>除了后台线程每秒<code>1次</code>的轮询操作，还有一种情况，当<code>redo log buffer</code>占用的空间即将达到<code>innodb_log_buffer_size</code>(这个参数默认是16M）的一半的时候，后台线程会主动刷盘。</p><h3 id="1-6-不同刷盘策略演示"><a href="#1-6-不同刷盘策略演示" class="headerlink" title="1.6 不同刷盘策略演示"></a>1.6 不同刷盘策略演示</h3><h4 id="1-刷盘策略分析"><a href="#1-刷盘策略分析" class="headerlink" title="1. 刷盘策略分析"></a>1. 刷盘策略分析</h4><p><font color=orange>1、innodb_flush_log_at_trx_commit&#x3D;1</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035192.png" alt="image-20230119151403112"></p><blockquote><p><strong>总结</strong></p><p>innodb_flush_log_at_trx_commit&#x3D;1时，&#x3D;&#x3D;只要事务提交成功，（都会主动同步刷盘，这个速度是很快的），最终redo log记录就一定在硬盘里&#x3D;&#x3D;，不会有任何数据丢失。</p><p>如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。&#x3D;&#x3D;可以保证ACID的D，数据绝对不会丢失&#x3D;&#x3D;，但是这种&#x3D;&#x3D;效率是最差的&#x3D;&#x3D;。</p><p><font color=red>建议使用默认值</font>，虽然操作系统宕机的概率理论小于数据库宕机的概率，但是一般既然使用了事务，那么数据的安全相对来说更重要些</p></blockquote><p><font color=orange>2、innodb_flush_log_at_trx_commit&#x3D;2</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035219.png"></p><blockquote><p><strong>总结</strong></p><p>innodb_flush_log_at_trx_commit&#x3D;2时，&#x3D;&#x3D;只要事务提交成功&#x3D;&#x3D;，&#x3D;&#x3D;redo log buffer中的内容就会写入文件系统缓存&#x3D;&#x3D;（page cache）</p><p>如果仅仅只是<code>MySQL挂了不会有任何数据丢失</code>，但是<code>操作系统宕机</code>可能会有1秒数据的丢失，这种情况下无法满足ACID中的D。</p><p>但是数值2是一种折中的做法，它的IO效率理论是高于1的，低于0的</p><p>当进行调优时，为了降低CPU的使用率，可以从1降成2。因为OS出现故障的概率很小~</p></blockquote><p><font color=orange>3、innodb_flush_log_at_trx_commit&#x3D;0</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035225.png"></p><blockquote><p><strong>总结</strong></p><p> innodb_flush_log_at_trx_commit&#x3D;0时,master thread中每1秒进行一次重做日志的fsync操作，因此实例crash<code>最多丢失1秒钟内的事务</code>。( master thread是负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性)</p><p>数值0话，是一种效率最高的做法，这种策略也有丢失数据的风险，也无法保证D。</p></blockquote><p><strong><font color=red>一句话就是：<code>0：延迟写，延迟刷</code>，<code>1：实时写，实时刷</code>，<code>2：实时写，延迟刷</code></font></strong></p><h4 id="2-举例"><a href="#2-举例" class="headerlink" title="2. 举例"></a>2. 举例</h4><p>比较innodb_flush_log_at_trx_commit对事务的影响。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#################################数据准备####################################</span><br><span class="line">USE atguigudb3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_load(</span><br><span class="line">a <span class="type">INT</span>,</span><br><span class="line">b <span class="type">CHAR</span>(<span class="number">80</span>)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"></span><br><span class="line">#创建存储过程，用于向test_load中添加数据</span><br><span class="line">DELIMITER<span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p_load(COUNT <span class="type">INT</span> UNSIGNED)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">INT</span> UNSIGNED <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="type">CHAR</span>(<span class="number">80</span>)<span class="keyword">DEFAULT</span> REPEAT(<span class="string">&#x27;a&#x27;</span>,<span class="number">80</span>);</span><br><span class="line">WHILE s<span class="operator">&lt;=</span>COUNT DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_load <span class="keyword">SELECT</span> <span class="keyword">NULL</span>,c;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">SET</span> s<span class="operator">=</span>s<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line">###########################测试<span class="number">1</span>：###########################################</span><br><span class="line">#设置并查看：innodb_flush_log_at_trx_commit</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">set</span> <span class="keyword">GLOBAL</span> innodb_flush_log_at_trx_commit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> p_load(<span class="number">30000</span>); #<span class="number">1</span>min <span class="number">28</span>sec</span><br><span class="line"></span><br><span class="line">############################测试<span class="number">2</span>：#########################################</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> test_load;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> test_load;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_flush_log_at_trx_commit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> p_load(<span class="number">30000</span>); #<span class="number">37.945</span> sec</span><br><span class="line"></span><br><span class="line">##########################测试<span class="number">3</span>：###########################################</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> test_load;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> test_load;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_flush_log_at_trx_commit <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_flush_log_at_trx_commit&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> p_load(<span class="number">30000</span>); #<span class="number">45.173</span> sec</span><br></pre></td></tr></table></figure><table><thead><tr><th>innodb_flush_logat_trx_commit</th><th>执行所用的时间</th></tr></thead><tbody><tr><td>0</td><td>37.945 sec</td></tr><tr><td>1</td><td>1min 28sec</td></tr><tr><td>2</td><td>45.173 sec</td></tr></tbody></table><p>而针对上述存储过程，为了提高事务的提交性能，应该在将3万行记录插入表后进行一次的COMMIT操作，而不是每插入一条记录后进行一次COMMIT操作。这样做的好处是可以使事务方法在rollback时回滚到事务最开始的确定状态。</p><blockquote><p>虽然用户可以通过设置参数innodb_flush_log_at_trx_commit为0或2来提高事务提交的性能，但需清楚，这种设置方法丧失了事务的ACID特性。</p></blockquote><h3 id="1-7-写入redo-log-buffer-过程"><a href="#1-7-写入redo-log-buffer-过程" class="headerlink" title="1.7 写入redo log buffer 过程"></a>1.7 写入redo log buffer 过程</h3><h4 id="1-补充概念-Mini-Transaction"><a href="#1-补充概念-Mini-Transaction" class="headerlink" title="1. 补充概念:Mini-Transaction"></a>1. 补充概念:Mini-Transaction</h4><p>MySQL把对底层页面中的一次原子访问的过程称之为一个<code>Mini-Transaction</code>，简称mtr，比如，向某个索引对应的B+树中插入一条记录的过程就是一个<code>Mini-Transaction</code>。<code>一个所谓的mtr可以包含一组redo日志</code>，在进行崩溃恢复时这一组<code>redo</code>日志作为一个不可分割的整体。</p><p>一个事务可以包含若干条语句，每一条语句其实是由若干个<code>mtr</code>组成，每一个<code>mtr</code>又可以包含若干条redo日志，画个图表示它们的关系就是这样:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035234.png"></p><blockquote><p>分析：一个事务有多条SQL语句组成~ 一个SQL语句包含多个mtr：因为一个SQL可能改变多条记录；一个mtr对应多条redo日志，因为redo存放的是物理级别的修改，当插入语句且页分裂时，会大量出现比如A页xxx、偏移量yy写入了’zzz’数据，B页面aaa、偏移量bb写入了‘ccc’数据…</p></blockquote><h4 id="2-redo-日志写入log-buffer"><a href="#2-redo-日志写入log-buffer" class="headerlink" title="2. redo 日志写入log buffer"></a>2. redo 日志写入log buffer</h4><p>向<code>log buffer</code>中写入redo日志的过程是顺序的，也就是先往前边的block中写，当该block的空闲空间用完之后再往下一个block中写。当想往log buffer中写入redo日志时，第一个遇到的问题就是应该写在哪个<code>block</code>的哪个偏移量处，所以<code>InnoDB</code>的设计者特意提供了一个称之为<code>buf_free</code>的全局变量，该变量指明后续写入的redo日志应该写入到 log buffer中的哪个位置，如图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035242.png"></p><p>一个mtr执行过程中可能产生若干条redo日志，<code>这些redo日志是一个不可分割的组</code>，所以其实并不是每生成一条redo日志，就将其插入到log buffer中，而是每个mtr运行过程中产生的日志先暂时存到一个地方，当该mtr结束的时候，将过程中产生的一组redo日志再全部复制到log bulffer中。假设有两个名为<code>T1、T2</code>的事务，每个事务都包含2个mtr，我们给这几个mtr命名一下;</p><ul><li>事务T1的两个<code>mtr</code>分别称为<code>mtr_T1_1</code>和<code>mtr_T1_2</code></li><li>事务T2的两个<code>mtr</code>分别称为<code>mtr_T2_1</code>和<code>mtr_T2_2</code></li></ul><p>每个mtr都会产生一组redo日志，用示意图来描述一下这些mtr产生的日志情况:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035256.png"></p><p>不同的事务可能是<code>并发</code>执行的，所以<code>T1</code>、<code>T2</code>之间的<code>mtr</code>可能是<code>交替执行</code>的。每当一个mtr执行完成时，伴随该mtr生成的一组redo日志就需要被复制到log buffer中，也就是说<code>不同事务的mtr可能是交替写入log buffer的</code>，我们画个示意图(为了美观，把一个mtr中产生的所有的redo日志当作一个整体来画):</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035263.png"></p><p>有的mtr产生的redo日志量非常大，比如<code>mtr_t1_2</code>产生的redo日志占用空间比较大，占用了3个block来存储。</p><h4 id="3-redo-log-block的结构图"><a href="#3-redo-log-block的结构图" class="headerlink" title="3. redo log block的结构图"></a>3. redo log block的结构图</h4><p>一个redo log block是由<code>日志头</code>、<code>日志体</code>、<code>日志尾</code>组成。日志头占用12字节，日志尾占用8字节，所以一个block真正能存储的数据就是512-12-8&#x3D;492字节。</p><blockquote><p><strong>为什么一个block设计成512字节?</strong></p><p>这个和磁盘的扇区有关，机械磁盘默认的扇区就是512字节，如果要写入的数据大于512字节，那么要写入的扇区肯定不止一个，这时就要涉及到盘片的转动，找到下一个扇区，假设现在需要写入两个扇区A和B，如果扇区A写入成功，而扇区B写入失败，那么就会出现<code>非原子性</code>的写入，而如果每次只写入和扇区的大小一样的512字节,那么每次的写入都是原子性的</p></blockquote><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035269.png"></p><p>真正的&#x3D;&#x3D;redo日志都是存储到占用496字节大小的log block body中&#x3D;&#x3D;，图中的log block header和log block trailer存储的是一些管理信息。我们来看看这些所谓的管理信息都有什么</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035282.png"></p><ul><li><code>log block header</code>的属性分别如下:<ul><li><code>LOG_BLOCK_HDR_NO </code>: log buffer是由log block组成，在内部log buff er就好似一个数组，因此LOG_BLOCK_HDR_NO用来标记这个数组中的位置。其是递增并且循环使用的，占用4个字节，但是由于第—位用来判新是否是flush bit，所以最大的值为2G。</li><li><code>LOG_BLOCK_HDR_DATA_LEN</code>∶表示block中已经使用了多少字节，初始值为<code>12</code>(因为<code>log block body</code>从第12个字节处开始)。随着往block中写入的redo日志越来也多，本属性值也跟着增长。如果<code>log block body</code>已经被全部写满,那么本属性的值被设置为<code>512</code></li><li><code>LOG_BLOCK_FIRST_REC_GROUP </code>:一条redo日志也可以称之为一条redo日志记录（redo log record)，一个mtr会生产多条redo日志记录，这些redo日志记录被称之为一个redo日志记录组(redo log record group)。LOG_BLOCK_FIRST_REC_GROUP就代表该block中第一个mtr生成的redo日志记录组的偏移量(其实也就是这个block里第一个mtr生成的第一条redo日志的偏移量)。如果该值的大小</li><li><code>LOG_BLOCK_HDR_DATA_LEN</code>相同，则表示当前log block不包含新的日志。</li><li><code>LOG_BLOCK_CHECKPOINT_NO</code>:占用4字节，表示该log block最后被写入时的<code>checkpoint</code>。</li></ul></li><li><code>log block trailer</code>中属性的意思如下:<ul><li><code>LOG_BLOCK_CHECKSUN</code>:表示block的校验值，用于正确性校验（其值和LOG_BLOCK_HDR_NO相同)，暂时不关心它。</li></ul></li></ul><h3 id="1-8-redo-log-file"><a href="#1-8-redo-log-file" class="headerlink" title="1.8 redo log file"></a>1.8 redo log file</h3><h4 id="1-相关参数设置"><a href="#1-相关参数设置" class="headerlink" title="1. 相关参数设置"></a>1. 相关参数设置</h4><ul><li><code>innodb_log_group_home_dir </code>：指定 redo log 文件组所在的路径，默认值为<code>./</code> ，表示在数据库的数据目录下。MySQL的默认数据目录（<code>var/lib/mysql</code> ）下默认有两个名为<code>ib_logfile0 </code>和<code>ib_logfile1 </code>的文件，log buffer中的日志默认情况下就是刷新到这两个磁盘文件中。此redo日志文件位置还可以修改。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_log_group_home_dir&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name             <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_log_group_home_dir <span class="operator">|</span> .<span class="operator">/</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li><code>innodb_log_files_in_group</code>：指明redo log file的个数，命名方式如：ib_logfile0，iblogfile1…iblogfilen。默认2个，最大100个。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_log_files_in_group&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+---------------------------+-------+</span></span><br><span class="line"><span class="comment">| Variable_name             | Value |</span></span><br><span class="line"><span class="comment">+---------------------------+-------+</span></span><br><span class="line"><span class="comment">| innodb_log_files_in_group | 2     |</span></span><br><span class="line"><span class="comment">+---------------------------+-------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#ib_logfile0</span><br><span class="line">#ib_logfile1</span><br></pre></td></tr></table></figure><ul><li><p><code>innodb_flush_log_at_trx_commit</code>：控制 redo log 刷新到磁盘的策略，默认为<code>1</code>。</p></li><li><p><code>innodb_log_file_size</code>：单个 redo log 文件设置大小，默认值为<code>48M </code>。最大值为512G，注意最大值指的是整个redo log 系列文件之和，即（innodb_log_files_in_group * innodb_log_file_size）不能大于最大值512G。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_log_file_size&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+----------------------+----------+</span></span><br><span class="line"><span class="comment">| Variable_name | Value |</span></span><br><span class="line"><span class="comment">+----------------------+----------+</span></span><br><span class="line"><span class="comment">| innodb_log_file_size | 50331648 |</span></span><br><span class="line"><span class="comment">+----------------------+----------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据业务修改其大小，以便容纳较大的事务。编辑my.cnf文件并重启数据库生效，如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@centos7</span><span class="operator">-</span>mysql<span class="number">-1</span> mysql]#vim <span class="operator">/</span>etc<span class="operator">/</span>my.cnf</span><br><span class="line">innodb_log_file_size<span class="operator">=</span><span class="number">200</span>M</span><br></pre></td></tr></table></figure><blockquote><p>在数据库实例更新比较频繁的情况下，可以适当加大 redo log组数和大小。但也不推荐redo log设置过大，在MySQL前溃恢复时会重新执行REDO日志中的记录。</p></blockquote><h4 id="2-日志文件组"><a href="#2-日志文件组" class="headerlink" title="2. 日志文件组"></a>2. 日志文件组</h4><p>从上边的描述中可以看到，磁盘上的<code>redo</code>日志文件不只一个，而是以一个<code>日志文件组</code>的形式出现的。这些文件以<code>ib_logfile[数字]</code>（<code>数字</code>可以是<code>0、1、2…</code>）)的形式进行命名，每个的redo日志文件大小都是一样的。</p><p>在将redo日志写入日志文件组时，是从<code>ib_logfile0</code>开始写，如果<code>ib_logfile0</code>写满了，就接着<code>ib_logfile1</code>写。同理, <code>ib_logf1le1</code>写满了就去写<code>ib_logfile2</code>，依此类准。如果写到最后一个文件该咋办?那就<code>重新转到ib_logfile0继续写</code>，所以整个过程如下图所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035304.png" alt="image-20230119212532135"></p><p>总共的redo日志文件大小其实就是: <code>innodb_log_file_size * innodb_log_files_in_group</code></p><p>采用循环使用的方式向redo日志文件组里写数据的话，会导致后写入的redo日志在盖掉前边写的redo日志?当然!所以InnoDB的设计者提出了checkpoint的概念。</p><h4 id="3-checkpoint"><a href="#3-checkpoint" class="headerlink" title="3. checkpoint"></a>3. checkpoint</h4><p>在整个日志文件组中还有两个重要的属性，分别是<code>write pos</code>、<code>checkpoint</code></p><ul><li>write pos是当前记录的位置，一边写一边后移</li><li>checkpoint是当前要擦除的位置，也是往后推移</li></ul><p>每次<code>刷盘 redo log记录到日志文件组</code>中，<code>write pos</code>位置就会<code>后移</code>更新。每次MySQL<code>加载日志文件组恢复数据</code>时，会清空加载过的redo log记录，并把 <code>checkpoint后移</code>更新。write pos和checkpoint之间的还空着的部分可以用来写入新的redo log记录。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035306.png" alt="image-20230119212607110"></p><p>如果 write pos 追上 checkpoint ，表示<code>日志文件组</code>满了，这时候不能再写入新的 redo log记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035944.png" alt="image-20230119212622535"></p><h3 id="1-9-redo-log小结"><a href="#1-9-redo-log小结" class="headerlink" title="1.9 redo log小结"></a>1.9 redo log小结</h3><p>相信大家都知道redo log的作用和它的刷盘时机、存储形式:</p><p><font color=red>InnoDB 的更新操作采用的是Write Ahead Log (预先日志持久化)策略，即先写日志，再写入磁盘</font></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035955.png" alt="image-20230119212716151"></p><h2 id="2-Undo日志"><a href="#2-Undo日志" class="headerlink" title="2. Undo日志"></a>2. Undo日志</h2><p>redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中 <code>更新数据</code> 的 <code>前置操作 </code>其实是要先写入一个 <code>undo log</code> 。</p><h3 id="2-1-如何理解Undo日志"><a href="#2-1-如何理解Undo日志" class="headerlink" title="2.1 如何理解Undo日志"></a>2.1 如何理解Undo日志</h3><p>事务需要保证 <code>原子性</code> ，也就是事务中的操作要么全部完成，要么什么也不做。但有时候事务执行到一半会出现一些情况，比如：</p><ul><li>情况一：事务执行过程中可能遇到各种错误，比如<code>服务器本身的错误</code> ，<code>操作系统错误 </code>，甚至是突然<code>断电</code> 导致的错误。</li><li>情况二：程序员可以在事务执行过程中手动输入<code>ROLLBACK </code>语句结束当前事务的执行。</li></ul><p>以上情况出现，需要把数据改回原先的样子，这个过程称之为<code>回滚</code> ，这样就可以造成一个假象：这个事务看起来什么都没做，所以符合原子性要求。</p><p>每当我们要对一条记录做改动时(这里的<code>改动</code>可以指<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE </code>），都需要”留一手”—&gt;把回滚时所需的东西记下来。比如:</p><ul><li>你<code>插入一条记录</code>时，至少要把这条记录的<code>主键值</code>记下来，之后回滚的时候只需要把这个主键值对应的记录<code>删除</code>就好了（对于每个INSERT，InnoDB存储引擎会完成一个DELETE)</li><li>你<code>删除了一条记录</code>，至少要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录<code>插入</code>到表中就好了。(对于每个DELETE，InnoDB存储引擎会执行一个INSERT)</li><li>你<code>修改了一条记录</code>，至少要把修改这条记录前的旧值都记录下来，这样之后回滚时再把这条记录<code>更新为旧值</code>就好了。(对于每个UPDATE，InnoDB存储引擎会执行一个相反的UPDATE，将修改前的行放回去)</li></ul><p>MySQL把这些为了回滚而记录的这些内容称之为<code>撤销日志</code>或者<code>回滚日志</code>(即undo log)。</p><blockquote><p><strong>注意</strong></p><ul><li><p>由于查询操作( <code>SELECT</code>）并不会修改任何用户记录，所以在查询操作执行时，<code>并不需要记录</code>相应的undo日志</p></li><li><p>此外，undo log 会产生<code>redo log</code>，也就是undo log的产生会伴随着redo log的产生，这是因为undo log也需要持久性的保护</p></li></ul></blockquote><h3 id="2-2-Undo日志的作用"><a href="#2-2-Undo日志的作用" class="headerlink" title="2.2 Undo日志的作用"></a>2.2 Undo日志的作用</h3><p><strong><font color=orange>作用1：回滚数据</font></strong></p><p>用户对undo日志可能<code>有误解</code>：undo用于将数据库物理地恢复到执行语句或事务之前的样子。但事实并非如此。undo是<code>逻辑日志</code>，因此只是将数据库逻辑地恢复到原来的样子。&#x3D;&#x3D;所有修改都被逻辑地取消了，但是数据结构和页本身在回滚之后可能大不相同&#x3D;&#x3D;。(比如新增的页不会逻辑的进行删除~)</p><p>这是因为在多用户并发系统中，可能会有数十、数百甚至数千个并发事务。数据库的主要任务就是<code>协调对数据记录的并发访问</code>。比如，一个事务在修改当前一个页中某几条记录，同时还有别的事务在对同一个页中另几条记录进行修改。因此，不能将一个页回滚到事务开始的样子，因为这样会影响其他事务正在进行的工作。</p><p><strong><font color=orange>作用2：MVCC</font></strong><br>undo的另一个作用是<code>MVCC</code>，即在InnoDB存储引擎中<code>MVCC的实现是通过undo来完成</code>。当用户读取一行记录时，若该记录已经被其他事务占用，当前事务可以通过undo读取之前的行版本信息，以此实现<code>非锁定读取</code></p><h3 id="2-3-undo的存储结构"><a href="#2-3-undo的存储结构" class="headerlink" title="2.3 undo的存储结构"></a>2.3 undo的存储结构</h3><h4 id="1-回滚段与undo页"><a href="#1-回滚段与undo页" class="headerlink" title="1. 回滚段与undo页"></a>1. 回滚段与undo页</h4><p>InnoDB对undo log的管理采用段的方式，也就是 <code>回滚段（rollback segment）</code> 。每个回滚段记录了<code>1024 </code>个<code> undo log segment</code> ，而在每个undo log segment段中进行<code>undo页</code>的申请。</p><ul><li><p>在<code>InnoDB1.1版本之前</code>（不包括1.1版本），只有一个rollback segment，因此支持同时在线的事务限制为<code>1024</code>。虽然对绝大多数的应用来说都已经够用。</p></li><li><p>从1.1版本开始InnoDB支持最大<code>128个rollback segment </code> ，故其支持同时在线的事务限制提高到 了<code>128*1024</code></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_undo_logs&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+------------------+-------+</span></span><br><span class="line"><span class="comment">| Variable_name | Value |</span></span><br><span class="line"><span class="comment">+------------------+-------+</span></span><br><span class="line"><span class="comment">| innodb_undo_logs | 128 |</span></span><br><span class="line"><span class="comment">+------------------+-------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然InnoDB1.1版本支持了128个rollback segment，但是这些rollback segment都存储于共享表空间<code>ibdata</code>中。从InnoDB1.2版本开始，可通过参数对rollback segment做进一步的设置。这些参数包括:</p><ul><li><code>innodb_undo_directory</code>:设置rollback segment文件所在的路径。这意味若rollback segment可以存放在共享表空间以外的位置，即可以设置为独立表空间。该参数的默认值为“.&#x2F;”，表示当前InnoDB存储引擎的目录</li><li><code>innodb_undo_logs</code>:设置rollback segment的个数，默认值为<code>128</code>。在InnoDB1.2版本中，该参数用来替换之前版本的参数innodb_rollback_segments。</li><li><code>innodb_undo_tablespaces</code>:设置构成rollback segment文件的数目，<code>默认值为2</code>，这样rollback segment可以较为平均地分布在多个文件中。设置该参数后，会在路径innodb_undo_directory看到undo为前缀的文件，该文件就代表rollback segment文件</li></ul><p>undo log相关参数一般很少改动。</p><p><strong><font color=blue>补充：undo页的重用</font></strong></p><p>当开启一个事务需要写undo log的时候，就得先去undo log segment中去找到一个空闲的位置，当有空位的时候，就去申请undo页，在这个申请到的undo页中进行undo log的写入。我们知道mysql默认一页的大小是<code>16k</code>。</p><p>为每一个事务分配一个页，是非常浪费的（除非你的事务非常长)，假设你的应用的TPS(每秒处理的事务数目)为1000，那么1s就需要1000个页大概需要16M的存储，1分钟大概需要1G的存储。如果照这样下去除非MySQL清理的非常勤快，否则随着时间的推移，磁盘空间会增长的非常快，而且很多空间都是浪费的。</p><p>于是undo页就被设计的可以<code>重用</code>了，当事务提交时，并<code>不会立刻删除undo页</code>。因为重用，所以这个undo页可能混杂着其他事务的undo log。undo log在commit后，会被放到一个链表中，然后判断undo页的使用空间是否小于3 &#x2F;4，如果<code>小于3/4</code>的话，则表示当前的undo页可以被重用，那么它就不会被回收，其他事务的undo log可以记录在当前undo页的后面。由于undo log是<code>离散的</code>，所以清理对应的磁盘空间时，效率不高。</p><blockquote><p>因为每一个事务分配一个页，造成非常浪费，所以要重用—&gt;因为重用，所以当前日志的undo页可能会有其他事务的undo log—&gt;所以当前事务提交后，不能立即删除undo页。而是log放到链表中，尝试重用undo页面~</p></blockquote><h4 id="2-回滚段与事务"><a href="#2-回滚段与事务" class="headerlink" title="2. 回滚段与事务"></a>2. 回滚段与事务</h4><ol><li>每个事务只会使用一个回滚段，一个回滚段在同一时刻可能会服务于多个事务。</li><li>当一个事务开始的时候，会制定一个回滚段，在事务进行的过程中，当数据被修改时，原始的数据会被复制到回滚段。</li><li>在回滚段中，事务会不断填充盘区，直到事务结束或所有的空间被用完。如果当前的盘区不够用，事务会在段中请求扩展下一个盘区，如果所有已分配的盘区都被用完，事务会覆盖最初的盘区或者在回滚段允许的情况下扩展新的盘区来使用</li><li>回滚段存在于undo表空间中，在数据库中可以存在多个undo表空间，但同一时刻只能使用一个undo表空间</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_undo_tablespaces&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name           <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_undo_tablespaces <span class="operator">|</span> <span class="number">2</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#undo log的数量，最少是<span class="number">2</span></span><br><span class="line">#undo log的<span class="keyword">truncate</span>操作有purge协调线程发起。在<span class="keyword">truncate</span>某个undo log表空间的过程中，保证有一个可用的undo1og可用。</span><br></pre></td></tr></table></figure><ol start="5"><li>当事务提交时， lnnoDB存储引擎会做以下两件事情：<ul><li>将undo log放入列表中，以供之后的purge操作</li><li>判断undo log所在的页是否可以重用，若可以分配给下个事务使用</li></ul></li></ol><h4 id="3-回滚段中的数据分类"><a href="#3-回滚段中的数据分类" class="headerlink" title="3. 回滚段中的数据分类"></a>3. 回滚段中的数据分类</h4><ul><li><code>未提交的回滚数据(uncommitted undo information)</code>:该数据所关联的事务并未提交，用于实现读一致性，所以该数据不能被其他事务的数据覆盖</li><li><code>已经提交但未过期的回滚数据(committed undo information)</code>:该数据关联的事务已经提交，但是仍受到undo retention参数的保持时间的影响</li><li><code>事务已经提交并过期的数据(expired undo information)</code>:事务已经提交，而且数据保存时间已经超过undo retention参数指定的时间，属于已经过期的数据。当回滚段满了之后，会优先覆盖”事务已经提交并过期的数据”</li></ul><p>事务提交后并不能马上删除undo log及undo log所在的页。这是因为&#x3D;&#x3D;可能还有其他事务需要通过undo log来得到行记录之前的版本&#x3D;&#x3D;。故事务提交时将undo log放入一个<code>链表</code>中，是否可以最终删除undo log及undo log所在页由<code>purge</code>线程来判断</p><h3 id="2-4-undo的类型"><a href="#2-4-undo的类型" class="headerlink" title="2.4 undo的类型"></a>2.4 undo的类型</h3><p>在InnoDB存储引擎中，undo log分为：</p><ul><li><code>insert undo log</code><br>insert undo log是指在<code>insert</code>操作中产生的undo log。因为insert操作的记录，只对事务本身可见，对其他事务不可见(这是事务隔离性的要求)，故该undo log可以在事务提交后直接删除。不需要进行purge操作</li><li><code>update undo log</code><br>update undo log记录的是对<code>delete</code>和<code>update</code>操作产生的undo log，该undo log可能需要提供<code>MVCC</code>机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除</li></ul><h3 id="2-5-undo-log的生命周期"><a href="#2-5-undo-log的生命周期" class="headerlink" title="2.5 undo log的生命周期"></a>2.5 undo log的生命周期</h3><h4 id="1-简要生成过程"><a href="#1-简要生成过程" class="headerlink" title="1. 简要生成过程"></a>1. 简要生成过程</h4><p>以下是undo+redo事务的简化i过程</p><p>假设有2个数值，分别为A&#x3D;1和B&#x3D;2，然后将A修改为3,B修改为4</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="operator">-</span> <span class="keyword">start</span> transaction ;</span><br><span class="line"><span class="number">2</span>．记录A<span class="operator">=</span><span class="number">1</span>到undo log;</span><br><span class="line"><span class="number">3</span> <span class="operator">-</span> <span class="keyword">update</span> A <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="number">4.</span>记录A<span class="operator">=</span><span class="number">3</span> 到redo log;</span><br><span class="line"><span class="number">5</span>．记录B<span class="operator">=</span><span class="number">2</span>到undo log;</span><br><span class="line"><span class="number">6</span> <span class="operator">-</span> <span class="keyword">update</span> B <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="number">7.</span>记录B <span class="operator">=</span><span class="number">4</span>到redo log;</span><br><span class="line"><span class="number">8</span>．将redo log刷新到磁盘</span><br><span class="line"><span class="number">9</span> <span class="operator">-</span> <span class="keyword">commit</span></span><br></pre></td></tr></table></figure><ul><li>在1-8步骤的任意一步系统宕机，事务未提交，该事务就不会对磁盘上的数据做任何影响</li><li>如果在8-9之间宕机，恢复之后可以选择回滚，也可以选择继续完成事务提交，因为此时redo log已经持久化</li><li>若在9之后系统宕机，内存映射中变更的数据还来不及刷回磁盘，那么系统恢复之后，可以根据redo log把数据刷回磁盘</li></ul><p>&#x3D;&#x3D;只有Buffer Pool的流程：&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035954.png" alt="image-20230119233302216"></p><p>&#x3D;&#x3D;有了Redo Log和Undo Log之后：&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035981.png" alt="image-20230119233316969"></p><p>在更新Buffer Pool中的数据之前，需要先将该数据事务开始之前的状态写入Undo Log中。假设更新到一半出错了，就可以通过Undo Log来回滚到事务开始前。</p><h4 id="2-详细生成过程"><a href="#2-详细生成过程" class="headerlink" title="2. 详细生成过程"></a>2. 详细生成过程</h4><p>对于InnoDB引擎来说，每个行记录除了记录本身的数据之外，还有几个隐藏的列:</p><ul><li><code>DB_ROW_ID</code>:如果没有为表显式的定义主键，并且表中也没有定义唯一索引，那么InnoDB会自动为表添加一个row_id的<code>隐藏</code>列作为<code>主键</code></li><li><code>DB_TRX_ID</code>:每个事务都会分配一个事务ID，当对某条记录发生变更时，就会将这个事务的事务ID写入trx_id中</li><li><code>DB_ROLL_PTR</code>;回滚指针，本质上就是指句undo log的指针</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035986.png" alt="image-20230119233335524"></p><p><strong>当我们执行INSERT时：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (&quot;tom&quot;);</span><br></pre></td></tr></table></figure><p>插入的数据都会生成一条<code>insert undo log</code>，并且数据的回滚指针会指向它。undo log会记录undo log的序号、插入主键的列和值…。那么在进行rollback的时候，通过主键直接把对应的数据删除即可。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035990.png" alt="image-20230119233405641"></p><p><strong>当我们执行UPDATE时：</strong><br>对于更新的操作会产生<code>update undo log</code>，并且会分更新主键的和不更新主键的，假设现在执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> name<span class="operator">=</span> &quot;Sun&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035553.png" alt="image-20230119233420923"></p><p>这时会把老的记录写入新的undo log，让回滚指针指向新的undo log，它的undo no是1，并且新的undo log会指向老的undo log (undo no&#x3D;0) .</p><p>假设现在执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035560.png" alt="image-20230119233454289"></p><p>对于更新主键的操作，会先把原来的数据deletemark标识打开，这时并没有真正的删除数据，<code>真正的删除会交给清理线程去判断</code>，然后在后面插入一条新的数据，新的数据也会产生undo log，并且undo log的序号会递增</p><p>&#x3D;&#x3D;可以发现每次对数据的变更都会产生一个undo log&#x3D;&#x3D;，当一条记录被变更多次时，那么就会产生多条undo log,undo log记录的是变更前的日志，并且每个undo log的序号是<code>递增</code>的，那么当要回滚的时候，按照序号<code>依次向前推</code>，就可以找到原始数据</p><h4 id="3-undo-log是如何回滚的"><a href="#3-undo-log是如何回滚的" class="headerlink" title="3. undo log是如何回滚的"></a>3. undo log是如何回滚的</h4><p>以上面的例子来说，假设执行rollback，那么对应的流程应该是这样：</p><ul><li><p>①通过undo no&#x3D;3的日志把id&#x3D;2的数据删除</p></li><li><p>②通过undo no&#x3D;2的日志把id&#x3D;1的数据的deletemark还原成0</p></li><li><p>③通过undo no&#x3D;1的日志把id&#x3D;1的数据的name还原成Tom</p></li><li><p>④通过undo no&#x3D;0的日志把id&#x3D;1的数据删除</p></li></ul><h4 id="4-undo-log的删除"><a href="#4-undo-log的删除" class="headerlink" title="4. undo log的删除"></a>4. undo log的删除</h4><ul><li>针对于<code>insert undo log</code><br>因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。</li><li>针对于<code>update undo log</code><br>该undo log可能需要提供<code>MVCC</code>机制，因此不能在事务提交时就进行删除。提交时放入undo log<code>链表</code>，等待<code>purge</code>线程进行最后的删除。</li></ul><hr><blockquote><p>补充:<br>purge线程两个主要作用是:<code>清理undo页和清除page里面带有Delete_Bit标识的数据行</code>。在InnoDB中，事务中的Delete操作实际上并不是真正的删除掉数据行，而是一种Delete Mark操作，在记录上标识Delete_Bit，而不删除记录。这是一种”假删除”，只是做了个标记，真正的删除工作需要后台purge线程去完成</p></blockquote><h3 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301200035955.png" alt="image-20230119212716151"></p><ul><li>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子</li><li>redo log是物理日志，记录的是数据页的物理变化，undo log不是redo log的逆过程</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、数据库其他调优策略</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC10%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B6%E5%AE%83%E8%B0%83%E4%BC%98%E7%AD%96%E7%95%A5/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC10%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B6%E5%AE%83%E8%B0%83%E4%BC%98%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库调优的措施"><a href="#1-数据库调优的措施" class="headerlink" title="1.数据库调优的措施"></a>1.数据库调优的措施</h2><h3 id="1-1调优的目标"><a href="#1-1调优的目标" class="headerlink" title="1.1调优的目标"></a>1.1调优的目标</h3><ul><li>尽可能<code>节省系统资源</code>，以便系统可以提供更大负荷的服务（吞吐量更大)</li><li>合理的结构设计和参数调整，以提高用户<code>操作响应的速度</code>（响应速度更快)</li><li>减少系统的瓶颈，提高MySQL数据库整体的性能</li></ul><h3 id="1-2-如何定位调优问题"><a href="#1-2-如何定位调优问题" class="headerlink" title="1.2 如何定位调优问题"></a>1.2 如何定位调优问题</h3><p>不过随着用户量的不断增加，以及应用程序复杂度的提升，我们很难用“<code>更快</code>”去定义数据库调优的目标，因为用户在不同时间段访问服务器遇到的瓶颈不同，比如双十一促销的时候会带来大规模的<code>并发访问</code>。还有用户在进行不同业务操作的时候，数据库的<code>事务处理</code>和<code>SQL查询</code>都会有所不同。因此还需要更加精细的定位，去确定调优的目标。</p><p>如何确定呢?一般情况下，有如下几种方式：</p><ul><li><p><strong>用户的反馈(主要)</strong><br>用户是服务的对象，因此他们的反馈是最直接的。虽然他们不会直接提出技术建议，但是有些问题往往是用户第一时间发现的。要重视用户的反馈，找到和数据相关的问题。</p></li><li><p><strong>日志分析（主要)</strong><br>可以通过查看数据库日志和操作系统日志等方式找出异常情况，通过它们来定位遇到的问题。<br>服务器资源使用监控<br>通过监控服务器的CPU、内存、I&#x2F;O等使用情况，可以实时了解服务器的性能使用，与历史情况进行对比。</p></li><li><p><strong>数据库内部状况监控</strong><br>在数据库的监控中，<code>活动会话（Active Session)监控</code>是一个重要的指标。通过它可以清楚地了解数据库当前是否处于非常繁忙的状态，是否存在SQL堆积等。</p></li><li><p><strong>其它</strong></p><p>除了活动会话监控以外也可以对<code>事务、锁等待</code>等进行监控，这些都可以帮助我们对数据库的运行状态有更全面的认识。</p></li></ul><h3 id="1-3-调优的维度和步骤"><a href="#1-3-调优的维度和步骤" class="headerlink" title="1.3 调优的维度和步骤"></a>1.3 调优的维度和步骤</h3><p>需要调优的对象是整个数据库管理系统，它不仅包括SQL查询，还包括数据库的部署配置、架构等。从这个角度来说，思考的维度就不仅仅局限在SQL优化上了。通过如下的步骤进行梳理：</p><h4 id="第1步：选择适合的DBMS"><a href="#第1步：选择适合的DBMS" class="headerlink" title="第1步：选择适合的DBMS"></a>第1步：选择适合的DBMS</h4><p>如果对<code>事务性处理</code>以及<code>安全性要求高</code>的话，可以选择商业的数据库产品。这些数据库在事务处理和查询性能上都比较强，比如采用SQL Server、Oracle，那么<code>单表存储上忆条数据</code>是没有问题的。如果数据表设计得好，即使不采用<code>分库分表</code>的方式，查询效率也不差。</p><p>除此以外也可以采用开源的MySQL进行存储，它有很多存储引擎可以选择，如果进行事务处理的话可以选择lnnoDB，非事务处理可以选择MylSAM</p><p>NoSQL阵营包括<code>键值型数据库、文档型数据库、搜索引擎，列式存储</code>和<code>图形数据库</code>。这些数据库的优缺点和使用场景各有不同，比如列式存储数据库可以大幅度降低系统的I&#x2F;O，适合于分布式文件系统，但如果数据需要频繁地增删改，那么列式存储就不太适用了。</p><p><font color=red>DBMS的选择关系到了后面的整个设计过程，所以第一步就是要选择适合的DBMS</font>。如果已经确定好了DBMS，那么这步可以跳过。</p><h4 id="第2步-优化表设计"><a href="#第2步-优化表设计" class="headerlink" title="第2步:优化表设计"></a>第2步:优化表设计</h4><p>选择了DBMS 之后就需要进行表设计了。而数据表的设计方式也直接影响了后续的SQL查询语句。RDBMS中，每个对象都可以定义为一张表，表与表之间的关系代表了对象之间的关系。如果用的是MySQL，还可以根据不同表的使用需求，选择不同的存储引擎。除此以外，还有一些优化的原则可以参考:</p><ol><li>表结构要尽量<code>遵循三范式</code>的原则。这样可以让数据结构更加清晰规范，减少冗余字段，同时也减少了在更新，插入和删除数据时等异常情况的发生</li><li>如果<code>查询</code>应用比较多，尤其是需要进行<code>多表联查</code>的时候，可以采用<code>反范式</code>进行优化。反范式采用<code>空间换时间</code>的方式，通过增加冗余字段提高查询的效率。</li><li><code>表字段的数据类型</code>选择，关系到了查询效率的高低以及存储空间的大小。一般来说，如果字段可以采用数值类型就不要采用字符类型。字符长度要尽可能设计得短一些。针对字符类型来说，当确定字符长度固定时，就可以采用CHAR 类型。当长度不固定时，通常采用VARCHAR类型。</li></ol><p>数据表的结构设计很基础，也很关键。<font color=red>好的表结构可以在业务发展和用户量增加的情况下依然发挥作用，不好的表结构设计会让数据表变得非常臃肿，查询效率也会降低</font></p><h4 id="第3步-优化逻辑查询"><a href="#第3步-优化逻辑查询" class="headerlink" title="第3步:优化逻辑查询"></a>第3步:优化逻辑查询</h4><p>当建立好数据表之后，就可以对数据表进行增删改查的操作了。这时首先需要考虑的是逻辑查询优化。</p><p>SQL查询优化，可以分为<code>逻辑查询优化</code>和<code>物理查询优化</code>。逻辑查询优化就是通过改变SQL语句的内容让SQL执行效率更高效，采用的方式是对SQL语句进行等价变换，对查询进行重写。</p><p><font color=red>SQL的查询重写包括了子查询优化、等价谓词重写、视图重写、条件简化、连接消除和嵌套连接消除等</font>。</p><p>比如在讲解EXISTS子查询和lN子查询的时候，会根据小表驱动大表的原则选择适合的子查询。在WHERE子句中会尽量避免对字段进行函数运算，它们会让字段的索引失效。</p><p>举例：</p><p>查询评论内容开头为abc的内容都有哪些，如果在WHERE子句中使用了函数，语句就会写成下面这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> comment_id, comment_text,comment_time <span class="keyword">FROM</span> product_comment </span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">SUBSTRING</span>(comnment_text,<span class="number">1</span>,<span class="number">3</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure><p>采用查询重写的方式进行等价替换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> comment_id, comment_text,comment_time <span class="keyword">FROM</span> product_comment <span class="keyword">WHERE</span> comment_text <span class="keyword">LIKE</span> <span class="string">&#x27;abc%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="第4步-优化物理查询"><a href="#第4步-优化物理查询" class="headerlink" title="第4步:优化物理查询"></a>第4步:优化物理查询</h4><p>物理查询优化是在确定了逻辑查询优化之后，采用物理优化技术(比如索引等)，通过计算代价模型对各种可能的访问路径进行估算，从而找到执行方式中代价最小的作为执行计划。<strong>在这个部分中需要掌握的重点是对索引的创建和使用。</strong></p><p>但索引不是万能的，要根据实际情况来创建索引。那么都有哪些情况需要考虑呢?在前面几章中已经进行了细致的剖析。</p><p>SQL查询时需要对不同的数据表进行查询，因此在物理查询优化阶段也需要确定这些查询所采用的路径，具体的情况包括:</p><ol><li><p><code>单表扫描</code>︰对于单表扫描来说，可以全表扫描所有的数据，也可以局部扫描。</p></li><li><p><code>两张表的连接</code>︰常用的连接方式包括了嵌套循环连接、 HASH连接和合并连接。</p></li><li><p><code>多张表的连接</code>︰多张数据表进行连接的时候，<code>顺序</code>很重要，因为不同的连接路径查询的效率不同，搜索空间也会不同。在进行多表连接的时候，搜索空间可能会达到<code>很高的数据量级</code>，巨大的搜索空间显然会占用更多的资源，因此需要通过调整连接顺序，将搜索空间调整在一个可接受的范围内。</p></li></ol><h4 id="第5步-使用Redis或-Memcached-作为缓存"><a href="#第5步-使用Redis或-Memcached-作为缓存" class="headerlink" title="第5步:使用Redis或 Memcached 作为缓存"></a>第5步:使用Redis或 Memcached 作为缓存</h4><p>除了可以对SQL本身进行优化以外，还可以请外援提升查询的效率</p><p>因为数据都是存放到数据库中，需要从数据库层中取出数据放到内存中进行业务逻辑的操作，当用户量增大的时候，如果频繁地进行数据查询，会消耗数据库的很多资源。如果将常用的数据直接放到内存中，就会大幅提升查询的效率</p><p>键值存储数据库可以帮我们解决这个问题。</p><p>常用的键值存储数据库有&#x3D;&#x3D;Redis 和Memcached&#x3D;&#x3D;，它们都可以将数据存放到内存中。</p><p>从可靠性来说，<code> Redis 支持持久化</code>，可以让我们的数据保存在硬盘上，不过这样一来性能消耗也会比较大。而Memcached仅仅是内存存储，不支持持久化。</p><p><font color=red>通常对于查询响应要求高的场景（响应时间短，吞吐量大)，可以考虑内存数据库，毕竟术业有专攻</font>。传统的RDBMS，都是将数据存储在硬盘上，而内存数据库则存放在内存中，查询起来要快得多。不过使用不同的工具，也增加了开发人员的使用成本。</p><h4 id="第6步：库级优化"><a href="#第6步：库级优化" class="headerlink" title="第6步：库级优化"></a>第6步：库级优化</h4><p>库级优化是站在数据库的维度上进行的优化策略，比如控制一个库中的数据表数量。另外，单一的数据库总会遇到各种限制，不如取长补短，利用”外援”的方式。通过<code>主从架构</code>优化读写策略，通过对数据库进行垂直或者水平切分，突破单一数据库或数据表的访问限制，提升查询的性能。</p><p><font color=blue>1、读写分离</font></p><p>如果读和写的业务量都很大，并且它们都在同一个数据库服务器中进行操作，那么数据库的性能就会出现瓶颈，这时为了提升系统的性能，优化用户体验，可以采用<code>读写分离</code>的方式降低主数据库的负载，比如用主数据库(master）完成写操作，用从数据库(slave）完成读操作。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238322.png" alt="image-20230109145409011"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238304.png" alt="image-20230109145417159"></p><p><font color=blue>2、数据分片</font></p><p>对<code>数据库分库分表</code>。当数据量级达到千万级以上时，有时候要把一个数据库切成多份，放到不同的数据库服务器上，减少对单一数据库服务器的访问压力。如果你使用的是 MySQL，就可以使用MySQL自带的分区表功能，当然你也可以考虑自己做<code>垂直拆分（分库)</code>、<code>水平拆分(分表）</code>、<code>垂直+水平拆分(分库分表)</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238320.png" alt="image-20230109145626914"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238323.png" alt="image-20230109145636975"></p><blockquote><ul><li>垂直分表：比如按照热数据、冷数据进行分表。</li><li>水平分表：比如按照日期范围进行划分。</li></ul><p>但需要注意的是，分拆在提升数据库性能的同时，也会增加维护和使用成本</p></blockquote><h2 id="2-优化MySQL服务器"><a href="#2-优化MySQL服务器" class="headerlink" title="2. 优化MySQL服务器"></a>2. 优化MySQL服务器</h2><p>优化MySQL服务器主要从两个方面来优化，一方面是对<code>硬件</code>进行优化。另一方面是对MySQL<code>服务的参数</code>进行优化。这部分的内容需要较全面的知识，一般只有<code>专业的数据库管理员</code>才能进行这一类的优化。对于可以定制参数的操作系统，也可以针对MySQL进行操作系统优化。</p><h3 id="2-1-优化服务器硬件"><a href="#2-1-优化服务器硬件" class="headerlink" title="2.1 优化服务器硬件"></a>2.1 优化服务器硬件</h3><p><font color=red>服务器的硬件性能直接决定着MySQL数据库的性能</font>。硬件的性能瓶颈直接决定MySQL数据库的运行速度和效率。针对性能瓶颈提高硬件配置，可以提高MySQL数据库查询、更新的速度。<br>(1）<code>配置较大的内存</code>。足够大的内存是提高MySQL数据库性能的方法之一。内存的速度比磁盘I&#x2F;O快得多，可以通过增加系统的缓冲区容量使数据在内存中停留的时间更长，以<code>读少磁盘I/O</code>。<br>(2）<code>配置高速磁盘系统</code>，以减少读盘的等待时间，提高响应速度。磁盘的I&#x2F;O能力，也就是它的寻道能力，目前的<code>SCSI</code>高速旋转的是7200转&#x2F;分钟，这样的速度，一旦访问的用户量上去，磁盘的压力就会过大，如果是每天的网站pv (page view)在150w，这样的一般的配置就无法满足这样的需求了。现在<code>SSD</code>盛行，在SSD上随机访问和顺序访问性能几乎差不多，使用SSD可以减少随机IO带来的性能损耗。<br>(3)<code>合理分布磁盘I/O</code>，把磁盘I&#x2F;O分散在多个设备上，以减少资源竞争，提高并行操作能力。</p><p>(4)<code>配置多处理器</code>，MySQL是多线程的数据库，多处理器可同时执行多个线程。</p><h3 id="2-2-优化MySQL的参数"><a href="#2-2-优化MySQL的参数" class="headerlink" title="2.2 优化MySQL的参数"></a>2.2 优化MySQL的参数</h3><p>通过优化MySQL的参数可以提高资源利用率，从而达到提高MySQL服务器性能的目的</p><p>MySQL服务的配置参数都在<code>my.cnf</code>或者<code>my.ini</code>文件的[mysqld]组中，配置完参数以后，需要重新启动MySQL服务才会生效。</p><p>下面对几个对性能影响比较大的参数进行详细介绍。</p><ul><li><p><code>innodb_buffer_pool_size</code>∶这个参数是Mysql数据库最重要的参数之一，表示InnoDB类型的<code>表和索引的最大缓存</code>。它不仅仅缓存<code>索引数据</code>，还会缓存<code>表的数据</code>。这个值越大，查询的速度就会越快。但是这个值太大会影响操作系统的性能。</p></li><li><p><code>key_buffer_size</code>: 表示<code>索引缓冲区的大小</code>。索引缓冲区是所有的<code>线程共享</code>。增加索引缓冲区可以得到更好处理的索引（对所有读和多重写)。当然，这个值不是越大越好，它的大小取决于内存的大小。如果这个值太大，就会导致操作系统频繁换页，也会降低系统性能。对于内存在<code>4GB</code>左右的服务器该参数可设置为<code>256M</code>或<code>384M</code>。</p></li><li><p><code>table_cache</code>:表示<code>同时打开的表的个数</code>。这个值越大，能够同时打开的表的个数越多。物理内存越大，设置就越大。默认为2402，调到512-1024最佳。这个值不是越大越好，因为同时打开的表太多会影响操作系统的性能</p></li><li><p><code>query_cache_size </code>:表示查询缓冲区的大小。可以通过在MySQL控制台观察，如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，就要增加Query_cache_size的值;如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓存;</p></li><li><p><code>Qcache_free_blocks</code>，如果该值非常大，则表明缓冲区中碎片很多。MySQL8.0之后失效。该参数需要和query_cache_type配合使用。</p></li><li><p><code>query_cache_type</code>的值是0时，所有的查询都不使用查询缓存区。但是query_cache_type&#x3D;0并不会导致MySQL释放query_cache_size所配置的缓存区内存。</p><ul><li>当query_cache_type&#x3D;1时，所有的查询都将使用查询缓存区，除非在查询语句中指定SQL_NO_CACHE，如SELECT SQL_NO_CACHE FROM tbl_name。</li><li>当query_cache_type&#x3D;2时，只有在查询语句中使用SQL_CACHE 关键字，查询才会使用查询缓存区。使用查询缓存区可以提高查询的速度，这种方式只适用于修改操作少且经常执行相同的查询操作的情况。</li></ul></li><li><p><code>sort_buffer_size</code>∶表示每个<code>需要进行排序的线程分配的缓冲区的大小</code>。增加这个参数的值可以提高<code>ORDER BY</code>或<code>GROUP BY</code>操作的速度。默认数值是2097144字节〈约2MB)。对于内存在4GB左右的服务器推荐设置为6-8M，如果有100个连接，那么实际分配的总共排序缓冲区大小为100×6&#x3D; 600MB</p></li><li><p><code>join_buffer_size = 8M</code> :表示<code>联合查询操作所能使用的缓冲区大小</code>，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</p></li><li><p><code>read_buffer_size </code>:表示<code>每个线程连续扫描时为扫描的每个表分配的缓冲区的大小(字节）</code>。当线程从表中连续读取记录时需要到这个缓冲区。SET SESSION read_buffer_size&#x3D;n可以临时设置该参数的值。默认为64K，可以设置为4M。</p></li><li><p><code>innodb_flush_log_at_trx_commit</code>∶表示<code>何时将缓冲区的数据写入日志文件</code>，并且将日志文件写入磁盘中。该参数对于innoDB引擎非常重要。该参数有3个值，分别为0、1和2。该参数的默认值为1。</p><ul><li>值为0时，表示<code>每秒1次</code>的频率将数据写入日志文件并将日志文件写入磁盘。每个事务的commit并不会触发前面的任何操作。该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。</li><li>值为1时，表示<code>每次提交事务时</code>将数据写入日志文件并将日志文件写入磁盘进行同步。该模式是最安全的，但也是最慢的一种方式。因为每次事务提交或事务外的指令都需要把日志写入(flush）硬盘。</li><li>值为2时，表示<code>每次提交事务时</code>将数据写入日志文件，<code>每隔1秒</code>将日志文件写入磁盘。该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。</li></ul></li><li><p><code>innodb_log_buffer_size</code>:这是InnoDB存储引擎的<code>事务日志使用的缓冲区</code>。为了提高性能，也是先将信息写入Innodb Log Buffer中，当满足innodb_flush_log_trx_commit参数所设置的相应条件（或者日志缓冲区写满)之后，才会将日志写到文件(或者同步到磁盘〉中</p></li><li><p><code>max_connections</code>:表示允<code>许连接到MySQL数据库的最大数量</code>，默认值是<code>151</code>。如果状态变量 connection_errors_max_connections不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这时可以考虑增大max_connections的值，在Linux平台下，性能好的服务器，支持500-1000个连接不是难事，需要根据服务器性能进行评估设定。这个连接数<code>不是越大越好</code>，因为这些连接会浪费内存的资源。过多的连接可能会导致MySQL服务器僵死</p></li><li><p><code>back_log </code>：用于<code>控制MySQL监听TCP端口时设置的积压请求栈大小</code>。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections &#x2F; 5）， 对于Linux系统推荐设置为小于512的整数，但最大不超过900。</p><p><font color=red>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</font></p></li><li><p><code>thread_cache_size </code>：<code>线程池缓存线程数量的大小</code>，当客户端断开连接后将当前线程缓存起来，当在接到新的连接请求时快速响应无需创建新的线程。这尤其对那些使用短连接的应用程序来说可以极大的提高创建连接的效率。那么为了提高性能可以增大该参数的值。默认为60，可以设置为120。</p><p>可以通过如下几个MySQL状态值来适当调整线程池的大小：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Thread%&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+-------------------+-------+</span></span><br><span class="line"><span class="comment">| Variable_name | Value |</span></span><br><span class="line"><span class="comment">+-------------------+-------+</span></span><br><span class="line"><span class="comment">| Threads_cached | 2 |</span></span><br><span class="line"><span class="comment">| Threads_connected | 1 |</span></span><br><span class="line"><span class="comment">| Threads_created | 3 |</span></span><br><span class="line"><span class="comment">| Threads_running | 2 |</span></span><br><span class="line"><span class="comment">+-------------------+-------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>当 Threads_cached 越来越少，但 Threads_connected 始终不降，且 Threads_created 持续升高，可适当增加 thread_cache_size 的大小。</p></blockquote><ul><li><code>wait_timeout </code>：指定 <code>一个请求的最大连接时间 </code>，对于4GB左右内存的服务器可以设置为5-10。</li><li><code>interactive_timeout </code>：表示服务器在关闭连接前等待行动的秒数</li></ul><p>这里给出一份my.cnf的参考配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port = 3306 </span><br><span class="line">serverid = 1 </span><br><span class="line">socket = /tmp/mysql.sock </span><br><span class="line">skip-locking #避免MySQL的外部锁定，减少出错几率增强稳定性。</span><br><span class="line">skip-name-resolve </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！ back_log = 384</span></span><br><span class="line">key_buffer_size = 256M </span><br><span class="line">max_allowed_packet = 4M </span><br><span class="line">thread_stack = 256K</span><br><span class="line">table_cache = 128K </span><br><span class="line">sort_buffer_size = 6M </span><br><span class="line">read_buffer_size = 4M</span><br><span class="line">read_rnd_buffer_size=16M </span><br><span class="line">join_buffer_size = 8M </span><br><span class="line">myisam_sort_buffer_size =64M t</span><br><span class="line">able_cache = 512 thread_cache_size = 64 query_cache_size = 64M</span><br><span class="line">tmp_table_size = 256M </span><br><span class="line">max_connections = 768 </span><br><span class="line">max_connect_errors = 10000000</span><br><span class="line">wait_timeout = 10 </span><br><span class="line">thread_concurrency = 8 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">该参数取值为服务器逻辑CPU数量2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为42=8</span> </span><br><span class="line">skipnetworking </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！ table_cache=1024</span></span><br><span class="line">innodb_additional_mem_pool_size=4M </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认为2M</span> </span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_log_buffer_size=2M </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认为1M</span> </span><br><span class="line">innodb_thread_concurrency=8 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">你的服务器CPU有几个就设置为几。建议用默认一般为8</span> </span><br><span class="line">tmp_table_size=64M </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认为16M，调到64-256最挂</span></span><br></pre></td></tr></table></figure><p>很多情况还需要具体情况具体分析！</p><p><strong>举例：</strong><br>下面是一个电商平台，类似京东或天猫这样的平台。商家购买服务，入住平台，开通之后，商家可以在系统中上架各种商品，客户通过手机App、微信小程序等渠道购买商品，商家接到订单以后安排快递送货。</p><p><code>刚刚上线</code>的时候，系统运行状态良好。但是，随着入住的<code>商家不断增多</code>，使用系统的<code>用户量越来越多</code>，每天的订单数据达到了5万条以上。这个时候，系统开始出现问题，<code>CPU使用率不断飙升</code>。终于，双十一或者618活动高峰的时候，CPU使用率达到<code>99%</code>，这实际上就意味着，系统的计算资源已经耗尽，再也无法处理任何新的订单了。换句话说，系统已经崩溃了。</p><p>这个时候，我们想到了对系统参数进行调整，因为参数的值决定了资源配置的方式和投放的程度。为了解决这个问题，一共调整3个系统参数，分别是</p><ul><li><code>InnoDB_flush_log_at_trx_commit</code></li><li><code>lnnoDB_buffer_pool_size</code></li><li><code>lnnoDB_buffer_pool_instances</code></li></ul><p>下面就说一说调整这三个参数的原因是什么：<br><font color=blue>（1）调整系统参数lnnoDB_flush_log_at_trx_commit</font><br>这个参数适用于InnoDB存储引擎，电商平台系统中的表用的存储引擎都是InnoDB。默认的值是1，意思是每次提交事务的时候，都把数据写入日志，并把日志写入磁盘。这样做的好处是<code>数据安全性最佳</code>，不足之处在于每次提交事务，都要进行磁盘写入的操作。在<code>大并发的场景下</code>，过于频繁的磁盘读写会导致CPU资源浪费，系统效率变低。</p><p>这个参数的值还有2个可能的选项，分别是0和2。把这个参数的值改成了2。这样就不用每次提交事务的时候都启动磁盘读写了，在大并发的场景下，可以改善系统效率，降低CPU使用率。即便出现故障，损失的数据也比绞小。</p><p><font color=blue>（2）调整系统参数InnoDB_buffer_pool_size</font><br>这个参数的意思是，InnoDB存储引擎使用<code>缓存来存储索引和数据</code>。这个值越大，可以加载到缓存区的索引和数据量就越多，需要的<code>磁盘读写就越少</code>。</p><p>因为MySQL服务器是数据库<code>专属服务器</code>，只用来运行MySQL数据库服务，没有其他应用了，而我们的计算机是64位机器，内存也有128G。于是把这个参数的值调整为64G。这样一来，磁盘读写次数可以大幅降低，就可以充分利用内存，释放出一些CPU的资源</p><p><font color=blue>（3）调整系统参数InnoDB_buffer_pool_instances</font><br>这个参数可以将InnoDB的缓存区分成几个部分，这样可以提高系统的<code>并行处理能力</code>，因为可以允许多个进程同时处理不同部分的缓存区。</p><p>把InnoDB_buffer_pool_instances的值修改为64，意思就是把 InnoDB的缓存区分成64个分区，这样就可以同时有<code>多个进程</code>进行数据操作，CPU的效率就高多了。修改好了系统参数的值，要重启MySQL数据库服务器。</p><blockquote><p>总结一下就是遇到CPU资源不足的问题，可以从下面2个思路去解决。</p><ul><li>疏通拥堵路段，消除瓶颈，让等待的时间更短</li><li>开拓新的通道，增加并行处理能力</li></ul></blockquote><h2 id="3-优化数据库结构"><a href="#3-优化数据库结构" class="headerlink" title="3. 优化数据库结构"></a>3. 优化数据库结构</h2><p>一个好的<code>数据库设计方案</code>对于数据库的性能常常会起到<code>事半功倍</code>的效果。合理的数据库结构不仅可以使数据库占用更小的磁盘空间，而且能够使查询速度更快。数据库结构的设计需要考虑<code>数据冗余</code>、<code>查询和更新的速度</code>、<code>字段的数据类型</code>是否合理等多方面的内容</p><h3 id="3-1-拆分表-冷热数据分离"><a href="#3-1-拆分表-冷热数据分离" class="headerlink" title="3.1 拆分表:冷热数据分离"></a>3.1 拆分表:冷热数据分离</h3><p>拆分表的思路是，把1个包含很多字段的表拆分成2个或者多个相对较小的表，这样做的原因是，这些表中某些字段的操作频率很高（<code>热数据</code>），经常要进行查询或者更新操作，而另外一些字段的使用频率却很低（<code>冷数据</code>），<code>冷热数据分离</code>，可以减小表的宽度。如果放在一个表里面，每次查询都要读取大记录，会消耗较多的资源。</p><p>MySQL限制每个表最多存储<code>4096</code>列，并且每一行数据的大小不能超过<code>65535</code>字节。表越宽，把表装载进内存缓冲池时所占用的内存也就越大，也会消耗更多的IO。冷热数据分离的目的是:&#x3D;&#x3D;①减少磁盘Io，保证热数据的内存缓存命中率。②更有效的利用缓存，避免读入无用的冷数据。&#x3D;&#x3D;</p><p><strong>举例1:</strong><code>会员members表</code>存储会员登录认证信息。该表中有很多字段，如id、姓名、密码、地址、电话、个人描述字段。其中地址、电话、个人描述等字段并不常用，可以将这些不常用的字段分解出另一个表。将这个表取名叫members_detail，表中有member_id、address、telephone、description等字段。这样就把会员表分成了两个表，分别为<code>members表</code>和<code>members_detail表</code>。</p><p>创建这两个表的SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> members (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  last_login_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  last_login_ip <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> members_detail (</span><br><span class="line">  Member_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  address <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  telephone <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  description text</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果需要查询会员的基本信息或详细信息，那么可以用会员的id来查询。如果需要将会员的基本信息和详细信息同时显示，那么可以将members表和members_detail表进行联合查询，查询语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> members <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> members_detail <span class="keyword">on</span> members.id <span class="operator">=</span>members_detail.member_id;</span><br></pre></td></tr></table></figure><p>通过这种分解可以提高表的查询效率。对于字段很多且有些字段使用不频繁的表，可以通过这种分解的方式来优化数据库的性能。</p><h3 id="3-2-增加中间表"><a href="#3-2-增加中间表" class="headerlink" title="3.2 增加中间表"></a>3.2 增加中间表</h3><p>对于需要经常联合查询的表，可以建立中间表以提高查询效率。<font color=red>通过建立中间表，把需要经常联合查询的数据插入中间表中，然后将原来的联合查询改为对中间表的查询，以此来提高查询效率</font>。</p><p>首先，分析经常联合查询表中的字段。然后，使用这些字段建立一个中间表，并将原来联合查询的表的数据插入中间表中。最后，使用中间表来进行查询。</p><p>举例1:学生信息表和班级表的SQL语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `class` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `className` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `monitor` <span class="type">INT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `stuno` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `classId` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>现在有一个模块需要经常查询带有学生名称（name）、学生所在班级名称（className）、学生班级班长（monitor）的学生信息。根据这种情况可以创建一个 <code>temp_student </code>表。temp_student表中存储学生名称（stu_name）、学生所在班级名称（className）和学生班级班长（monitor）信息。创建表的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `temp_student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `stu_name` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  `className` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `monitor` <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>接下来，从学生信息表和班级表中查询相关信息存储到临时表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp_student(stu_name,className,monitor)</span><br><span class="line">      <span class="keyword">select</span> s.name,c.className,c.monitor</span><br><span class="line">      <span class="keyword">from</span> student <span class="keyword">as</span> s,class <span class="keyword">as</span> c</span><br><span class="line">      <span class="keyword">where</span> s.classId <span class="operator">=</span> c.id</span><br></pre></td></tr></table></figure><p>以后，可以直接从temp_student表中查询学生名称、班级名称和班级班长，而不用每次都进行联合查询。这样可以提高数据库的查询速度</p><blockquote><p>如果用户信息修改了，是不是会导致temp_student中的数据不一致的问题呢?如何同步数据呢?</p><p>方式1:清空数据-&gt;重新添加数据</p><p>方式2:使用视图</p></blockquote><h3 id="3-3-增加冗余字段"><a href="#3-3-增加冗余字段" class="headerlink" title="3.3 增加冗余字段"></a>3.3 增加冗余字段</h3><p>设计数据库表时应尽量遵循范式理论的规约，尽可能减少冗余字段，让数据库设计看起来精致、优雅。但是，&#x3D;&#x3D;合理地加入冗余字段可以提高查询速度&#x3D;&#x3D;。</p><p>表的规范化程度越高，表与表之间的关系就越多，需要连接查询的情况也就越多。尤其在数据量大，而且需要频繁进行连接的时候，为了提升效率，我们也可以考虑增加冗余字段来减少连接。</p><p>这部分内容在《数据库的设计规范》章节中 <code>反范式化小节</code> 中具体展开讲解了。这里省略。</p><h3 id="3-4-优化数据类型"><a href="#3-4-优化数据类型" class="headerlink" title="3.4 优化数据类型"></a>3.4 优化数据类型</h3><p>改进表的设计时，可以考虑优化字段的数据类型。这个问题在大家刚从事开发时基本不算是问题。但是，随着你的经验越来越丰富，参与的项目越来越大，数据量也越来越多的时候，你就不能只从系统稳定性的角度来思考问题了，还要考虑到系统整体的稳定性和效率。此时，&#x3D;&#x3D;优先选择符合存储需要的最小的数据类型&#x3D;&#x3D;。</p><p>列的<code>字段越大</code>，建立索引时所需要的<code>空间也就越大</code>，这样一页中所能存储的索引节点的<code>数量就越少</code>，在遍历时所需要的<code>IO次数也就越多</code>，<code>索引的性能也就越差</code>。</p><p>具体来说:</p><p><font color=blue>情况1：对整数类型数据进行优化。</font></p><p>遇到整数类型的字段可以用 <code>INT </code>型 。这样做的理由是，INT 型数据有足够大的取值范围，不用担心数据超出取值范围的问题。刚开始做项目的时候，首先要保证系统的稳定性，这样设计字段类型是可以的。但在数据量很大的时候，数据类型的定义，在很大程度上会影响到系统整体的执行效率。</p><p>对于 <code>非负型</code> 的数据（如自增ID、整型IP）来说，要优先使用无符号整型 <code>UNSIGNED</code> 来存储。因为无符号相对于有符号，同样的字节数，存储的数值范围更大。如tinyint有符号为-128-127，无符号为0-255，多出一倍的存储空间。</p><p><font color=blue>情况2：既可以使用文本类型也可以使用整数类型的字段，要选择使用整数类型。</font></p><p>跟文本类型数据相比，大整数往往占用 <code>更少的存储空间</code> ，因此，在存取和比对的时候，可以占用更少的内存空间。所以，在二者皆可用的情况下，尽量使用整数类型，这样可以提高查询的效率。如：将IP地址转换成整型数据。</p><p><font color=blue>情况3：避免使用TEXT、BLOB数据类型</font></p><p>MySQL<code>内存临时表</code>不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使<code>用磁盘临时表</code>进行。并且对于这种数据，Mysql还是要进行<code>二次查询</code>，会使SQL性能变得很差，但是不是说一定不能使用这样的数据类型。</p><p>如果一定要使用，建议把BLOB或是TEXT列<code>分离到单独的扩展表</code>中，查询时一定不要使用select *，而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询。</p><p><font color=blue>情况4∶避免使用ENUM类型</font></p><p>修改ENUM值需要使用ALTER语句。</p><p>ENUN类型的ORDER BY操作效率低，需要额外操作。使用TINYINT来代替ENUM类型。</p><p><font color=blue>情况5:使用TIMESTAMP存储时间</font></p><p>TIMESTAMP存储的时间范围1970-01-0100:00:01~ 2038-01-19-03:14:07。TIMESTAMP使用4字节，DATETIME使用8个字节，同时TIMESTAN1P具有自动赋值以及自动更新的特性</p><p><font color=blue>情况6:用DECIMAL代替FLOAT和DOUBLE存储精确浮点数</font></p><p>1)非精准浮点: float,double<br>2)精准浮点: decimal</p><p>Decimal类型为精准浮点数，在计算时不会丢失精度，尤其是财务相关的金融类数据。占用空间由定义的宽度决定，每4个字节可以存储3位数字，并且小数点要占用一个字节。可用于存储比bigint更大的整型数据</p><p><font color=red>总之，遇到数据量大的项目时，一定要在充分了解业务需求的前提下，合理优化数据类型，这样才能充分发挥资源的效率。使系统达到最优</font></p><h3 id="3-5-优化插入记录的速度"><a href="#3-5-优化插入记录的速度" class="headerlink" title="3.5 优化插入记录的速度"></a>3.5 优化插入记录的速度</h3><p>插入记录时，影响插入速度的主要是索引、唯一性校验、一次插入记录条数等。根据这些情况可以分别进行优化。这里我们分为MyISAM存储引擎和InnoDB存储引擎来讲。</p><p><strong><font color=blue>1. MyISAM引擎的表</font></strong></p><p><font color=orange>① 禁用索引</font><br>对于非空表，插入记录时，MySQL会根据表的索引对插入的记录建立索引。如果插入大量数据，建立索引就会降低插入记录的速度。为了解决这种情况，可以在插入记录之前禁用索引，数据插入完毕后再开启索引。禁用索引的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name DISABLE KEYS;</span><br></pre></td></tr></table></figure><p>重新开启索引的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name ENABLE  KEYS;</span><br></pre></td></tr></table></figure><blockquote><p>若对于空表批量导入数据，则不需要进行此操作，因为MyISAM引擎的表是在导入数据之后才建立索引的</p></blockquote><p><font color=orange>②禁用唯一性检查</font><br>插入数据时，MySQL会对插入的记录进行唯一性校验。这种唯一性校验会降低插入记录的速度。为了降低这种情况对查询速度的影响，可以在插入记录之前禁用唯一性检合，等到记录插入完毕后再开启。禁用唯一性检查的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> UNIQUE_GHECKS<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>开启唯一性检查的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> UNIQUE_GHECKS<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><font color=orange>③使用批量插入</font><br>插入多条记录时，可以使用一条INSERT语句插入一条记录，也可以使用一条INSERT语句插入多条记录。插入一条记录的INSERT语句情形如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="number">17</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="number">17</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;zhaoliu&#x27;</span>,<span class="number">19</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>使用一条INSERT语句插入多条记录的情形如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="number">17</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="number">17</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;zhaoliu&#x27;</span>,<span class="number">19</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>第2种情形的插入速度要比第1种情形快。</p><p><font color=orange>④ 使用LOAD DATA INFILE 批量导入</font><br>当需要批量导入数据时，如果能用LOAD DATA INFILE语句，就尽量使用。因为LOAD DATA INFILE语句导入数据的速度比INSERT语句快。</p><p><strong><font color=blue>2. InnoDB引擎的表：</font></strong></p><p><font color=orange>① 禁用唯一性检查</font><br>插入数据之前执行 <code>set unique_checks=0</code>来禁止对唯一索引的检查，数据导入完成之后再运行<code>set unique_checks=1</code>。这个和MyISAM引擎的使用方法一样。</p><p><font color=orange>② 禁用外键检查</font><br>插入数据之前执行禁止对外键的检查，数据插入完成之后再恢复对外键的检查。禁用外键检查的语句如下;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> foreign_key_checks<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>恢复对外键的检查语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> foreign_key_checks<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><font color=orange>③ 禁止自动提交</font><br>插入数据之前禁止事务的自动提交，数据导入完成之后，执行恢复自动提交操作。禁止自动提交的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>恢复自动提交的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3-6-使用非空约束"><a href="#3-6-使用非空约束" class="headerlink" title="3.6 使用非空约束"></a>3.6 使用非空约束</h3><p>在设计字段的时候，如果业务允许&#x3D;&#x3D;，建议尽量使用非空约束&#x3D;&#x3D;。这样做的好处是:</p><p>①进行比较和计算时，省去要对NULL值的字段判断是否为空的开销，提高存储效率。<br>②非空字段也容易创建索引。因为索引NULL列需要额外的空间来保存，所以要占用更多的空间。使用非空约束，就可以节省存储空间(每个字段1个bit)</p><h3 id="3-7-分析表、检查表与优化表"><a href="#3-7-分析表、检查表与优化表" class="headerlink" title="3.7 分析表、检查表与优化表"></a>3.7 分析表、检查表与优化表</h3><p>MySQL提供了分析表、检查表和优化表的语句。<code>分析表</code>主要是分析关键字的分布，<code>检查表</code>主要是检查表是否存在错误，<code>优化表</code>主要是消除删除或更新造成的空间浪费。</p><p><strong><font color=blue>1.分析表</font></strong></p><p>MySQL中提供了ANALYZE TABLE语句分析表，ANALYZE TABLE语句的基本语法如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ANALYZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name[,tbl_name]…</span><br></pre></td></tr></table></figure><p>默认的，MySQL服务会将 ANALYZE TABLE语句写到binlog中，以便在主从架构中，从服务能够同步数据。可以添加参数LOCAL 或者 NO_WRITE_TO_BINLOG取消将语句写到binlog中。</p><p>使用<code> ANALYZE TABLE</code> 分析表的过程中，数据库系统会自动对表加一个 <code>只读锁</code> 。在分析期间，只能读取表中的记录，不能更新和插入记录。ANALYZE TABLE语句能够分析InnoDB和MyISAM类型的表，但是不能作用于视图。</p><p>ANALYZE TABLE分析后的统计结果会反应到 <code>cardinality </code>的值，该值<code>统计了表中某一键所在的列不重复的值的个数</code>。&#x3D;&#x3D;该值越接近表中的总行数，则在表连接查询或者索引查询时，就越优先被优化器选择使用。&#x3D;&#x3D;也就是索引列的cardinality的值与表中数据的总条数差距越大，即使查询的时候使用了该索引作为查询条件，存储引擎实际查询的时候使用的概率就越小。下面通过例子来验证下。cardinality可以通过SHOW INDEX FROM 表名查看。</p><p>下面我们举例说明，使用下面的语句创建一张user表。</p><p><strong>演示</strong></p><p><font color=orange>1、创建表并添加1000条记录</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">08</span><span class="operator">-</span>数据库的其他优化策略</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user1` (</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_name` (`name`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"></span><br><span class="line">#######</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span>创建函数</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span>  rand_num (from_num <span class="type">INT</span> ,to_num <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>   </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(from_num <span class="operator">+</span>RAND()<span class="operator">*</span>(to_num <span class="operator">-</span> from_num<span class="operator">+</span><span class="number">1</span>))   ;</span><br><span class="line"><span class="keyword">RETURN</span> i;  </span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">### 创建存储过程</span><br><span class="line">DELIMITER </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>  insert_user( max_num <span class="type">INT</span> )</span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;   </span><br><span class="line"> <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;    </span><br><span class="line"> REPEAT  </span><br><span class="line"> <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;  </span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user1` ( NAME,age,sex ) </span><br><span class="line"> <span class="keyword">VALUES</span> (&quot;atguigu&quot;,rand_num(<span class="number">1</span>,<span class="number">20</span>),&quot;male&quot;);  </span><br><span class="line"> UNTIL i <span class="operator">=</span> max_num  </span><br><span class="line"> <span class="keyword">END</span> REPEAT;  </span><br><span class="line"> <span class="keyword">COMMIT</span>; </span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line">## 向表中添加<span class="number">1000</span>条记录</span><br><span class="line"><span class="keyword">CALL</span> insert_user(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><font color=orange>2、查看表中的索引</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> user1;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238324.png" alt="image-20230110220425583"></p><p>假如我们执行下列语句后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user1 <span class="keyword">SET</span> NAME <span class="operator">=</span> <span class="string">&#x27;atguigu03&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> t1;</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> user1;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238367.png" alt="image-20230110220901894"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238157.png" alt="image-20230110221011034"></p><blockquote><p>假如说我们把id&#x3D;3的数据Name修改成atguigudb04，此时直接查看索引，发现Cardinality还是2，但是执行ANALYZE后，在查看发现Cardinality已经变成3了~ 说明ANALYZE启动了刷新数据的作用。</p></blockquote><p><strong><font color=blue>2.检查表</font></strong><br>MySQL中可以使用 <code>CHECK TABLE</code> 语句来检查表。CHECK TABLE语句能够检查InnoDB和MyISAM类型的表是否存在错误。CHECK TABLE语句在执行过程中也会给表加上 <code>只读锁</code> 。</p><p>对于MyISAM类型的表，CHECK TABLE语句还会更新关键字统计数据。而且，CHECK TABLE也可以检查视图是否有错误，比如在视图定义中被引用的表已不存在。该语句的基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option <span class="operator">=</span> &#123;QUICK <span class="operator">|</span> FAST <span class="operator">|</span> MEDIUM <span class="operator">|</span> EXTENDED <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>其中，tbl_name是表名；option参数有5个取值，分别是QUICK、FAST、MEDIUM、EXTENDED和CHANGED。各个选项的意义分别是：</p><ul><li><code>QUICK </code>：不扫描行，不检查错误的连接。</li><li><code>FAST </code>：只检查没有被正确关闭的表。</li><li><code>CHANGED </code>：只检查上次检查后被更改的表和没有被正确关闭的表。</li><li><code>MEDIUM </code>：扫描行，以验证被删除的连接是有效的。也可以计算各行的关键字校验和，并使用计算出的校验和验证这一点。</li><li><code>EXTENDED </code>：对每行的所有关键字进行一个全面的关键字查找。这可以确保表是100%一致的，但是花的时间较长。</li></ul><p>option只对MyISAM类型的表有效，对InnoDB类型的表无效。比如：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238163.png" alt="image-20230109221418948"></p><p>该语句对于检查的表可能会产生多行信息。最后一行有一个状态的 <code>Msg_type </code>值，Msg_text 通常为 OK。如果得到的不是 OK，通常要对其进行修复；是 OK 说明表已经是最新的了。表已经是最新的，意味着存储引擎对这张表不必进行检查。</p><p><strong><font color=blue>3. 优化表</font></strong></p><p><font color=orange>方式1：OPTIMIZE TABLE</font><br>MySQL中使用 <code>OPTIMIZE TABLE</code> 语句来优化表。但是，OPTILMIZE TABLE语句只能优化表中的<code>VARCHAR</code> 、 <code>BLOB </code>或 <code>TEXT </code>类型的字段。一个表使用了这些字段的数据类型，若已经<code> 删除</code> 了表的一大部分数据，或者已经对含有可变长度行的表（含有VARCHAR、BLOB或TEXT列的表）进行了很多 <code>更新 </code>，则应使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的 <code>碎片</code></p><p>&#x3D;&#x3D;OPTIMIZE TABLE 语句对InnoDB和MyISAM类型的表都有效&#x3D;&#x3D;。该语句在执行过程中也会给表加上 <code>只读锁</code></p><p>OPTILMIZE TABLE语句的基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><p>LOCAL | NO_WRITE_TO_BINLOG关键字的意义和分析表相同，都是指定不写入二进制日志。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238175.png" alt="image-20230109221840354"></p><p>执行完毕，Msg_text显示</p><blockquote><p>‘numysql.SYS_APP_USER’, ‘optimize’, ‘note’, ‘Table does not support optimize, doing recreate +analyze instead’</p></blockquote><p>原因是我服务器上的MySQL是InnoDB存储引擎。</p><p>到底优化了没有呢？看官网！<br> <a href="https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html">https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html</a></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238181.png" alt="image-20230109222045057"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238190.png" alt="image-20230109222114664"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238197.png" alt="image-20230109222213402"></p><p>在MyISAM中，是先分析这张表，然后会整理相关的MySQL datafile，之后回收未使用的空间；在InnoDB中，回收空间是简单通过Alter table进行整理空间。在优化期间，MySQL会创建一个临时表，优化完成之后会删除原始表，然后会将临时表rename成为原始表。</p><blockquote><p>说明： 在多数的设置中，根本不需要运行OPTIMIZE TABLE。即使对可变长度的行进行了大量的更新，也不需要经常运行， 每周一次 或 每月一次 即可，并且只需要对 特定的表 运行。</p></blockquote><p>举例：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.新建一张表，使用存储过程往里面放入100W数据，或者更多一些，争取能够以兆的单位显示</span><br><span class="line">2.查看服务器上数据文件的大小，文件目录是/var/1ib/mysq1/所在的数据库</span><br><span class="line">3.删除二分之一的数据，然后再查看当前数据文件的大小，会发现此时大小是不变的</span><br><span class="line">4.使用OPTIMIZE table表名；命令优化表</span><br><span class="line">5.再查看当前数据文件的大小，会发现此时大小已经变化了，做了空间的回收</span><br></pre></td></tr></table></figure><p>优化前：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238682.png" alt="image-20230109222430593"></p><p>优化后：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238710.png" alt="image-20230109222518548"></p><p><font color=orange>方式2：使用mysqlcheck命令</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysqlcheck是Linux中的rompt,<span class="operator">-</span>o是代表optimize。</span><br><span class="line">mysqlcheck <span class="operator">-</span>o DatabaseName TableName <span class="operator">-</span>u root <span class="operator">-</span>p<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p>举例：优化所有的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqlcheck <span class="operator">-</span>o DatabaseName <span class="operator">-</span>u root <span class="operator">-</span>p<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">#或</span><br><span class="line">mysqlcheck <span class="operator">-</span>o <span class="comment">--all-databases -u root -p******</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238715.png" alt="image-20230109222817921"></p><h3 id="3-8-小结"><a href="#3-8-小结" class="headerlink" title="3.8 小结"></a>3.8 小结</h3><p>上述这些方法都是有利有弊的。比如：</p><ul><li>修改数据类型，节省存储空间的同时，你要考虑到数据不能超过取值范围；</li><li>增加冗余字段的时候，不要忘了确保数据一致性；</li><li>把大表拆分，也意味着你的查询会增加新的连接，从而增加额外的开销和运维的成本。</li></ul><p>因此，你一定要结合实际的业务需求进行权衡。</p><h2 id="4-大表优化"><a href="#4-大表优化" class="headerlink" title="4. 大表优化"></a>4. 大表优化</h2><p>当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下:</p><h3 id="4-1-限定查询的范围"><a href="#4-1-限定查询的范围" class="headerlink" title="4.1 限定查询的范围"></a>4.1 限定查询的范围</h3><p>&#x3D;&#x3D;禁止不带任何限制数据范围条件的查询语句&#x3D;&#x3D;。比如:当用户在查询订单历史的时候，可以控制在一个月的范围内.</p><h3 id="4-2-读-写分离"><a href="#4-2-读-写分离" class="headerlink" title="4.2 读&#x2F;写分离"></a>4.2 读&#x2F;写分离</h3><p>经典的数据库拆分方案，主库负责写，从库负责读</p><ul><li>一主一从模式:</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238723.png" alt="image-20230109223004555"></p><ul><li>双主双从模式：</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238732.png" alt="image-20230109223022039"></p><h3 id="4-3-垂直拆分"><a href="#4-3-垂直拆分" class="headerlink" title="4.3 垂直拆分"></a>4.3 垂直拆分</h3><p>当数据量级达到 <code>千万级</code> 以上时，有时候我们需要把一个数据库切成多份，放到不同的数据库服务器上，减少对单一数据库服务器的访问压力。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238740.png" alt="image-20230109223046920"></p><p><strong>垂直拆分的优点</strong>： 可以使得列数据变小，在查询时减少读取的Block数，减少I&#x2F;O次数。此外，垂直分区可以简化表的结构，易于维护。<br><strong>垂直拆分的缺点</strong>： 主键会出现冗余，需要管理冗余列，并会引起 JOIN 操作。此外，垂直拆分会让事务变得更加复杂。</p><h3 id="4-4-水平拆分"><a href="#4-4-水平拆分" class="headerlink" title="4.4 水平拆分"></a>4.4 水平拆分</h3><ul><li>尽量控制单表数据量的大小，建议控制在<code>1000万以内</code>。1000万并不是MySQL数据库的限制，过大会造成修改表结构、备份、恢复都会有很大的问题。此时可以用<code>历史数据归挡</code>(应用于日志数据)，<code>水平分表</code>〈应用于业务数据）等手段来控制数据量大小</li><li>这里主要考虑业务数据的水平分表策略。将大的数据表按照<code>某个属性维度</code>分拆成不同的小表，每张小表保持相同的表结构。比如可以按照年份来划分，把不同年份的数据放到不同的数据表中。2017年、2018年和2019年的数据就可以分别放到三张数据表中。</li><li>&#x3D;&#x3D;水平分表仅是解决了单一表数据过大的问题&#x3D;&#x3D;，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以&#x3D;&#x3D;水平拆分最好分库&#x3D;&#x3D;，从而达到分布式的目的</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301102238426.png" alt="image-20230109223215537"></p><p>水平拆分能够支持非常大的数据量存储，应用端改造也少，但<code>分片事务难以解决，跨节点Join性能较差，逻辑复杂</code>。《Java工程师修炼之道》的作者推荐&#x3D;&#x3D;尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度&#x3D;&#x3D;，一段的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的。如果实在要分片，尽量选择客户端分片架构，这样可以减少一次和中间件的网络l&#x2F;O。</p><p>下面补充一下数据库分片的两种常见方案:</p><ul><li><p><strong>客户端代理:分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。</strong>当当网的sharding-JDBC、阿里的TDDL是两种比较常用的实现。</p></li><li><p><strong>中间件代理:在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。</strong>我们现在谈Mycat、360的Atlas、网易的DDB等等都是这种架构的实现。</p></li></ul><h2 id="5-其它调优策略"><a href="#5-其它调优策略" class="headerlink" title="5. 其它调优策略"></a>5. 其它调优策略</h2><h3 id="5-1-服务器语句超时处理"><a href="#5-1-服务器语句超时处理" class="headerlink" title="5.1 服务器语句超时处理"></a>5.1 服务器语句超时处理</h3><p>在MySQL 8.0中可以设置 <code>服务器语句超时的限制</code>，单位可以达到 <code>毫秒级别</code> 。当中断的执行语句超过设置的毫秒数后，服务器将终止查询影响不大的事务或连接，然后将错误报给客户端。</p><p>设置服务器语句超时的限制，可以通过设置系统变量 <code>MAX_EXECUTION_TIME </code>来实现。默认情况下，MAX_EXECUTION_TIME的值为0，代表没有时间限制。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> MAX_EXECUTION_TIME<span class="operator">=</span><span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SET</span> SESSION MAX_EXECUTION_TIME<span class="operator">=</span><span class="number">2000</span>; #指定该会话中<span class="keyword">SELECT</span>语句的超时时间</span><br></pre></td></tr></table></figure><h3 id="5-2-创建全局通用表空间"><a href="#5-2-创建全局通用表空间" class="headerlink" title="5.2 创建全局通用表空间"></a>5.2 创建全局通用表空间</h3><p>MySQL8.0使用<code>CREATE TABLE SPACE</code> 语句来创建一个全局通用表空间。全局表空间可以被所有的数据库的表共享，而且相比于独享表空间，&#x3D;&#x3D;使用手动创建共享表空间可以节约元数据方面的内存&#x3D;&#x3D;。可以在创建表的时候，指定属于哪个表空间，也可以对已有表进行表空间修改等。</p><p>下面创建名为atguigu1的共享表空间，SQL语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE atguigu1 <span class="keyword">ADD</span> datafile <span class="string">&#x27;atguigu1.ibd&#x27;</span> file_block_size<span class="operator">=</span><span class="number">16</span>k;</span><br></pre></td></tr></table></figure><p>指定表空间，SQL语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(id <span class="type">int</span> ,name <span class="type">varchar</span>(<span class="number">18</span>)) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset utf8mb4 tablespace atguigu1;</span><br></pre></td></tr></table></figure><p>也可以通过ALTER TABLE语句指定表空间，SQL语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test TABLESPACE atguigu1;</span><br></pre></td></tr></table></figure><p>如何删除创建的共享表空间?因为是共享表空间，所以不能直接通过drop table tbname删除，这样操作并不能回收空间。当确定共享表空间的数据都没用，并且依赖该表空间的表均已经删除时，可以通过drop tablespace删除共享表空间来释放空间，如果依赖该共享表空间的表存在，就会删除失败。如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> TABLESPACE atguigu1;</span><br><span class="line">Tablespace atguigu1 <span class="keyword">is</span> <span class="keyword">not</span> empty.</span><br></pre></td></tr></table></figure><p>所以应该首先删除依赖该表空间的数据表，SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> test;</span><br></pre></td></tr></table></figure><p>最后即可删除表空间，SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> TABLESPACE atguigu1 ;</span><br></pre></td></tr></table></figure><h3 id="5-3-MySQL-8-0新特性：隐藏索引对调优的帮助"><a href="#5-3-MySQL-8-0新特性：隐藏索引对调优的帮助" class="headerlink" title="5.3 MySQL 8.0新特性：隐藏索引对调优的帮助"></a>5.3 MySQL 8.0新特性：隐藏索引对调优的帮助</h3><p>不可见索引的特性对于性能调试非常有用。在MySQL 8.0中，索引可以被”隐藏”和“显示”。&#x3D;&#x3D;当一个索引被隐藏时，它不会被查询优化器所使用&#x3D;&#x3D;。也就是说。管理员可以隐藏一个索引，然后观察对数据库的影响。如果数据库性能有所下降，就说明这个索引是有用的，于是将其”恢复显示”即可;如果数据库性能看不出变化，就说明这个索引是多余的，可以删掉了。</p><p>需要注意的是当索引被隐藏时，它的内容仍然是和正常索引一样<code>实时更新</code>的。如果一个索引需要长期被隐藏，那么可以将其删除，因为索引的存在会影响插入、更新和删除的性能。</p><p>数据表中的主键不能被设置为<code>invisible</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十四、多版本并发控制</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC14%E7%AB%A0_%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC14%E7%AB%A0_%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><h2 id="1-什么是MVCC"><a href="#1-什么是MVCC" class="headerlink" title="1. 什么是MVCC"></a>1. 什么是MVCC</h2><p><code>MVCC </code>(Multiversion Concurrency Control)，多版本并发控制。顾名思义，MVCC是通过数据行的多个版本管理来实现数据库的<code>并发控制</code>。这项技术使得在InnoDB的事务隔离级别下执行<code>一致性读</code>操作有了保证。换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样在做查询的时候就不用等待另一个事务释放锁。</p><p>MVCC没有正式的标准，在不同的DBMS中 MVCC的实现方式可能是不同的，也不是普遍使用的(大家可以参考相关的DBMS文档)。这里讲解InnoDB 中 MVCC的实现机制（MySQL其它的存储引擎并不支持它)。</p><h2 id="2-快照读与当前读"><a href="#2-快照读与当前读" class="headerlink" title="2. 快照读与当前读"></a>2. 快照读与当前读</h2><p>MVCC在MySQL InnoDB中的实现主要是为了<code>提高数据库并发性能</code>，用更好的方式去处理<code>读-写冲突</code>，做到即使有读写冲突时，也能做到<code>不加锁</code>，<code>非阻塞并发读</code>，而这个读指的就是快照读，而非当前读。当前读实际上是一种加锁的操作，是悲观锁的实现。而MVCC本质是采用<code>乐观锁</code>思想的一种方式。</p><h3 id="2-1-快照读"><a href="#2-1-快照读" class="headerlink" title="2.1 快照读"></a>2.1 快照读</h3><p><code>快照读</code>又叫一致性读，读取的是<code>快照数据</code>。&#x3D;&#x3D;不加锁的简单的 SELECT 都属于快照读&#x3D;&#x3D;，即不加锁的非阻塞读；比如这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure><p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于<code>MVCC</code>，它在很多情况下，避免了加锁操作，降低了开销。</p><p>既然是基于<code>多版本</code>，那么快照读&#x3D;&#x3D;可能读到的并不一定是数据的最&#x3D;&#x3D;新版本，而有可能是之前的历史版本。</p><p>快照读的前提是隔离级别不是串行级别，&#x3D;&#x3D;串行级别下的快照读会退化成当前读&#x3D;&#x3D;。</p><h3 id="2-2-当前读"><a href="#2-2-当前读" class="headerlink" title="2.2 当前读"></a>2.2 当前读</h3><p>当前读读取的&#x3D;&#x3D;是记录的最新版&#x3D;&#x3D;本（最新数据，而不是历史版本的数据），读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。&#x3D;&#x3D;加锁的 <code>SELECT</code>，或者对数据进行增删改都会进行当前读&#x3D;&#x3D;。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LOCK <span class="keyword">IN</span> SHARE MODE; # 共享锁</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; # 排他锁</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">values</span> ... # 排他锁</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ... # 排他锁</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> ... # 排他锁</span><br></pre></td></tr></table></figure><blockquote><p>注意：InnoDB增删改默认加X锁，查默认不加锁</p></blockquote><h2 id="3-复习"><a href="#3-复习" class="headerlink" title="3. 复习"></a>3. 复习</h2><h3 id="3-1-再谈隔离级别"><a href="#3-1-再谈隔离级别" class="headerlink" title="3.1 再谈隔离级别"></a>3.1 再谈隔离级别</h3><p>事务有 4 个隔离级别，可能存在三种并发问题：（准确来说是四种，还有一种：<code>脏写</code>）</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324260.png" alt="image-20230130164546130"></p><p>在MySQL中，默认的隔离级别是<code>可重复读</code>，可以解<strong>决脏读和不可重复</strong>读的问题，如果仅从定义的角度来看，它并不能解决幻读问题。如果想要解决幻读问题，就需要采用串行化的方式，也就是将隔离级别提升到最高，但这样一来就会大幅降低数据库的事务并发能力</p><p>&#x3D;&#x3D;MVCC可以不采用锁机制，而是通过乐观锁的方式来解决不可重复读和幻读问题&#x3D;&#x3D;！它可以在大多数情况下替代行级锁，降低系统的开销。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324287.png" alt="image-20230130164606259"></p><blockquote><p>在面试的时候要按照第二幅图进行回答哦~ </p><p>如果采用加锁的方式，那么就是间隙锁解决幻读问题。</p></blockquote><h3 id="3-2-隐藏字段、Undo-Log版本链"><a href="#3-2-隐藏字段、Undo-Log版本链" class="headerlink" title="3.2 隐藏字段、Undo Log版本链"></a>3.2 隐藏字段、Undo Log版本链</h3><p>回顾一下undo日志的版本链，对于使用<code>InnoDB</code>存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列。</p><ul><li><code>trx_id </code>: 每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的<code>事务id</code>赋值给<code>trx_id</code>隐藏列</li><li><code>roll_pointer</code>:每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到<code>undo日志</code>中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><p><strong>举例：</strong>student表数据如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student ;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">| id | name   | class  |</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">|  1 | 张三   | 一班    |</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">1 row in set (0.07 sec)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>假设插入该记录的<code>事务id</code>为8，那么此刻该条记录的示意图如下所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324293.png" alt="image-20230130164744113"></p><blockquote><p>insert undo只在事务<code>回滚</code>时起作用，&#x3D;&#x3D;当事务提交后，该类型的undo日志就没用了&#x3D;&#x3D;，它占用的Undo Log Segment也会被系统回收（也就是该undo日志占用的Undo页面链表要么被重用，要么被释放)。</p></blockquote><p>假设之后两个事务id分别为10、20的事务对这条记录进行UPDATE 操作，操作流程如下:</p><table><thead><tr><th>发生时间顺序</th><th>事务10</th><th>事务20</th></tr></thead><tbody><tr><td>1</td><td>BEGIN;</td><td></td></tr><tr><td>2</td><td></td><td>BEGIN;</td></tr><tr><td>3</td><td>UPDATE student SET name&#x3D;”李四”<br/>WHERE id&#x3D;1;</td><td></td></tr><tr><td>4</td><td>UPDATE student SET name&#x3D;”王五” <br/>WHERE id&#x3D;1;</td><td></td></tr><tr><td>5</td><td>COMMIT;</td><td></td></tr><tr><td>6</td><td></td><td>UPDATE student SET name&#x3D;”钱七”<br/>WHERE id&#x3D;1;</td></tr><tr><td>7</td><td></td><td>UPDATE student SET name&#x3D;”宋八”<br/>WHERE id&#x3D;1;</td></tr><tr><td>8</td><td></td><td>COMMIT;</td></tr></tbody></table><blockquote><p>能不能在两个事务中交叉更新同一条记录呢?<br>不能！这不就是一个事务修改了另一个未提交事务修改过的数据，脏写。</p><p>&#x3D;&#x3D;InnoDB使用锁来保证不会有脏写情况的发生&#x3D;&#x3D;，也就是在第一个事务更新了某条记录后，就会给这条记录加锁，另一个事务再次更新时就需要等待第一个事务提交了，把锁释放之后才可以继续更新。</p><p><strong><font color=red>InnoDB增删改默认加x锁，查默认不加锁</font></strong></p></blockquote><p>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个<code>roll_pointer</code>属性（<code>INSERT</code>操作对应的undo日志没有该属性，因为该记录并没有更早的版本)，可以将这些<code>undo日志</code>都连起来，串成一个链表:</p><p>update写的时候是默认加了X锁的,20会等待10</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324295.png" alt="image-20230130165215416"></p><p>对该记录每次更新后，都会将旧值放到一条<code>undo日志</code>中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被<code>roll_pointer</code>属性连接成一个链表，把这个链表称之为<code>版本链</code>，版本链的头节点就是当前记录最新的值。</p><p>每个版本中还包含生成该版本时对应的<code>事务id</code>。</p><h2 id="4-MVCC实现原理之ReadView"><a href="#4-MVCC实现原理之ReadView" class="headerlink" title="4. MVCC实现原理之ReadView"></a>4. MVCC实现原理之ReadView</h2><p>MVCC 的实现依赖于：&#x3D;&#x3D;隐藏字段、Undo Log、Read View&#x3D;&#x3D;</p><h3 id="4-1-什么是ReadView"><a href="#4-1-什么是ReadView" class="headerlink" title="4.1 什么是ReadView"></a>4.1 什么是ReadView</h3><p>在MVCC机制中，<code>多个事务对同一个行记录进行更新会产生多个历史快照</code>，这些历史快照保存在Undo Log里。如果一个事务想要查询这个行记录，需要读取哪个版本的行记录呢？这时就需要用到<code>ReadView</code>了，它解决了&#x3D;&#x3D;行的可见性&#x3D;&#x3D;问题</p><p>ReadView就是事务A在使用MVCC机制进行快照读操作时产生的<code>读视图</code>。当事务启动时，会生成数据库系统当前的一个快照，InnoDB为每个事务构造了一个数组，用来记录并维护系统当前<code>活跃事务</code>的ID（“活跃”指的就是，&#x3D;&#x3D;启动了但还没提交&#x3D;&#x3D;)</p><blockquote><p>ReadView和事务是一对一的关系~ 也就是当事务中使用MVVC，且是Select时会生成一个ReadView~</p></blockquote><h3 id="4-2-设计思路"><a href="#4-2-设计思路" class="headerlink" title="4.2 设计思路"></a>4.2 设计思路</h3><p>使用<code>READ UNCONNMITTED</code>隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取的记录就是最新版本了。</p><p>使用<code>SERIALIZABLE</code>隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</p><p>使用 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 隔离级别的事务，都必须保证读到 <code>已经提交了的</code> 事务修改过的记录。假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是需要<code>判断一下版本链中的哪个版本是当前事务可见的</code>，这是ReadView要解决的主要问题。</p><p>这个ReadView中主要包含4个比较重要的内容，分别如下：</p><ul><li><p><code>creator_trx_id </code>，创建这个 Read View 的事务 ID。</p><blockquote><p>说明：只有在对表中的记录做改动时（执行<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>这些语句时）才会为事务分配事务id，否则在一个<code>只读事务</code>中的事务id值都默认为<code>0</code>。</p></blockquote></li><li><p><code>trx_ids </code>，表示在生成ReadView时当前系统中活跃的读写事务的 <code>事务id列表</code> 。</p></li><li><p><code>up_limit_id </code>，活跃的事务中最小的事务 ID。</p></li><li><p><code>low_limit_id </code>，表示生成ReadView时系统中应该分配给下一个事务的 id 值。low_limit_id 是系统最大的事务id值，这里要注意是<code>系统中的事务id</code>，需要区别于正在活跃的事务ID。</p><blockquote><p>注意：low_limit_id并不是trx_ids中的最大值，事务id是递增分配的。比如，现在有id为1，2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，trx_ids就包括1和2，up_limit_id的值就是1，low_limit_id的值就是4。</p></blockquote></li></ul><p><strong>举例：</strong></p><p>trx_ids为trx2、trx3、trx5和trx8的集合，系统的最大事务ID (low_limit_id)为trx8+1(如果之前没有其他的新增事务)，活跃的最小事务ID (up_limit_id)为trx2。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324301.png" alt="image-20230130165359240"></p><h3 id="4-3-ReadView的规则"><a href="#4-3-ReadView的规则" class="headerlink" title="4.3 ReadView的规则"></a>4.3 ReadView的规则</h3><p>有了这个ReadView，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见。</p><ul><li>如果被访问版本的trx_id属性值与ReadView中的<code>creator_trx_id </code>值相同，意味着&#x3D;&#x3D;当前事务在访问它自己修改过的记录&#x3D;&#x3D;，所以该版本可以被当前事务访问。</li><li>如果被访问版本的trx_id属性值小于ReadView中的<code>up_limit_id</code>值，表明&#x3D;&#x3D;生成该版本的事务在当前事务生成ReadView前已经提交&#x3D;&#x3D;，所以该版本可以被当前事务访问。</li><li>如果被访问版本的trx_id属性值大于或等于ReadView中的<code>low_limit_id</code>值，表明&#x3D;&#x3D;生成该版本的事务在当前事务生成ReadView后才开启&#x3D;&#x3D;，所以该版本不可以被当前事务访问。(不然会出现脏读)</li><li>如果被访问版本的trx_id属性值在ReadView的<code>up_limit_id </code>和<code>low_limit_id</code>之间，那就需要判断一下<code>trx_id</code>属性值是不是在<code>trx_ids </code>列表中。<ul><li>如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问</li><li>如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。</li></ul></li></ul><h3 id="4-4-MVCC整体操作流程"><a href="#4-4-MVCC整体操作流程" class="headerlink" title="4.4 MVCC整体操作流程"></a>4.4 MVCC整体操作流程</h3><p>了解了这些概念之后，来看下当查询一条记录的时候，系统如何通过MVCC找到它：</p><ol><li>首先获取事务自己的版本号，也就是事务 ID；</li><li>获取(生成) ReadView；</li><li>查询得到的数据，然后与 ReadView 中的事务版本号进行比较；</li><li>如果不符合 ReadView 规则（当前版本不能被访问），就需要从 <code>Undo Log</code> 中获取历史快照；</li><li>最后返回符合规则的数据。</li></ol><p>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。</p><blockquote><p>InnoDB中，MVCC是通过<code>Undo Log + Read View</code>进行数据读取，Undo Log保存了历史快照，而Read View规则帮我们判断当前版本的数据是否可见。</p><p>Read View和事务是一对一对应的，而且Read View也是一个动态，不断变化的~</p></blockquote><p>在隔离级别为<code>读已提交</code>（Read Committed）时，&#x3D;&#x3D;一个事务中的每一次 SELECT 查询都会重新获取一次Read View&#x3D;&#x3D;。</p><table><thead><tr><th>事务</th><th>说明</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>select * from student where id &gt;2;</td><td>获取一次Read View</td></tr><tr><td>…</td><td></td></tr><tr><td>select * from student where id &gt;2;</td><td>获取一次Read View</td></tr><tr><td>commit;</td><td></td></tr></tbody></table><blockquote><p>注意，此时同样的查询语句都会重新获取一次Read View，这时如果Read View 不同，就可能产生不可重复读或者幻读的情况。这样符合Read Committed的规则特点~</p></blockquote><p>当隔离级别为可重复读的时候，就避免了不可重复读，这是因为&#x3D;&#x3D;一个事务只在第一次SELECT的时候会获取一次Read View&#x3D;&#x3D;，而后面所有的SELECT都会复用这个Read View，如下表所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324310.png" alt="image-20230131160657468"></p><h2 id="5-举例说明"><a href="#5-举例说明" class="headerlink" title="5. 举例说明"></a>5. 举例说明</h2><p>假设现在student表中只有一条由<code>事务id</code>为<code>8</code>的事务插入的一条记录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student ;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">| id | name   | class  |</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">|  1 | 张三   | 一班    |</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">1 row in set (0.07 sec)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>MVCC只能在<code>READ COMMITTED</code>和<code>REPEATABLE READ</code>两个隔离级别下工作。接下来看一下READ COMMITTED和REPEATABLE READ所谓的生成ReadView的时机不同到底不同在哪里</p><h3 id="5-1-READ-COMMITTED隔离级别下"><a href="#5-1-READ-COMMITTED隔离级别下" class="headerlink" title="5.1 READ COMMITTED隔离级别下"></a>5.1 READ COMMITTED隔离级别下</h3><p><strong><font color=red>READ COMMITTED ：每次读取数据前都生成一个ReadView</font></strong></p><p>现在有两个 事务id 分别为 10 、 20 的事务在执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录(为了分配事务id)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>说明:事务执行过程中，只有在第一次真正修改记录时(比如使用INSERT、DELETE、UPDATE语句)，才会被分配一个单独的事务id，这个事务id是递增的。所以我们才在事务2中更新一些别的表的记录，目的是让它分配事务id。</p></blockquote><p>此刻，表student 中id为1的记录得到的<code>版本链表</code>如下所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324986.png" alt="image-20230131170029928"></p><p>假设现在有一个使用 <code>READ COMMITTED</code> 隔离级别的事务开始执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用READ COMMITTED隔离级别的事务</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>这个 SELECT1 的执行过程如下：</strong></p><p>步骤1∶在执行<code>SELECT</code>语句时会先生成一个<code>ReadView </code>，ReadView的<code>trx_ids</code>列表的内容就是<code>[10，20]</code>,<code>up_limit_id</code>为<code>10</code>, <code>low_limit_id</code>为<code>21</code>, <code>creator_trx_id</code>为<code>0</code>。</p><p>步骤2：从版本链中挑选可见的记录，从图中看出，最新版本的列name的内容是’王五’，该版本的<code>trx_id</code>值为<code>10</code>，在trx_ids列表内，所以不符合可见性要求，根据roll_pointer跳到下一个版本</p><p>步骤3：下一个版本的列name的内容是’李四’，该版本的trx_id值也为10，也在trx_ids列表内，所以也不符合要求，继续跳到下一个版本</p><p>步骤4：下一个版本的列name的内容是’张三’，该版本的trx_id值为8，小于ReadView中的up_limit_id值10，所以这个版本是符合要求的，最后返回给用户的版本就是这条列name为‘张三’的记录。</p><p>之后，把 事务id 为 10 的事务提交一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>然后再到 <code>事务id</code> 为 20 的事务中更新一下表 <code>student </code>中 <code>id </code>为 <code>1 </code>的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;钱七&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;宋八&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此刻，表student中 <code>id </code>为 <code>1 </code>的记录的版本链就长这样：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324019.png" alt="image-20230131170300061"></p><p>然后再到刚才使用 <code>READ COMMITTED</code> 隔离级别的事务中继续查找这个 <code>id</code>为 <code>1</code> 的记录，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用READ COMMITTED隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span> 均未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"># SELECT2：Transaction <span class="number">10</span>提交，Transaction <span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;王五&#x27;</span></span><br></pre></td></tr></table></figure><p>这个<code>SELECT2</code>的执行过程如下:</p><p>步骤1：在执行<code>SELECT</code>语句时会又会<code>单独生成</code>一个<code>ReadView</code>，该ReadView的<code>trx_ids</code>列表的内容就是<code>[20]</code>，<code>up_limit_id</code>为<code>20</code>，<code>low_limit_id</code>为<code>21</code>, <code>creator_trx_id</code>为<code>0</code>。</p><p>步骤2：从版本链中挑选可见的记录，从图中看出，最新版本的列<code>name</code>的内容是<code>’宋八’</code>，该版本的<code>trx_id</code>值为<code>20</code>，在trx_ids列表内，所以不符合可见性要求，根据<code>roll_pointer</code>跳到下一个版本。</p><p>步骤3∶下一个版本的列<code>name</code>的内容是‘<code>钱七</code>’，该版本的<code>trx_id</code>值为<code>20</code>，也在<code>trx_ids</code>列表内，所以也不符合要求，继续跳到下一个版本</p><p>步骤4∶下一个版本的列<code>name</code>的内容是’<code>王五</code>’，该版本的<code>trx_id</code>值为<code>10</code>，小于<code>ReadView</code>中的<code>up_limit_id</code>值<code>20</code>，所以这个版本是符合要求的，最后返回给用户的版本就是这条列name为’<code>王五</code>’的记录。</p><p>以此类推，如果之后<code>事务id</code>为<code>20</code>的记录也提交了，再次在使用<code>READ COMMITED</code> 隔离级别的事务查询表<code>student</code>中<code>id</code>值为<code>1</code>的记录时，得到的结果就是’<code>宋八</code>‘了，具体流程我们就不分析了。</p><blockquote><p><strong>强调：</strong>使用<code>READ COMMITTED</code>隔离级别的事务在每次查询开始时都会生成一个独立的ReadView</p></blockquote><h3 id="5-2-REPEATABLE-READ隔离级别下"><a href="#5-2-REPEATABLE-READ隔离级别下" class="headerlink" title="5.2 REPEATABLE READ隔离级别下"></a>5.2 REPEATABLE READ隔离级别下</h3><p>使用 <code>REPEATABLE READ</code> 隔离级别的事务来说，只会在第一次执行查询语句时生成一个 <code>ReadView </code>，之后的查询就不会重复生成了。</p><p>比如，系统里有两个 <code>事务id</code> 分别为 <code>10 </code>、 <code>20 </code>的事务在执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此刻，表student 中 <code>id </code>为 <code>1 </code>的记录得到的版本链表如下所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324050.png" alt="image-20230131170424180"></p><p>假设现在有一个使用 <code>REPEATABLE READ</code> 隔离级别的事务开始执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用REPEATABLE READ隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><p>这个<code>SELECT1</code>的执行过程如下:</p><p>步骤1：在执行<code>SELECT</code>语句时会先生成一个<code>ReadView</code>，<code>ReadView</code>的<code>trx_ids</code>列表的内容就是<code>[10，20]</code>，<code>up_limit_id</code>为<code>10</code>, <code>low_limit_id</code>为<code>21</code>, <code>creator_trx_id</code>为<code>0</code>。</p><p>步骤2：然后从版本链中挑选可见的记录，从图中看出，最新版本的列<code>name</code>的内容是’<code>王五</code>’，该版本的<code>trx_id</code>值为<code>10</code>，在<code>trx_ids</code>列表内，所以不符合可见性要求，根据<code>roll_pointer</code>跳到下一个版本。</p><p>步骤3：下一个版本的列<code>name</code>的内容是’<code>李四</code>’，该版本的trx_id值也为10，也在trx_ids列表内，所以也不符合要求，继续跳到下一个版本。</p><p>步骤4：下一个版本的列name的内容是’<code>张三</code>’，该版本的<code>trx_id</code>值为<code>8</code>，小于<code>ReadView</code>中的<code>up_limit_id</code>值<code>10</code>，所以这个版本是符合要求的，最后返回给用户的版本就是这条列<code>name</code>为’<code>张三</code> ’的记录</p><p>之后，我们把<code>事务id</code>为<code>10</code>的事务提交一下，就像这样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>然后再到 <code>事务id</code> 为 <code>20 </code>的事务中更新一下表 student 中 id 为 1 的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;钱七&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;宋八&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此刻，表student 中 <code>id </code>为 <code>1 </code>的记录的版本链长这样：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324080.png" alt="image-20230131170550677"></p><p>然后再到刚才使用 <code>REPEATABLE READ</code> 隔离级别的事务中继续查找这个<code>id </code>为 <code>1 </code>的记录，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用REPEATABLE READ隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>均未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"># SELECT2：Transaction <span class="number">10</span>提交，Transaction <span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值仍为<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><p><code>SELECT2</code>的执行过程如下:</p><p>步骤1：因为当前事务的隔离级别为<code>REPEATABLE READ</code>，而之前在执行<code>SELECT1</code>时已经生成过<code>ReadView</code>了，所以此时直接复用之前的ReadView，之前的<code>ReadView</code>的<code>trx_ids</code>列表的内容就是<code>[10，20]</code>，<code>up_limit_id</code>为<code>10</code>，<code>low_limit_id</code>为<code>21</code>, <code>creator_trx_id</code>为<code>0</code>。</p><p>步骤2：然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列<code>name</code>的内容是’<code>宋八</code>’，该版本的<code>trx_id</code>值为<code>20</code>，在<code>trx_ids</code>列表内，所以不符合可见性要求，根据<code>roll_pointer</code>跳到下一个版本</p><p>步骤3：下一个版本的列<code>name</code>的内容是’<code>钱七</code>’，该版本的<code>trx_id</code>值为<code>20</code>，也在<code>trx_ids</code>列表内，所以也不符合要求，继续跳到下一个版本</p><p>步骤4：下一个版本的列<code>name</code>的内容是’<code>王五</code>’，该版本的<code>trx_id</code>值为<code>10</code>，而trx_ids列表中是包含值为10的事务id的，所以该版本也不符合要求，同理下一个列<code>name</code>的内容是‘<code>李四</code>’的版本也不符合要求。继续跳到下一个版本</p><p>步骤5：下一个版本的列<code>name</code>的内容是’<code>张三</code>’，该版本的<code>trx_id</code>值为<code>8</code>，小于<code>ReadView</code>中的<code>up_limit_id</code>值10，所以这个版本是符合要求的，最后返回给用户的版本就是这条列c为‘<code>张三</code>’的记录。</p><p>两次<code>SELECT</code>查询得到的结果是重复的，记录的列<code>c</code>值都是‘<code>张三</code>‘，这就是<code>可重复读</code>的含义。如果我们之后再把<code>事务id</code>为<code>20</code>的记录提交了，然后再到刚才使用<code>REPEATABLE READ</code>隔离级别的事务中继续查找这个<code>id</code>为<code>1</code>的记得到的结果还是‘<code>张三</code>‘，具体执行过程大家可以自己分析一下。</p><h3 id="5-3-如何解决幻读"><a href="#5-3-如何解决幻读" class="headerlink" title="5.3 如何解决幻读"></a>5.3 如何解决幻读</h3><p>接下来说明InnoDB 是如何解决幻读的。</p><p>假设现在表 student 中只有一条数据，数据内容中，主键 <code>id=1</code>，隐藏的 <code>trx_id=10</code>，它的 undo log 如下图所示。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324108.png" alt="image-20230131170636804"></p><p>假设现在有事务 A 和事务 B 并发执行， <code>事务 A</code> 的事务 id 为 <code>20 </code>， <code>事务 B</code> 的事务 id 为 <code>30 </code>。</p><p>步骤1：事务 A 开始第一次查询数据，查询的 SQL 语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在开始查询之前，MySQL 会为事务 A 产生一个 ReadView，此时 ReadView 的内容如下： <code>trx_ids=[20,30]</code> ，<code>up_limit_id=20</code> ，<code> low_limit_id=31</code> ， <code>creator_trx_id=20</code> 。</p><p>由于此时表 student 中只有一条数据，且符合 where id&gt;&#x3D;1 条件，因此会查询出来。然后根据 ReadView机制，发现该行数据的trx_id&#x3D;10，<code>小于</code>事务 A 的 ReadView 里 <code>up_limit_id</code>，这表示这条数据是事务 A 开启之前，其他事务就已经提交了的数据，因此事务 A 可以读取到。</p><p>结论：事务 A 的第一次查询，能读取到一条数据，id&#x3D;1。</p><p>步骤2：接着事务 B(trx_id&#x3D;30)，往表 student 中新插入两条数据，并<code>提交</code>事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此时表student 中就有三条数据了，对应的 undo 如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324138.png" alt="image-20230131170730357"></p><p>步骤3：接着事务 A 开启第二次查询，根据可重复读隔离级别的规则，此时事务 A 并<code>不会再重新生成ReadView</code>。此时表 student 中的 3 条数据都满足 where id&gt;&#x3D;1 的条件，因此会先查出来。然后根据ReadView 机制，判断每条数据是不是都可以被事务 A 看到。</p><p>1）首先 id&#x3D;1 的这条数据，前面已经说过了，可以被事务 A 看到。</p><p>2）然后是 id&#x3D;2 的数据，它的 trx_id&#x3D;30，此时事务 A 发现，这个值处于 up_limit_id 和 low_limit_id 之间，因此还需要再判断 30 是否处于 trx_ids 数组内。由于事务 A 的 trx_ids&#x3D;[20,30]，因此在数组内，这表示 id&#x3D;2 的这条数据是与事务 A 在同一时刻启动的其他事务提交的，所以这条数据不能让事务 A 看到</p><p>3）同理，id&#x3D;3 的这条数据，trx_id 也为 30，因此也不能被事务 A 看见</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202302021324508.png" alt="image-20230131170811967"></p><p>结论：最终事务 A 的第二次查询，只能查询出 id&#x3D;1 的这条数据。这和事务 A 的第一次查询的结果是一样的，因此没有出现幻读现象，所以说在 MySQL 的可重复读隔离级别下，不存在幻读问题。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>这里介绍了 <code>MVCC </code>在 <code>READ COMMITTD</code> 、 <code>REPEATABLE READ</code> 这两种隔离级别的事务在执行快照读操作时访问记录的版本链的过程。这样使不同事务的 <code>读-写</code> 、 <code>写-读</code> 操作并发执行，从而提升系统性能</p><p>核心点在于 <code>ReadView </code>的原理， <code>READ COMMITTD 、 REPEATABLE READ</code> 这两个隔离级别的一个很大不同就是生成ReadView的时机不同：</p><ul><li><p>READ COMMITTD 在每一次进行普通SELECT操作前都会生成一个ReadView</p></li><li><p>REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复使用这个ReadView就好了</p></li></ul><blockquote><p>说明：之前说执行DELETE语句或者更新主键的UPDATE语句并不会立即把对应的记录完全从页面中删除，而是执行一个所谓的<code>delete mark</code>操作(标记0-&gt;1)，相当于只是对记录打上了一个删除标志位，这主要就是为MVCC服务的。另外后面回滚也可能用到这个delete mark~</p></blockquote><p>通过 MVCC 可以解决:</p><ul><li><p><code>读写之间阻塞的问题</code>。通过MVCC 可以让读写互相不阻塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力</p></li><li><p><code>降低了死锁的概率</code>。这是因为MVCC采用了<code>乐观锁</code>的方式，读取数据时并不需要加锁，对于写操作，也只锁 定必要的行</p></li><li><p><code>解决快照读的问题</code>。当查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、锁</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC13%E7%AB%A0_%E9%94%81/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC13%E7%AB%A0_%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><p>事务的<code>隔离性</code>由这章讲述的<code>锁</code>来实现</p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><code>锁</code>是计算机协调多个进程或线程<code>并发访问某一资源</code>的机制。在程序开发中会存在多线程同步的问题，当多个线程并发访问某个数据的时候，尤其是针对一些敏感的数据（比如订单、金额等)，就需要保证这个数据在任何时刻<code>最多只有一个线程</code>在访问，保证数据的<code>完整性</code>和<code>一致性</code>。在开发过程中加锁是为了保证数据的一致性，这个思想在数据库领域中同样很重要。</p><p>在数据库中，除传统的计算资源（如CPU、RAM、I&#x2F;O等）的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对<code>并发操作进行控制</code>，因此产生了<code>锁</code>。同时<code>锁机制</code>也为实现MySQL的各个隔离级别提供了保证。<code>锁冲突</code>也是影响数据库<code>并发访问性能</code>的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="2-MySQL并发事务访问相同记录"><a href="#2-MySQL并发事务访问相同记录" class="headerlink" title="2. MySQL并发事务访问相同记录"></a>2. MySQL并发事务访问相同记录</h2><p>并发事务访问相同记录的情况大致可以划分为3种：</p><h3 id="2-1-读-读情况"><a href="#2-1-读-读情况" class="headerlink" title="2.1 读-读情况"></a>2.1 读-读情况</h3><p><code>读-读</code> 情况，即并发事务相继 <code>读取相同的记录</code> 。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。</p><h3 id="2-2-写-写情况"><a href="#2-2-写-写情况" class="headerlink" title="2.2 写-写情况"></a>2.2 写-写情况</h3><p><code>写-写</code> 情况，即并发事务相继对相同的记录做出改动。</p><p>在这种情况下会发生<code>脏写</code>的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们 <code>排队执行</code> ，这个排队的过程其实是通过 <code>锁</code> 来实现的。这个所谓的锁其实是一个 <code>内存中的结构</code> ，在事务执行前本来是没有锁的，也就是说一开始是没有 <code>锁结构</code> 和记录进行关联的,如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335827.png" alt="image-20230123203920264"></p><p>当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的 锁结构 ，当没有的时候就会在内存中生成一个 <code>锁结构</code> 与之关联。比如，事务 <code>T1</code>要对这条记录做改动，就需要生成一个 <code>锁结构</code> 与之关联：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335836.png" alt="image-20230123203950048"></p><p>在 <code>锁结构</code> 里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来:</p><ul><li><code>trx信息</code>:代表这个锁结构是哪个事务生成的。</li><li><code>is_waiting </code>:代表当前事务是否在等待。</li></ul><p>当事务<code>T1</code>改动了这条记录后，就生成了一个<code>锁结构</code>与该记录关联，因为之前没有别的事务为这条记录加锁，所以<code>is_waiting</code>属性就是<code>false</code>，把这个场景就称之为<code>获取锁成功</code>，或者<code>加锁成功</code>，然后就可以继续执行操作了</p><p>在事务T1提交之前，另一个事务<code>T2</code>也想对该记录做改动，那么先看看有没有锁结构与这条记录关联，发现有一个锁结构与之关联后，然后也生成了一个<code>锁结构</code>与这条记录关联，不过锁结构的<code>is_waiting</code>属性值为<code>true</code>，表示当前事务需要等待，把这个场景就称之为<code>获取锁失败</code>，或者<code>加锁失败</code>，图示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335830.png" alt="image-20230123204057637"></p><p>在事务T1提交之后，就会把该事务生成的<code>锁结构释放</code>掉，然后看看还有没有别的事务在等待获取锁，发现了事务<code>T2</code>还在等待获取锁，所以把事务T2对应的锁结构的<code>is_waiting</code>属性设置为<code>false</code>，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。效果图就是这样:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335839.png" alt="image-20230123204129603"></p><p><strong>小结几种说法:</strong></p><ul><li><p>不加锁<br>意思就是不需要在内存中生成对应的<code>锁结构</code>，可以直接执行操作。</p></li><li><p>获取锁成功，或者加锁成功<br>意思就是在内存中生成了对应的<code>锁结构</code>，而且锁结构的<code>is_waiting</code>属性为<code>false</code>，也就是事务可以继续执行操作。</p></li><li><p>获取锁失败，或者加锁失败，或者没有获取到锁</p><p>意思就是在内存中生成了对应的<code>锁结构</code>，不过锁结构的<code>is_waiting</code>属性为<code>true</code>，也就是事务需要等待，不可以继续执行操作。</p></li></ul><h3 id="2-3-读-写或写-读情况"><a href="#2-3-读-写或写-读情况" class="headerlink" title="2.3 读-写或写-读情况"></a>2.3 读-写或写-读情况</h3><p><code>读-写</code> 或 <code>写-读</code> ，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生 <code>脏读</code>、 <code>不可重复读</code> 、 <code>幻读</code> 的问题。</p><p>各个数据库厂商对 <code>SQL标准</code> 的支持都可能不一样。比如<font color=red>MySQL在 <code>REPEATABLE READ</code> 隔离级别上就已经解决了 <code>幻读</code> 问题</font>。</p><h3 id="2-4-并发问题的解决方案"><a href="#2-4-并发问题的解决方案" class="headerlink" title="2.4 并发问题的解决方案"></a>2.4 并发问题的解决方案</h3><p>**<font color=orange>怎么解决 <code>脏读</code> 、 <code>不可重复读</code> 、 <code>幻读</code> 这些问题呢？</font>**其实有两种可选的解决方案：</p><ul><li><font color=red>方案一：读操作利用多版本并发控制（<code>MVCC </code>，下章讲解），写操作进行<code>加锁</code> 。</font></li></ul><p>所谓的<code>MVCC</code>，就是生成一个<code>ReadView</code>，通过ReadView找到符合条件的记录版本（(历史版本由<code>undo</code>日志构建)。查询语句只能读到在生成ReadView之前<code>已提交事务所做的更改</code>，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而<code>写操作</code>肯定针对的是<code>最新版本的记录</code>，&#x3D;&#x3D;读记录的历史版本和改动记录的最新版本本身并不冲突&#x3D;&#x3D;，也就是采用MVCC时，<code>读-写</code>操作并不冲突</p><blockquote><p>普通的SELECT语句在<code>READ COMMITTED</code>和<code>REPEATABLE READ</code>隔离级别下会使用到MVCC读取记录。</p><ul><li>在<code>READ COMMITTED</code> 隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code> ，也就是避免了脏读现象；</li><li>在<code>REPEATABLE READ</code> 隔离级别下，一个事务在执行过程中只有<code>第一次执行SELECT操作</code> 才会生成一个ReadView，之后的SELECT操作都 <code>复用</code> 这个ReadView，这样也就避免了不可重复读 和幻读的问题</li></ul></blockquote><ul><li><font color=red>方案二：读、写操作都采用加锁的方式</font></li></ul><p>如果我们的一些业务场景不允许读取记录的旧版本，而是每次都必须去<code>读取记录的最新版本</code>。比如，在银行存款的事务中，你需要先把账户的余额读出来，然后将其加上本次存款的数额，最后再写到数据库中。在将账户余额读取出来后，就不想让别的事务再访问该余额，直到本次存款事务执行完成，其他事务才可以访问账户的余额。这样在读取记录的时候就需要对其进行<code>加锁</code>操作，这样也就意味着<code>读</code>操作和<code>写</code>操作也像<code>写-写</code>操作那样排队执行。</p><p><code>脏读</code>的产生是因为当前事务读取了另一个未提交事务写的一条记录，如果另一个事务在写记录的时候就给这条记录加锁，那么当前事务就无法继续读取该记录了，所以也就不会有脏读问题的产生了。</p><p><code>不可重复读</code>的产生是因为当前事务先读取一条记录，另外一个事务对该记录做了改动之后并提交之后，当前事务再次读取时会获得不同的值，如果在当前事务读取记录时就给该记录加锁，那么另一个事务就<code>无法修改</code>该记录，自然也不会发生不可重复读了</p><p><code>幻读</code>问题的产生是因为当前事务读取了一个范围的记录，然后另外的事务向该范围内插入了新记录，当前事务再次读取该范围的记录时发现了新插入的新记录。采用加锁的方式解决幻读问题就有一些麻烦，因为当前事务在第一次读取记录时幻影记录并不存在，所以读取的时候加锁就有点尴尬（因为你并不知道给谁加锁~)</p><p><strong>小结对比发现：</strong></p><ul><li>采用 <code>MVCC </code>方式的话，<code>读-写</code> 操作彼此并不冲突，<code>性能更高</code> 。</li><li>采用 <code>加锁</code> 方式的话， 读-写 操作彼此需要 <code>排队执行</code> ，影响性能。</li></ul><p>一般情况下当然愿意采用<code>MVCC</code>来解决 读-写 操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用 <code>加锁</code> 的方式执行。下面就讲解下MySQL中不同类别的锁。</p><h2 id="3-锁的不同角度分类"><a href="#3-锁的不同角度分类" class="headerlink" title="3. 锁的不同角度分类"></a>3. 锁的不同角度分类</h2><p>锁的分类图，如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335845.png" alt="image-20230123212838138"></p><h3 id="3-1从数据操作的类型划分-读锁、写锁"><a href="#3-1从数据操作的类型划分-读锁、写锁" class="headerlink" title="3.1从数据操作的类型划分:读锁、写锁"></a>3.1从数据操作的类型划分:读锁、写锁</h3><p>对于数据库中并发事务的<code>读-读</code>情况并不会引起什么问题。对于<code>写-写</code>、<code>读-写</code>或<code>写-读</code>这些情况可能会引起一些问题，需要使用<code>MVCC</code>或者<code>加锁</code>的方式来解决它们。在使用<code>加锁</code>的方式解决问题时，由于既要允许<code>读-读</code>情况不受影响，又要使<code>写-写</code>、<code>读-写</code>或<code>写-读</code>情况中的操作相互阻塞，所以MySQL实现一个由两种类型的锁组成的锁系统来解决。这两种类型的锁通常被称为&#x3D;&#x3D;共享锁(Shared Lock，S Lock)&#x3D;&#x3D;和&#x3D;&#x3D;排他锁(Exclusive Lock，X Lock)&#x3D;&#x3D;，也叫&#x3D;&#x3D;读锁(readlock)&#x3D;&#x3D;和&#x3D;&#x3D;写锁(write lock)&#x3D;&#x3D;</p><ul><li><code>读锁</code>:也称为<code>共享锁</code>、英文用<code>S</code>表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。</li><li><code>写锁</code>:也称为<code>排他锁</code>、英文用<code>X</code>表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源</li></ul><blockquote><p>需要注意的是对于InnoDB引擎来说，读锁和写锁可以加在表上，也可以加在行上。</p></blockquote><p><strong>举例（行级读写锁)︰</strong>如果一个事务T1已经获得了某个行r的读锁，那么此时另外的一个事务T2是可以去获得这个行r的读锁的，因为读取操作并没有改变行r的数据;但是，如果某个事务T3想获得行r的写锁，则它必须等待事务T1、T2释放掉行r上的读锁才行。</p><blockquote><p>总结:这里的兼容是指对同一张表或记录的锁的兼容性情况</p></blockquote><table><thead><tr><th>兼容情况</th><th>X锁</th><th>S锁</th></tr></thead><tbody><tr><td>X锁</td><td>不兼容</td><td>不兼容</td></tr><tr><td>S锁</td><td>不兼容</td><td>兼容</td></tr></tbody></table><h4 id="1-锁定读"><a href="#1-锁定读" class="headerlink" title="1. 锁定读"></a>1. 锁定读</h4><p>在采用<code>加锁</code>方式解决<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>这些问题时，读取一条记录时需要获取该记录的<code>S锁</code>，其实是不严谨的，有时候需要在读取记录时就获取记录的<code>X锁</code> ，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的<code>SELECT</code>语句格式:</p><ul><li>对读取的记录加S锁∶</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE; </span><br><span class="line">#或</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> SHARE;#(<span class="number">8.0</span>新增语法)</span><br></pre></td></tr></table></figure><p>在普通的SELECT语句后边加<code>LOCK IN SHARE MODE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加<code>S锁</code>，这样允许别的事务继续获取这些记录的<code>S锁</code>（比方说别的事务也使用<code>SELECT …LOCK IN SHARE MODE</code>语句来读取这些记录)，但是不能获取这些记录的<code>X锁</code>(比如使用<code>SELECT … FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录)。如果别的事务想要获取这些记录的<code>X锁</code>，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>S锁</code>释放掉</p><ul><li>对读取的记录加<code>X锁</code>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>在普通的SELECT语句后边加<code>FOR UPDATE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加<code>X锁</code>，这样既不允许别的事务获取这些记录的<code>S锁</code>(比方说别的事务使用<code>SELECT … LOCK IN SHARE MODE</code>语句来读取这些记录)，也不允许获取这些记录的<code>X锁</code>(比如使用<code>SELECT … FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录)。如果别的事务想要获取这些记录的<code>S锁</code>或者<code>X锁</code>，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>X锁</code>释放掉</p><p><strong><font color=blue>案例演示</font></strong></p><ul><li>S-&gt;S</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335867.png"></p><ul><li>S-&gt;X</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335594.png"></p><ul><li>X-&gt;S</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335638.png"></p><ul><li>X-&gt;X</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335738.png"></p><p><strong>MySQL8.0新特性:</strong></p><p>在5.7及之前的版本，<code>SELECT … FOR UPDATE</code>，如果获取不到锁，会一直等待，直到<br><code>innodb_lock_wait_timeout</code>超时。在8.0版本中，在SELECT …FOR UPDATE，SELECT …FOR SHARE后添加<code>NOWAIT</code>、<code>SKIP LOCKED</code>语法，跳过锁等待，或者跳过锁定。</p><p>如果查询的行已经加锁：</p><ul><li>那么NOWAIT会立即报错返回</li><li>而SKIP LOCKED也会立即返回，只是返回的结果中不包含被锁定的行。</li></ul><p><strong><font color=blue>演示</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#事务A</span><br><span class="line"><span class="keyword">begin</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+-- --+--------+- ------ +</span></span><br><span class="line"><span class="comment">| id  |    NAME|  balance|</span></span><br><span class="line"><span class="comment">|   1 │     张三|    40.00|</span></span><br><span class="line"><span class="comment">|   2 |     李四|    0.00 |</span></span><br><span class="line"><span class="comment">|   3 |     王五|   100.00|</span></span><br><span class="line"><span class="comment">+--- -+--------+- ------ +</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#事务B</span><br><span class="line"><span class="keyword">begin</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">for</span> <span class="keyword">update</span> nowait;</span><br><span class="line">#报错返回</span><br><span class="line">#ERROR <span class="number">3572</span> (HYO00): Statement aborted because lock(s) could <span class="keyword">not</span> be acquired immediately <span class="keyword">and</span> NOMAIT <span class="keyword">is</span> set.</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">skip</span> locked;</span><br><span class="line"># 因为事务A获得X锁，所以查到的记录是空的<span class="operator">~</span></span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (o<span class="number">.00</span> sec)</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#Query Ok,o <span class="keyword">rows</span> affected ( sec)</span><br></pre></td></tr></table></figure><h4 id="2-写操作"><a href="#2-写操作" class="headerlink" title="2. 写操作"></a>2. 写操作</h4><p>平常所用到的写操作无非是 <code>DELETE</code>、<code>UPDATE</code>、<code>INSERT </code>这三种:</p><ul><li><code>DELETE</code>：对一条记录做DELETE操作的过程其实是先在<code>B+</code>树中定位到这条记录的位置，然后获取这条记录的<code>X锁</code>，再执行<code>delete mark</code>操作。也可以把这个定位待删除记录在B+树中位置的过程看成是一个获取<code>X锁</code>的<code>锁定读</code>。</li><li><code>UPDATE</code>︰在对一条记录做UPDATE操作时分为三种情况:<ul><li>情况1: 未修改该记录的键值，并且被更新的列占用的存储空间在修改前后未发生变化。<br>则先在<code>B+</code>树中定位到这条记录的位置，然后再获取一下记录的<code>X锁</code>，最后在原记录的位置进行修改操作。也可以把这个定位待修改记录在<code>B+</code>树中位置的过程看成是一个获取<code>X锁</code>的<code>锁定读</code>。</li><li>情况2∶未修改该记录的键值，并且至少有一个被更新的列占用的存储空间在修改前后发生变化。<br>则先在<code>B+</code>树中定位到这条记录的位置，然后获取一下记录的<code>X锁</code>，将该记录<code>彻底删除掉</code>（就是把记录彻底移入垃圾链表)，最后再插入一条新记录。这个定位待修改记录在B+树中位置的过程看成是一个<code>获取X锁的锁定读</code>，新插入的记录由<code>INSERT</code>操作提供的<code>隐式锁</code>进行保护。</li><li>情况3∶ 修改了该记录的键值，则相当于在原记录上做<code>DELETE</code>操作之后再来一次<code>INSERT</code>操作，加锁操作就需要按照<code>DELETE</code>和<code>INSERT</code>的规则进行了。（同情况2）</li></ul></li><li><code>INSERT </code>：&#x3D;&#x3D;一般情况下，新插入一条记录的操作并不加锁&#x3D;&#x3D;，通过一种称之为<code>隐式锁</code>的结构来保护这条新插入的记录在本事务提交前不被别的事务访问。</li></ul><blockquote><p>分析：因为插入之前就没有要锁的记录，所以也就不需要加X锁了</p></blockquote><h3 id="3-2-从数据操作的粒度划分-表级锁、页级锁、行锁"><a href="#3-2-从数据操作的粒度划分-表级锁、页级锁、行锁" class="headerlink" title="3.2 从数据操作的粒度划分:表级锁、页级锁、行锁"></a>3.2 从数据操作的粒度划分:表级锁、页级锁、行锁</h3><p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很<code>耗资源</code>的事情（涉及获取、检查、释放锁等动作)。因此数据库系统需要在<code>高并发响应</code>和<code>系统性能</code>两方面进行平衡，这样就产生了“<code>锁粒度</code>(Lock granularity)”的概念。</p><p>对一条记录加锁影响的也只是这条记录而已，我们就说这个锁的粒度比较细；其实一个事务也可以在<code>表级别</code>进行加锁，自然就被称之为<code>表级锁</code>或者<code>表锁</code>，对一个表加锁影响整个表中的记录，我们就说这个锁的粒度比较粗。锁的粒度主要分为<code>表级锁</code>、<code>页级锁</code>和<code>行锁</code>。</p><h4 id="1-表锁-Table-Lock"><a href="#1-表锁-Table-Lock" class="headerlink" title="1. 表锁(Table Lock)"></a>1. 表锁(Table Lock)</h4><p>该锁会锁定整张表，它是MySQL中最基本的锁策略，并<code>不依赖于存储引擎</code>（不管你是MySQL的什么存储引擎，对于表锁的策略都是一样的)，并且表锁是<code>开销最小</code>的策略(因为粒度比较大)。由于表级锁一次会将整个表锁定，所以可以很好的<code>避免死锁</code>问题。当然，锁的粒度大所带来最大的负面影响就是出现锁资源争用的概率也会最高，导致<code>并发率大打折扣</code>。</p><h5 id="①-表级别的S锁、X锁"><a href="#①-表级别的S锁、X锁" class="headerlink" title="① 表级别的S锁、X锁"></a><font color=orange>① 表级别的S锁、X锁</font></h5><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的<code>S锁</code>或者<code>X锁</code>的。在对某个表执行一些诸如<code>ALTER TABLE</code>、<code>DROP TABLE</code>这类的<code>DDL</code>语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行DDL语句也会发生阻塞。这个过程其实是通过在<code>server层</code>使用一种称之为<code>元数据锁</code>(英文名: <code>Metadata Locks</code>，简称<code>MDL</code>）结构来实现的。</p><p>&#x3D;&#x3D;一般情况下，不会使用InnoDB存储引擎提供的表级别的 <code>S锁</code> 和 <code>X锁</code>&#x3D;&#x3D;  (因为InnoDB支持更小粒度的行锁~)。只会在一些特殊情况下，比方说 <code>崩溃恢复</code> 过程中用到。比如，在系统变量 <code>autocommit=0</code>，<code>innodb_table_locks = 1</code> 时， <code>手动</code> 获取InnoDB存储引擎提供的表t 的 <code>S锁</code> 或者 <code>X锁</code> 可以这么写：</p><ul><li><code>LOCK TABLES t READ</code> ：InnoDB存储引擎会对表 t 加表级别的<code>S锁</code> 。</li><li><code>LOCK TABLES t WRITE</code> ：InnoDB存储引擎会对表 t 加表级别的<code>X锁</code> 。</li></ul><p>不过尽量避免在使用InnoDB存储引擎的表上使用 <code>LOCK TABLES</code> 这样的手动锁表语句，它们并不会提供什么额外的保护，只是会降低并发能力而已。InnoDB的厉害之处还是实现了更细粒度的 <code>行锁</code> ，关于InnoDB表级别的 S锁 和 X锁 大家了解一下就可以了</p><p><strong>举例：</strong> 下面我们讲解MylSAM引擎下的表锁。</p><ul><li>步骤1：创建表并添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mylock(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY auto_increment,NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">)ENGINE myisam;#存储引擎使用InnoDB也可以，只是不建议</span><br><span class="line"></span><br><span class="line">#插入一条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mylock(NAME) <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#查询表中所有的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mylock;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+----+------+</span></span><br><span class="line"><span class="comment">| id | NAME |</span></span><br><span class="line"><span class="comment">+----+------+</span></span><br><span class="line"><span class="comment">|  1 | a    |</span></span><br><span class="line"><span class="comment">+----+------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>步骤2：查看表上加过的锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES;#主要关注In_use字段的值 <span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"><span class="comment">/*部分输出</span></span><br><span class="line"><span class="comment">SHOW OPEN TABLES;</span></span><br><span class="line"><span class="comment">+--------------------+---------------------------+--------+-------------+</span></span><br><span class="line"><span class="comment">| Database           | Table                     | In_use | Name_locked |</span></span><br><span class="line"><span class="comment">+--------------------+---------------------------+--------+-------------+</span></span><br><span class="line"><span class="comment">| atguigudb3         | user1                     |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | tablespace_files          |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | column_statistics         |      0 |           0 |</span></span><br><span class="line"><span class="comment">| atguigudb3         | account                   |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | table_stats               |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | check_constraints         |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | view_table_usage          |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | tables_priv               |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | column_type_elements      |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | foreign_key_column_usage  |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | time_zone_name            |      0 |           0 |</span></span><br><span class="line"><span class="comment">.........................................................................</span></span><br><span class="line"><span class="comment">| information_schema | TABLES                    |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | time_zone_transition_type |      0 |           0 |</span></span><br><span class="line"><span class="comment">| mysql              | tablespaces               |      0 |           0 |</span></span><br><span class="line"><span class="comment">+--------------------+---------------------------+--------+-------------+</span></span><br><span class="line"><span class="comment">61 rows in set (0.01 sec)                </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的结果表明，当前数据库中没有被锁定的表。</p></blockquote><ul><li>步骤3：手动增加表锁命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLES t READ:#存储引擎会对表t加表级别的共享锁。共享锁也叫读锁或S锁(Share的缩写)</span><br><span class="line">LOCK TABLES t WRITE:#存储引擎会对表t加表级别的排他锁。排它锁也叫独占锁、写锁或X锁(是eXclusive的缩写)</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> lock tables mylock write;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> Database   <span class="operator">|</span> <span class="keyword">Table</span>  <span class="operator">|</span> In_use <span class="operator">|</span> Name_locked <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> atguigudb3 <span class="operator">|</span> mylock <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+--------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>步骤4：释放锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#释放锁</span><br><span class="line">unlock tables;#释放当前加锁的表</span><br></pre></td></tr></table></figure><ul><li>步骤5：加读锁</li></ul><p>为mylock表加read锁(读阻塞写)，观察阻塞的情况，流程如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335780.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################SessonA中########################################</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">begin;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">lock tables mylock <span class="built_in">read</span>;<span class="comment">#为表加上读锁</span></span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from mylock;<span class="comment">#自己可读</span></span></span><br><span class="line">+----+------+</span><br><span class="line">| id | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | a    |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mylock <span class="built_in">set</span> name = <span class="string">&#x27;a1&#x27;</span> <span class="built_in">where</span> <span class="built_in">id</span> = 1; <span class="comment">#自己不可写</span></span></span><br><span class="line">ERROR 1099 (HY000): Table &#x27;mylock&#x27; was locked with a READ lock and can&#x27;t be updated</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from account; <span class="comment"># 不可操作其他表</span></span></span><br><span class="line">ERROR 1100 (HY000): Table &#x27;account&#x27; was not locked with LOCK TABLES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################sessionB###############################</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from mylock;<span class="comment">#其他人可以读</span></span></span><br><span class="line">+----+------+</span><br><span class="line">| id | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | a    |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mylock <span class="built_in">set</span> name = <span class="string">&#x27;a2&#x27;</span> <span class="built_in">where</span> <span class="built_in">id</span> = 1; <span class="comment">#其他人不可写，需要等待</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">阻塞....</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################SessionA##########################</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">unlock tables; <span class="comment">#释放锁</span></span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################SessionB#########################</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mylock <span class="built_in">set</span> name = <span class="string">&#x27;a2&#x27;</span> <span class="built_in">where</span> <span class="built_in">id</span> = 1;<span class="comment">#获取到锁，进行写操作</span></span></span><br><span class="line">Query OK, 1 row affected (13.41 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from mylock;<span class="comment"># 数据已经变更</span></span></span><br><span class="line">+----+------+</span><br><span class="line">| id | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | a2   |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>步骤6∶加写锁</li></ul><p>为mylock表加write锁，观察阻塞的情况，流程如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335828.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################SessionA########################################</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">lock tables mylock write; <span class="comment">#为表上加写锁</span></span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from mylock; <span class="comment">#自己可用读</span></span></span><br><span class="line">+----+------+</span><br><span class="line">| id | NAME |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | a1   |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mylock <span class="built_in">set</span> name = <span class="string">&#x27;a2&#x27;</span> <span class="built_in">where</span> <span class="built_in">id</span> = 1; <span class="comment">#自己可以写</span></span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from account; <span class="comment">#自己无法操作其他表</span></span></span><br><span class="line">ERROR 1100 (HY000): Table &#x27;account&#x27; was not locked with LOCK TABLES</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################SessionB##################################</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from mylock; <span class="comment">#其他人不可以读</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">阻塞...</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mylock <span class="built_in">set</span> name = <span class="string">&#x27;a3&#x27;</span> <span class="built_in">where</span> <span class="built_in">id</span> = 1; <span class="comment">#其他人不可以写</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">阻塞...</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from account; <span class="comment">#可以操作其他表</span></span></span><br><span class="line">+----+--------+---------+</span><br><span class="line">| id | name   | balance |</span><br><span class="line">+----+--------+---------+</span><br><span class="line">|  1 | abc    |      40 |</span><br><span class="line">|  2 | 李四   |       0 |</span><br><span class="line">|  3 | 王五   |     100 |</span><br><span class="line">|  4 | 马六   |    1000 |</span><br><span class="line">|  5 | 张三   |    6666 |</span><br><span class="line">+----+--------+---------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><strong>总结：</strong><br><font color=red>MylSAM在执行查询语句(SELECT)前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁</font>。InnoDB存储引擎是不会为这个表添加表级别的读锁或者写锁的。</p><p>MySQL的表级锁有两种模式：(以MyISAM表进行操作的演示)</p><ul><li>表共享读锁(Table Read Lock)</li><li>表独占写锁(Table Write Lock)</li></ul><table><thead><tr><th align="center">锁类型</th><th align="center">自己可读</th><th align="center">自己可写</th><th align="center">自己可操作其他表</th><th align="center">他人可读</th><th align="center">他人可写</th></tr></thead><tbody><tr><td align="center">读锁</td><td align="center">是</td><td align="center">否</td><td align="center">否</td><td align="center">是</td><td align="center">否，需等待</td></tr><tr><td align="center">写锁</td><td align="center">是</td><td align="center">是</td><td align="center">否</td><td align="center">否，需等待</td><td align="center">否，需等待</td></tr></tbody></table><h5 id="②-意向锁-（intention-lock）"><a href="#②-意向锁-（intention-lock）" class="headerlink" title="② 意向锁 （intention lock）"></a><font color=orange>② 意向锁 （intention lock）</font></h5><p>InnoDB 支持 <code>多粒度锁</code>（multiple granularity locking） ，它允许 <code>行级锁</code> 与 <code>表级锁</code> 共存，而<code>意向锁</code>就是其中的一种 <code>表锁</code> 。</p><ul><li>意向锁的存在是为了协调行锁和表锁的关系，支持多粒度（表锁与行锁）的锁并存。</li><li>意向锁是一种&#x3D;&#x3D;不与行级锁冲突的表级锁&#x3D;&#x3D;，这一点非常重要。</li><li>表明“某个事务正在某些行持有了锁或该事务准备去持有锁”</li></ul><p>意向锁分为两种：</p><ul><li><strong>意向共享锁</strong>（intention shared lock, IS）：事务有意向对表中的某些行加<code>共享锁</code>（S锁）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><ul><li><strong>意向排他锁</strong>（intention exclusive lock, IX）：事务有意向对表中的某些行加<code>排他锁</code>（X锁）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>即：&#x3D;&#x3D;意向锁是由存储引擎 <code>自己维护的</code> ，用户无法手动操作意向锁&#x3D;&#x3D;，在为数据行加共享 &#x2F; 排他锁之前，InooDB 会先获取该数据行 <code>所在数据表的对应意向锁</code> 。</p><p><strong><font color=blue>1、意向锁要解决的问题</font></strong></p><p>现在有两个事务，分别是T1和T2，其中T2试图在该表级别上应用共享或排它锁，如果没有意向锁存在，那么T2就需要去检查各个页或行是否存在锁；如果存在意向锁，那么此时就会受到由T1控制的<code>表级别意向锁的阻塞</code>。T2在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。简单来说就是<code>给更大一级别的空间示意里面是否已经上过锁</code>。</p><p>在数据表的场景中，<font color=red>如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表已经有人上过排它锁了</font>，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排他锁即可。</p><ul><li>如果事务想要获得数据表中某些记录的共享锁，就需要在数据表上添加意向共享锁。</li><li>如果事务想要获得数据表中某些记录的排他锁，就需要在数据表上添加意向排他锁</li></ul><p>这时，意向锁会告诉其他事务已经有人锁定了表中的某些记录</p><p>举例：事务的隔离级别默认为Repeatable-Read，如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 创建表teacher，插入<span class="number">6</span>条数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher`(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `teacher` <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>),</span><br><span class="line">(<span class="number">2</span> , <span class="string">&#x27;lisi&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;wangwu&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;zhaoliu&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;songhongkang&#x27;</span>),</span><br><span class="line">(<span class="number">6</span> , <span class="string">&#x27;leifengyang&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zhangsan     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> lisi         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> wangwu       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> zhaoliu      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> songhongkang <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> leifengyang  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 假设事务A获取了某一行的排他锁，并未提交</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"># 事务B想要获取teacher表的表读锁，语句如下。</span><br><span class="line"><span class="keyword">begin</span> ;</span><br><span class="line">LOCK TABLES teacher READ;</span><br><span class="line">#阻塞...</span><br></pre></td></tr></table></figure><p>因为共享锁与排他锁互斥，所以事务B在试图对teacher表加共享锁的时候，必须保证两个条件</p><p>（1）当前没有其他事务持有teacher表的排他锁</p><p>（2）当前没有其他事务持有teacher 表中任意一行的排他锁。</p><p>为了检测是否满足第二个条件，事务B必须在确保teacher表不存在任何排他锁的前提下，去检测表中的每一行是否存在排他锁。很明显这是一个效率很差的做法，但是有了意向锁之后，情况就不一样了。</p><p>意向锁是怎么解决这个问题的呢？首先需要知道意向锁之间的兼容互斥性，如下所示：</p><table><thead><tr><th>兼容性</th><th>意向共享锁(lS)</th><th>意向排他锁(IX)</th></tr></thead><tbody><tr><td>意向共享锁(IS)</td><td>兼容</td><td>兼容</td></tr><tr><td>意向排他锁(IX)</td><td>兼容</td><td>兼容</td></tr></tbody></table><p>即意向锁之间是互相兼容的，虽然意向锁和自家兄弟互相兼容，但是它会与普通的排他&#x2F;共享锁互斥。</p><table><thead><tr><th>兼容性</th><th>意向共享锁(lS)</th><th>意向排他锁(IX)</th></tr></thead><tbody><tr><td>共享锁(S)</td><td>兼容</td><td>互斥</td></tr><tr><td>排他锁(X)</td><td>互斥</td><td>互斥</td></tr></tbody></table><blockquote><p>注意这里的排他&#x2F;共享锁指的都是表锁，&#x3D;&#x3D;意向锁不会与行级的共享&#x2F;排他锁互斥&#x3D;&#x3D;。 可以把意向锁看做是一种行级锁的标记</p></blockquote><p>回到刚才teacher表的例子。事务A获取了某一行的排他锁，并未提交:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>此时 teacher表存在两把锁： teacher表上的意向排他锁与id为6的数据行上的排他锁。事务B想要获取teacher表的共享锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">LOCK TABLES teacher READ;</span><br></pre></td></tr></table></figure><p>此时事务B检测事务A持有teacher 表的意向排他锁，就可以得知事务A必然持有该表中某些数据行的排他锁，那么事务B对teacher表的加锁请求就会被<code>排斥</code>(<code>阻塞</code>)，而<code>无需去检测</code>表中的每一行数据是否存在排他锁。  </p><p><strong><font color=blue>2、意向锁的并发性</font></strong><br><font color=red>意向锁不会与行级的共享&#x2F;排他锁互斥！</font>正因为如此，意向锁并不会影响到多个事务对不同数据行加排他锁时的并发性。(如果互斥，那么行级锁直接就退化成表锁了，就没有什么优势了~)</p><p>我们扩展一下上面teacher表的例子来概括一下意向锁的作用（一条数据从被锁定到被释放的过程中，可能存在多种不同锁，但是这里只着重表现意向锁)</p><p>**<font color=green>① </font>**事务A先获取了某一行的排他锁，并未提交:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>**<font color=green>② </font>**事务A获取了teacher表上的意向排他锁，事务A获取了id为6的数据行上的排他锁。之后事务B想要获取teacher表的共享锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">LOCK TABLES teacher READ ;</span><br></pre></td></tr></table></figure><p>③ 事务B<code>检测到</code>事务A持有teacher表的<code>意向排他锁</code>。事务B对teacher表的加锁请求被<code>阻塞</code>(排斥)。最后事务C也想获取teacher表中某一行的排他锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>事务C申请teacher表的意向排他锁。事务C检测到事务A持有teacher表的意向排他锁。<code>因为意向锁之间并不互斥</code>，所以事务C获取到了teacher表的意向排他锁。因为id为5的数据行上不存在任何排他锁，最终事务C成功获取到了该数据行上的<code>排他锁</code>。</p><p><strong>从上面的案例可以得到如下结论：</strong></p><ol><li>InnoDB支持<code>多粒度锁</code>，特定场景下，&#x3D;&#x3D;行级锁可以与表级锁共存&#x3D;&#x3D;。</li><li>意向锁之间互不排斥，但除了IS与S兼容外，<code>意向锁会与共享锁 / 排他锁互斥</code>。</li><li>IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。</li><li>意向锁在保证并发性的前提下，实现了<code>行锁和表锁共存</code>且<code>满足事务隔离性</code>的要求。</li></ol><h5 id="③-自增锁（AUTO-INC锁）"><a href="#③-自增锁（AUTO-INC锁）" class="headerlink" title="③ 自增锁（AUTO-INC锁）"></a><font color=orange>③ 自增锁（AUTO-INC锁）</font></h5><p>在使用MySQL过程中，我们可以为表的某个列添加 <code>AUTO_INCREMENT </code>属性。举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>由于这个表的id字段声明了AUTO_INCREMENT，意味着在书写插入语句时不需要为其赋值，SQL语句修改如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `teacher` (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>), (<span class="string">&#x27;lisi&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上边的插入语句并没有为id列显式赋值，所以系统会自动为它赋上递增的值，结果如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+----+----------+</span></span><br><span class="line"><span class="comment">| id | name |</span></span><br><span class="line"><span class="comment">+----+----------+</span></span><br><span class="line"><span class="comment">| 1 | zhangsan |</span></span><br><span class="line"><span class="comment">| 2 | lisi |</span></span><br><span class="line"><span class="comment">+----+----------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>现在看到的上面插入数据只是一种简单的插入模式，所有插入数据的方式总共分为三类，分别是“ <code>Simple inserts</code> ”，“ <code>Bulk inserts</code> ”和“ <code>Mixed-mode inserts</code> ”。</p><p><strong>1. “Simple inserts” （简单插入）</strong><br>可以 <code>预先确定要插入的行数</code> （当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行<code>INSERT…VALUES()</code> 和 <code>REPLACE</code> 语句。比如我们上面举的例子就属于该类插入，已经确定要插入的行数。</p><p><strong>2. “Bulk inserts” （批量插入）</strong><br><code>事先不知道要插入的行数</code> （和所需自动递增值的数量）的语句。比如 <code>INSERT … SELECT</code> ， <code>REPLACE … SELECT</code> 和<code>LOAD DATA</code>语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列分配一个新值。</p><p><strong>3. “Mixed-mode inserts” （混合模式插入）</strong><br>这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如 <code>INSERT INTO teacher (id,name) VALUES (1,‘a’), (NULL,‘b’), (5,‘c’), (NULL,‘d’); </code>只是指定了部分id的值。另一种类型的“混合模式插入”是 <code>INSERT … ON DUPLICATE KEY UPDATE</code> 。</p><p>对于上面数据插入的案例，MySQL中采用了<code>自增锁</code>的方式来实现，&#x3D;&#x3D;AUTO-INC锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁&#x3D;&#x3D;，在执行插入语句时就在表级别加一个AUTO-INC锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INC锁释放掉。&#x3D;&#x3D;一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞&#x3D;&#x3D;，可以保证一个语句中分配的递增值是连续的。也正因为此，其<code>并发性显然并不高</code>，&#x3D;&#x3D;当我们向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争&#x3D;&#x3D;，这样的并发潜力其实是很低下的，所以InnoDB通过<code>innodb_autoinc_lock_mode</code>的不同取值来提供不同的锁定机制，来显著提高SQL语句的可伸缩性和性能。</p><p><strong><font color=blue>innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：（了解）</font></strong></p><p><code>(1) innodb_autoinc_lock_mode = 0(“传统&quot;锁定模式)</code> 在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的时候，对于AUTO-INC锁的争夺会 <code>限制并发</code> 能力。</p><p><code>（2) innodb_autoinc_lock_mode = 1(“连续”锁定模式)</code> 在 MySQL 8.0 之前，连续锁定模式是 默认 的。</p><p>在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT …SELECT，REPLACE … SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。</p><p>对于“Simple inserts”（要插入的行数事先已知），则通过在<code> mutex（轻量锁）</code> 的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。</p><p><code>（3）innodb_autoinc_lock_mode = 2(“交错”锁定模式)</code></p><p>从 MySQL 8.0 开始，交错锁定模式是 <code>默认</code> 的。</p><p>在这种锁定模式下，所有类INSERT语句都不会使用表级AUTO-INC锁，并且可以同时执行多个语句。这是最快和最可扩展的锁定模式，但是当使用基于语句的复制或恢复方案时，<code>从二进制日志重播SQL语句时，这是不安全的</code>。</p><p>在此锁定模式下，自动递增值保证在所有并发执行的所有类型的insert语句中是<code>唯一</code>且<code>单调递增</code>的。但是，由于多个语句可以同时生成数字(即，跨语句交叉编号），<code>为任何给定语句插入的行生成的值可能不是连续的</code>。</p><p>如果执行的语句是”simple inserts”，其中要插入的行数已提前知道，除了“Mixed-mode inserts”之外，为单个语句生成的数字不会有间隙。然而，当执行“bulk inserts”时，在由任何给定语句分配的自动递增值中可能存在间隙。</p><h5 id="④-元数据锁（MDL锁）"><a href="#④-元数据锁（MDL锁）" class="headerlink" title="④ 元数据锁（MDL锁）"></a><font color=orange>④ 元数据锁（MDL锁）</font></h5><p>MySQL5.5引入了<code>meta data lock</code>，简称<code>MDL</code>锁，属于表锁范畴。MDL的作用是，保证读写的正确性。比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个<code>表结构做变更</code>，增加了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的</p><p>因此，&#x3D;&#x3D;当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁&#x3D;&#x3D;。</p><p>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。&#x3D;&#x3D;不需要显式使用&#x3D;&#x3D;，在访问一个表的时候会被自动加上。</p><p><strong>举例：元数据锁的使用场景模拟</strong></p><ul><li>会话A：从表中查询数据</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335043.png" alt="image-20230125165020157"></p><ul><li>会话B：修改表结构，增加新列</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335170.png" alt="image-20230125165055077"></p><ul><li>会话C：查看当前MySQL的进程，可以得出B中的阻塞就是因为A为teacher加了MDL锁</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335683.png" alt="image-20230125163142559"></p><ul><li>在会话B中结束修改，进行读操作</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335772.png" alt="image-20230125163856580"></p><ul><li>B中之前的所有进行提交，重新开启事务尽心修改，同时C中也开启一个事务进行查询~</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335815.png"></p><p>可以看出会话B被阻塞，这是由于会话A拿到了teacher表的<code>元数据读锁</code>，会话B想申请teacher表的<code>元数据写锁</code>，由于&#x3D;&#x3D;读写锁互斥&#x3D;&#x3D;，会话B需要等待会话A释放元数据锁才能执行。而会话C要在表teacher上新申请MDL读锁的请求也会被<code>会话B</code> 阻塞。</p><p>前面说了，所有对表的增删改查操作都需要先申请MDL读锁，现在就都被阻塞了，等于这个表现在完全不可读写了，&#x3D;&#x3D;并发性大大降低&#x3D;&#x3D;！！！这也就是元数据锁可能带来的问题~</p><h4 id="2-InnoDB中的行锁"><a href="#2-InnoDB中的行锁" class="headerlink" title="2. InnoDB中的行锁"></a>2. InnoDB中的行锁</h4><p>行锁(Row Lock)也称为记录锁，顾名思义，就是锁住某一行（某条记录row)。需要的注意的是，MySQL服务器层并没有实现行锁机制，&#x3D;&#x3D;行级锁只在存储引擎层实现&#x3D;&#x3D;。</p><p><strong>优点：</strong> 锁定力度小，发生<code>锁冲突概率低</code>，可以实现的<code>并发度高</code>。<br><strong>缺点：</strong> 对于<code>锁的开销比较大</code>，加锁会比较慢，容易出现<code>死锁</code>情况。</p><p><font color=red>InnoDB与MylSAM的最大不同有两点：一是支持事务(TRANSACTION)；二是采用了行级锁。</font></p><p><font color=blue>演示环境搭建</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  class <span class="type">varchar</span> (<span class="number">10</span>) ,<span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">)Engine<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"># 插入几条记录</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span> ,<span class="string">&#x27;一班&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;李四&#x27;</span> ,<span class="string">&#x27;一班&#x27;</span>),</span><br><span class="line">( <span class="number">8</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;二班&#x27;</span>),</span><br><span class="line">( <span class="number">15</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;二班&#x27;</span>),</span><br><span class="line">(<span class="number">20</span>, <span class="string">&#x27;钱七&#x27;</span>,<span class="string">&#x27;三班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">| id | name   | class  |</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">|  1 | 张三   | 一班   |</span></span><br><span class="line"><span class="comment">|  3 | 李四   | 一班   |</span></span><br><span class="line"><span class="comment">|  8 | 王五   | 二班   |</span></span><br><span class="line"><span class="comment">| 15 | 赵六   | 二班   |</span></span><br><span class="line"><span class="comment">| 20 | 钱七   | 三班   |</span></span><br><span class="line"><span class="comment">+----+--------+--------+</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>student表中的聚簇索引的简图如下所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335858.png" alt="image-20230125202318828"></p><p>这里把B+树的索引结构做了一个超级简化，只把索引中的记录给拿了出来，下面看看都有哪些常用的行锁类型。</p><h5 id="①-记录锁（Record-Locks）"><a href="#①-记录锁（Record-Locks）" class="headerlink" title="① 记录锁（Record Locks）"></a><font color=orange>① 记录锁（Record Locks）</font></h5><p>记录锁也就是仅仅把一条记录锁上，官方的类型名称为： <code>LOCK_REC_NOT_GAP</code>。比如把id值为8的那条记录加一个记录锁的示意图如图所示。仅仅是锁住了id值为8的记录，对周围的数据没有影响</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335945.png" alt="image-20230125202950342"></p><p>举例如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335991.png" alt="image-20230125203029242"></p><p>代码演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">###############################SessionA###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;张三1&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; #为id<span class="operator">=</span><span class="number">1</span>的记录加X型的行锁</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">###############################SessionB###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode; </span><br><span class="line">#阻塞...因为sessonA中的事务对该记录了X锁</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; #执行超时</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;李四1&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>; #为id<span class="operator">=</span><span class="number">3</span>的记录加X型的锁</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;张三2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">#阻塞...</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; #执行超时</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###############################SessionA###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>; #提交</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">###############################SessionB###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;张三2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; #再次尝试获取X锁，执行成功</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">5.74</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三<span class="number">2</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四<span class="number">1</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> 钱七    <span class="operator">|</span> 三班   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>记录锁是有S锁和X锁之分的，称之为 <code>S型记录锁</code> 和 <code>X型记录锁</code> 。</p><ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul><h5 id="②-间隙锁（Gap-Locks）"><a href="#②-间隙锁（Gap-Locks）" class="headerlink" title="② 间隙锁（Gap Locks）"></a><font color=orange>② 间隙锁（Gap Locks）</font></h5><blockquote><p>对于repeatable read，sql标准没解决幻读，MySQL中解决了幻读</p></blockquote><p>MySQL在 <code>REPEATABLE READ</code> 隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用 <code>MVCC</code>方案解决，也可以采用 <code>加锁</code> 方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些 <code>幻影记录</code> 加上 <code>记录锁</code> 。InnoDB提出了一种称之为<code>Gap Locks</code> 的锁，官方的类型名称为： <code>LOCK_GAP</code>，我们可以简称为 <code>gap锁</code> 。</p><p>比如，把id值为5的那条记录加一个gap锁的示意图如下。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335196.png"></p><p>图中id值为5的记录加了gap锁，意味着 <code>不允许别的事务在id值为5的记录所在的间隙插入新记录</code> ，其实就是id列的值<code>(3, 8)</code>这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为4的新记录，它定位到该条新记录在id为5的间隙锁的范围内，所以就会阻塞插入操作，直到拥有这个gap锁的事务提交了之后，id列的值在区间(3, 8)中的新记录才可以被插入。</p><p><font color=red>gap锁的提出仅仅是为了防止插入幻影记录而提出的</font>。虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用是相同的。而且&#x3D;&#x3D;如果对一条记录加了gap锁&#x3D;&#x3D;〈不论是共享gap锁还是独占gap锁)，&#x3D;&#x3D;并不会限制其他事务对这条记录加记录锁或者继续加gap锁&#x3D;&#x3D;。</p><p><strong>举例：</strong></p><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>select * from student where id &#x3D; 5 lock in share mode;</td><td></td></tr><tr><td></td><td>select * from student where id &#x3D; 5 for update;</td></tr></tbody></table><p>这里session 2并不会被堵住。因为表里并没有id&#x3D;5这个记录，因此 session 1加的是间隙锁（3,8)。而session 2也是在这个间隙加的间隙锁。它们有共同的目标，即:保护这个间隙，不允许插入值。但，它们之间是不冲突的。</p><p><strong>注意，</strong>给一条记录加了<code>gap锁</code>只是<code>不允许</code>其他事务往这条记录前边的间隙<code>插入新记录</code>，那对于最后一条记录之后的间隙，也就是student 表中id值为<code>20</code>的记录之后的间隙该咋办呢？也就是说给哪条记录加<code>gap锁</code>才能阻止其他事务插入<code>id值</code>在<code>(20，正无穷)</code>这个区间的新记录呢？这时候我们在讲数据页时介绍的两条伪记录派上用场了：</p><ul><li><code>Infimum</code>记录，表示该页面中最小的记录。</li><li><code>Supremum</code>记录，表示该页面中最大的记录。</li></ul><p>为了实现阻止其他事务插入id值在(20, 正无穷)这个区间的新记录，可以给索引中的最后一条记录，也就是id值为20的那条记录所在页面的<code>Supremum</code>记录加上一个gap锁，如图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335240.png" alt="image-20230125210502347"></p><p><strong><font color=bule>代码演示：</font></strong></p><ul><li>关于X和S锁互斥的知识回顾</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">###############################SessionA###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span> lock <span class="keyword">in</span> share mode; #为id<span class="operator">=</span><span class="number">8</span>的记录加S锁</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 王五   <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">###############################SessionB####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>; # A已经为id<span class="operator">=</span><span class="number">8</span>的加了S锁，B就不能加X锁了</span><br><span class="line"><span class="operator">^</span>C<span class="operator">^</span>C <span class="comment">-- query aborted</span></span><br><span class="line">ERROR <span class="number">1317</span> (<span class="number">70100</span>): Query execution was interrupted</span><br><span class="line"></span><br><span class="line">#################SessionA<span class="operator">&amp;</span>SessionB########################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>间隙锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#############################SessionA#####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># id<span class="operator">=</span><span class="number">5</span>的记录不存在，所以无法加上记录锁<span class="operator">~</span> 对于不存在的记录，加的是间隙锁。（<span class="number">3</span><span class="number">-8</span>）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span> lock <span class="keyword">in</span> share mode; </span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">############################SessionB####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 依旧加的是间隙锁。可以看出共享gap锁和独占gap锁作用相同，而且可以重复加<span class="operator">~</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">##########################SessionC######################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;三班&#x27;</span>); #在间隙锁范围内，无法插入</span><br><span class="line">#阻塞...</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><ul><li>可以这样实现加 id &gt; 20的间隙锁：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">25</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果记录存在，则使用<code>for update</code> 或 <code>lock in share mode</code> 加的就是记录锁，如果记录不存在加的就是间隙锁~</p></blockquote><p>&#x3D;&#x3D;间隙锁的引入，可能会导致&#x3D;&#x3D;同样的语句锁住更大的范围，这其实是影响了并发度的。下面的例子会产生&#x3D;&#x3D;死锁&#x3D;&#x3D;。</p><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>begin; select *from student where id &#x3D; 5 for update;</td><td>begin;select * from student where id &#x3D; 5 for update;</td></tr><tr><td></td><td>INSERT INTO student VALUES(5,’宋红康,‘二班’);阻塞</td></tr><tr><td>INSERT INTO student VALUES(5,‘宋红康’,‘二班’);(ERROR 1213(40001):Deadlock found when trying to get lock; try restarting transaction)</td><td></td></tr></tbody></table><p>① session 1执行select …for update语句，由于id &#x3D; 5这一行并不存在，因此会<code>加上间隙锁(3，8)</code>;<br>② session2执行select … for update语句，同样会<code>加上间隙锁（3，8)</code>，间隙锁之间不会冲突，因此这个语句可以执行成功;<br>③ session 2试图插入一行(5, ‘宋红康’, ‘二班’)，被session 1的间隙锁挡住了，只好<code>进入等待</code>；</p><p>④ session 1试图插入一行(5. 宋红康’二班)，被session2的间隙锁挡住了。至此，两个session陷入<code>死锁</code>。</p><p><strong><font color=bule>代码演示：</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#############################SessionA####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span> lock <span class="keyword">in</span> share mode; #为id<span class="operator">=</span><span class="number">5</span>加间隙锁</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#############################SessionB####################################</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">for</span> <span class="keyword">update</span>; #为id<span class="operator">=</span><span class="number">5</span>加间隙锁</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); #id<span class="operator">=</span><span class="number">7</span>在间隙区间</span><br><span class="line">#阻塞...</span><br><span class="line"></span><br><span class="line">###########################SessionA######################################</span><br><span class="line">#出现了死锁，也可能在B中出现</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;Jane&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); </span><br><span class="line">ERROR <span class="number">1213</span> (<span class="number">40001</span>): Deadlock found <span class="keyword">when</span> trying <span class="keyword">to</span> <span class="keyword">get</span> lock; try restarting transaction</span><br><span class="line"></span><br><span class="line">##########################SessionB##################################</span><br><span class="line">#出现死锁后，按照策略，让A回滚，从而B中的<span class="keyword">Insert</span>执行成功<span class="operator">~</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><font color=red>分析：为什么会出现 死锁呢？</font></p><p>当SessionA中执行Insert，就会造成：B中Insert在等A中的间隙锁的释放~ A中的Insert在等B中间隙锁的释放~ （因为只有释放后，这俩各自的Insert才会继续执行）。从而A和B相互等待，就产生了<code>死锁</code></p><p>那为啥发生死锁后，A执行失败，B又成功执行了呢？(参见 3.6其它锁之:死锁)</p><p>这涉及MySQL的处理死锁机制。当MySQL发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务（将持有最少行级排他锁的事务进行回滚），让其他事务得以继续执行！</p><h5 id="③-临键锁（Next-Key-Locks）"><a href="#③-临键锁（Next-Key-Locks）" class="headerlink" title="③ 临键锁（Next-Key Locks）"></a><font color=orange>③ 临键锁（Next-Key Locks）</font></h5><p>有时候既想 <code>锁住某条记录</code> ，又想 <code>阻止 </code>其他事务在该记录前边的 <code>间隙插入新记录</code> ，所以InnoDB就提出了一种称之为 <code>Next-Key Locks</code> 的锁，官方的类型名称为： <code>LOCK_ORDINARY</code> ，我们也可以简称为<code>next-key锁</code> 。Next-Key Locks是在存储引擎 <code>innodb</code>、事务级别在 <code>可重复读</code> 的情况下使用的数据库锁，innodb默认的锁就是Next-Key locks。</p><p>比如，把id值为8的那条记录加一个next-key锁的示意图如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335320.png"></p><p><code>next-key</code>锁的本质就是一个<code>记录锁</code>和一个<code>gap锁</code>的合体，它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的<code>间隙</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span><span class="number">8</span> <span class="keyword">and</span> id <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p><font color=blue>代码演示</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#############################SessionA####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 为(<span class="number">8</span>，,<span class="number">15</span>]加邻键锁（<span class="number">8</span><span class="number">-15</span>是间隙 <span class="operator">+</span> <span class="number">15</span>记录锁）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">15</span> <span class="keyword">and</span> id <span class="operator">&gt;</span> <span class="number">8</span> <span class="keyword">for</span> <span class="keyword">update</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> 赵六   <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#############################SessionB####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">15</span> lock <span class="keyword">in</span> share mode; #无法获取S锁</span><br><span class="line"><span class="operator">^</span>C<span class="operator">^</span>C <span class="comment">-- query aborted</span></span><br><span class="line">ERROR <span class="number">1317</span> (<span class="number">70100</span>): Query execution was interrupted</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">15</span> <span class="keyword">for</span> <span class="keyword">update</span>; #无法获取X锁</span><br><span class="line"><span class="operator">^</span>C<span class="operator">^</span>C <span class="comment">-- query aborted</span></span><br><span class="line">ERROR <span class="number">1317</span> (<span class="number">70100</span>): Query execution was interrupted</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;Tim&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); #无法在间隙内插入数据</span><br><span class="line"><span class="operator">^</span>C<span class="operator">^</span>C <span class="comment">-- query aborted</span></span><br><span class="line">ERROR <span class="number">1317</span> (<span class="number">70100</span>): Query execution was interrupted</span><br><span class="line">    </span><br><span class="line">###############################SessionA<span class="operator">&amp;</span>SessionB#######################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="④-插入意向锁（Insert-Intention-Locks）"><a href="#④-插入意向锁（Insert-Intention-Locks）" class="headerlink" title="④ 插入意向锁（Insert Intention Locks）"></a><font color=orange>④ 插入意向锁（Insert Intention Locks）</font></h5><p>我们说一个事务在 <code>插入</code> 一条记录时需要判断一下插入位置是不是被别的事务加了 <code>gap锁</code> （ <code>next-key</code>锁也包含 <code>gap锁</code> ），如果有的话，插入操作需要等待，直到拥有 <code>gap锁</code> 的那个事务提交。但是InnoDB &#x3D;&#x3D;规定事务在等待的时候也需要在内存中生成一个锁结构&#x3D;&#x3D;，表明有事务想在某个 <code>间隙</code> 中 插入 <code>新记录</code>，但是现在在等待。InnoDB就把这种类型的锁命名为 <code>Insert Intention Locks</code> ，官方的类型名称为：<code>LOCK_INSERT_INTENTION</code>，我们称为 <code>插入意向锁</code> 。&#x3D;&#x3D;插入意向锁是一种 <code>Gap锁</code> ，不是意向锁&#x3D;&#x3D;，在insert操作时产生。</p><blockquote><p>插入意向锁是在插入一条记录行前，由 INSERT 操作产生的一种间隙锁<br>事实上插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。</p></blockquote><p>插入意向锁是在插入一条记录行前，由&#x3D;&#x3D;INSERT 操作产生的一种间隙锁&#x3D;&#x3D;。该锁用以表示<code>插入意向</code>，当多个事务在同一区间(gap）插入<code>位置不同</code>的多条数据时，事务之间<code>不需要互相等待</code>。假设存在两条值分别为8和15的记录，两个不同的事务分别试图插入值为11和12的两条记录，每个事务在获取插入行上独占的(排他）锁前，都会获取(8，15）之间的间隙锁，但是因为数据行之间并<code>不冲突</code>，所以两个事务之间并不会产生冲突（<code>阻塞等待</code>)。总结来说，插入意向锁的特性可以分成两部分：</p><p>(1）&#x3D;&#x3D;插入意向锁是一种特殊的间隙锁&#x3D;&#x3D;―—间隙锁可以锁定开区间内的部分记录。<br>(2）&#x3D;&#x3D;插入意向锁之间互不排斥&#x3D;&#x3D;，所以即使多个事务在同一区间插入多条记录，只要记录本身(主键、唯一索引)<code>不冲突</code>，那么事务之间就不会出现冲突等待</p><p>注意，虽然插入意向锁中含有意向锁三个字，但是它并不属于意向锁而属于间隙锁，因为意向锁是表锁而插入意向锁是行锁</p><p>比如，把id值为8的那条记录加一个插入意向锁的示意图如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335409.png" alt="image-20230126151811673"></p><p>比如，现在T1为id值为8的记录加了一个gap锁，然后T2和T3分别想向student表中插入id值分别为4、5的两条记录，所以现在为id值为8的记录加的锁的示意图就如下所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335546.png" alt="image-20230126151840355"></p><p>从图中可以看到，由于<code>T1持有gap锁</code>，所以<code>T2和T3</code>需要<code>生成一个插入意向锁</code>的锁结构并且处于<code>等待</code>状态。当T1提交后会把它获取到的锁都释放掉，这样T2和T3就能<code>获取</code>到对应的插入意向锁了(本质上就是把插入意向锁对应锁结构的is_waiting属性改为false)，T2和T3之间也并不会相互阻塞，它们可以<code>同时</code>获取到id值为8的插入意向锁，然后执行插入操作。事实上&#x3D;&#x3D;插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。&#x3D;&#x3D;</p><p><strong><font color=blue>演示-插入意向锁</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">###############################SessionA####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">12</span> <span class="keyword">for</span> <span class="keyword">update</span>; #加间隙锁</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">###############################SessionB####################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;Tim&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); </span><br><span class="line">#阻塞..同时会加插入意向锁</span><br><span class="line"></span><br><span class="line">##############################SessionC###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">11</span>,<span class="string">&#x27;Tim&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>);</span><br><span class="line">#阻塞..同时会加插入意向锁。 可以看出插入意向锁是相互兼容的，毕竟id都不同嘛</span><br><span class="line"></span><br><span class="line">##############################SessionA#################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>; #提交</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#############################SessionB###############################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;Tim&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); #插入成功</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">45.43</span> sec)</span><br><span class="line">##############################SessionC#################################</span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">11</span>,<span class="string">&#x27;Tim&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>); #插入成功</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="3-页锁"><a href="#3-页锁" class="headerlink" title="3. 页锁"></a>3. 页锁</h4><p>页锁就是在 <code>页的粒度</code> 上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。&#x3D;&#x3D;页锁的开销介于表锁和行锁之间，会出现<code>死锁</code>。锁定粒度介于表锁和行锁之间，并发度一般&#x3D;&#x3D;。</p><p>每个层级的锁数量是有限制的，因为锁会占用内存空间， <code>锁空间的大小是有限的</code> 。当某个层级的锁数量超过了这个层级的阈值时，就会进行 <code>锁升级</code> 。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如InnoDB 中<code>行锁升级为表锁</code>，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。</p><p><font color=blue>死锁演示：</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事务A目前锁定了页A，想要锁定页B才可以执行完。</span><br><span class="line">事务B目前锁定了页B，想要锁定页A才可以执行完。</span><br><span class="line">### 死锁</span><br></pre></td></tr></table></figure><h3 id="3-3-从对待锁的态度划分-乐观锁、悲观锁"><a href="#3-3-从对待锁的态度划分-乐观锁、悲观锁" class="headerlink" title="3.3 从对待锁的态度划分:乐观锁、悲观锁"></a>3.3 从对待锁的态度划分:乐观锁、悲观锁</h3><p>从对待锁的态度来看锁的话，可以将锁分成<code>乐观锁</code>和<code>悲观锁</code>，从名字中也可以看出这两种锁是两种看待<code>数据并发的思维方式</code> 。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的 <code>设计思想</code> 。</p><h4 id="1-悲观锁（Pessimistic-Locking）"><a href="#1-悲观锁（Pessimistic-Locking）" class="headerlink" title="1. 悲观锁（Pessimistic Locking）"></a>1. 悲观锁（Pessimistic Locking）</h4><p>悲观锁是一种思想，顾名思义，就是很悲观，对数据被其他事务的修改持保守态度，会通过数据库自身的<code>锁机制</code>来实现，从而保证数据操作的排它性。</p><p>悲观锁总是假设<code>最坏</code>的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 <code>阻塞</code> 直到它拿到锁（&#x3D;&#x3D;共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程&#x3D;&#x3D;）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中 <code>synchronized</code>和 <code>ReentrantLock </code>等独占锁就是悲观锁思想的实现。</p><p><strong><font color=blue>秒杀案例1：</font></strong><br>商品秒杀过程中，库存数量的减少，避免出现<code>超卖</code>的情况。比如，商品表中有一个字段为quantity表示当前该商品的库存量。假设商品为华为mate40，id为1001，quantity&#x3D;100个。如果不使用锁的情况下，操作方法如下所示:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#第<span class="number">1</span>步:查出商品库存</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span> ;</span><br><span class="line">#第<span class="number">2</span>步:如果库存大于<span class="number">0</span>，则根据商品信息生产订单</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (item_id）<span class="keyword">values</span> ( <span class="number">1001</span> ) ;</span><br><span class="line">#第<span class="number">3</span>步:修改商品的库存，num表示购买数量</span><br><span class="line"><span class="keyword">update</span> items <span class="keyword">set</span> quantity <span class="operator">=</span> quantity<span class="operator">-</span>num <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span> ;</span><br></pre></td></tr></table></figure><p>这样写的话，在并发量小的公司没有大的问题，但是如果在 <code>高并发环境</code> 下可能出现以下问题</p><table><thead><tr><th></th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>1</td><td>step1(查询还有100部手机)</td><td>step1(查询还有100部手机)</td></tr><tr><td>2</td><td></td><td>step2(生成订单)</td></tr><tr><td>3</td><td>step2(生成订单)</td><td></td></tr><tr><td>4</td><td></td><td>step3(减库存1)</td></tr><tr><td>5</td><td>step3(减库存2)</td><td></td></tr></tbody></table><p>其中线程B此时已经下单并且减完库存，这个时候线程A依然去执行step3，就可能会造成<code>超卖</code>。</p><p>我们使用悲观锁可以解决这个问题，商品信息从查询出来到修改，中间有一个生成订单的过程，使用悲观锁的原理就是，&#x3D;&#x3D;在查询items信息后就把当前的数据锁定，直到修改完毕后再解锁&#x3D;&#x3D;。那么整个过程中，因为数据被锁定了，就不会出现有第三者来对其进行修改了。而这样做的前提是<code>需要将要执行的SQL语句放在同一个事务中</code>，否则达不到锁定数据行的目的。</p><p><strong>修改如下:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#第<span class="number">1</span>步:查出商品库存</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">#第<span class="number">2</span>步:如果库存大于<span class="number">0</span>，则根据商品信息生产订单</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (item_id)<span class="keyword">values</span>(<span class="number">1001</span>);</span><br><span class="line">#第<span class="number">3</span>步:修改商品的库存，num表示购买数量</span><br><span class="line"><span class="keyword">update</span> items <span class="keyword">set</span> quantity <span class="operator">=</span> quantity<span class="operator">-</span>num <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span> ;</span><br></pre></td></tr></table></figure><p><code>select … for update</code> 是MySQL中悲观锁。 此时在items表中，id为1001的那条数据就被锁定了，其他的要执行<code>select quantity from items where id = 1001 for update;</code>语句的事务必须等本次事务提交之后才能执行。这样可以保证当前的数据不会被其它事务修改。</p><blockquote><p>注意，当执行select quantity from items where id &#x3D; 1001 for update;语句之后，如果在其他事务中执行select quantity from items where id &#x3D; 1001;语句，并不会受第一个事务的影响，仍然可以正常查询出数据。</p></blockquote><p>另外，<font color=red>select … for update语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住（表锁）</font>。</p><blockquote><p>InnoDB 行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据 InnoDB 才使用行级锁，否则 InnoDB 将使用表锁~</p></blockquote><p>悲观锁不适用的场景较多，它存在一些不足，因为悲观锁大多数情况下依靠数据库的锁机制来实现，以保证程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是 <code>长事务</code> 而言，这样的 <code>开销往往无法承受</code>，这时就需要乐观锁。</p><h4 id="2-乐观锁（Optimistic-Locking）"><a href="#2-乐观锁（Optimistic-Locking）" class="headerlink" title="2. 乐观锁（Optimistic Locking）"></a>2. 乐观锁（Optimistic Locking）</h4><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是&#x3D;&#x3D;不采用数据库自身的锁机制，而是通过程序来实现&#x3D;&#x3D;。在程序上，可以采用 <code>版本号机制</code> 或者 <code>CAS机制</code> 实现。&#x3D;&#x3D;乐观锁适用于<code>多读</code>的应用类型，这样可以提高吞吐量&#x3D;&#x3D;。在Java中<code>java.util.concurrent.atomic</code> 包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。</p><p><strong><font color=orange>1. 乐观锁的版本号机制</font></strong></p><p>在表中设计一个 <code>版本字段 version</code> ，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行 <code>UPDATE ... SET version = version + 1 WHERE version=version</code> 。此时如果已经有事务对这条数据进行了更改，修改就不会成功。</p><p>这种方式类似我们熟悉的SVN、CVS版本管理系统，当修改了代码进行提交时，首先会检查当前版本号与服务器上的版本号是否一致，如果一致就可以直接提交，如果不一致就需要更新服务器上的最新代码，然后再进行提交。</p><p><strong><font color=orange>2. 乐观锁的时间戳机制</font></strong></p><p>时间戳和版本号机制一样，也是在更新提交的时候，将<code>当前数据的时间戳和更新之前取得的时间戳</code>进行比较，如果两者一致则更新成功，否则就是版本冲突。</p><p>能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳(版本号或者时间戳)，从而证明当前拿到的数据是否最新。</p><p><font color=blue>秒杀案例2</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#第<span class="number">1</span>步:查出商品库存</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">#第<span class="number">2</span>步:如果库存大于<span class="number">0</span>，则根据商品信息生产订单</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (item_id）<span class="keyword">values</span> (<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">#第<span class="number">3</span>步:修改商品的库存,num表示购买数量</span><br><span class="line"><span class="keyword">update</span> items <span class="keyword">set</span> quantity <span class="operator">=</span> quantity<span class="operator">-</span>num , version <span class="operator">=</span> version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span> <span class="keyword">and</span> version <span class="operator">=</span> #&#123;version&#125; ;</span><br></pre></td></tr></table></figure><p>注意，如果数据表是 <code>读写分离</code> (主写从读)的表，当matser表中写入的数据没有及时同步到slave表中时，会造成更新一直失败的问题。此时需要<code>强制读取master表</code>中的数据（即将select语句放到事务中即可，这时候查询的就是master主库了)</p><p>如果对同一条数据进行 <code>频繁的修改</code> 的话，那么就会出现这么一种场景，每次修改都只有一个事务能更新成功，在业务感知上面就有大量的失败操作。我们把代码修改如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#第<span class="number">1</span>步:查出商品库存</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">#第<span class="number">2</span>步:如果库存大于<span class="number">0</span>，则根据商品信息生产订单</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (item_id)<span class="keyword">values</span>(<span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">#第<span class="number">3</span>步:修改商品的库存，num表示购买数量</span><br><span class="line"><span class="keyword">update</span> items <span class="keyword">set</span> quantity <span class="operator">=</span> quantity<span class="operator">-</span>num <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1001</span> <span class="keyword">and</span> quantity<span class="operator">-</span>num <span class="operator">&gt;</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>这样就会使每次修改都能成功，而且不会出现超卖的现象。</p><p><strong><font color=orange>3. 两种锁的适用场景</font></strong></p><p>从这两种锁的设计思想中，总结一下乐观锁和悲观锁的适用场景：</p><ol><li><p><code>乐观锁</code> 适合 <code>读操作多</code> 的场景，相对来说写的操作比较少。它的优点在于<code>程序实现</code> ，<code>不存在死锁</code> 问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。</p></li><li><p><code>悲观锁</code> 适合 <code>写操作多</code> 的场景，因为写的操作具有 <code>排它性</code> 。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止 <code>读 - 写</code> 和 <code>写 - 写</code> 的冲突。</p></li></ol><p>把乐观锁和悲观锁总结如下图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335691.png" alt="image-20230127145003149"></p><h3 id="3-4-按加锁的方式划分-显式锁、隐式锁"><a href="#3-4-按加锁的方式划分-显式锁、隐式锁" class="headerlink" title="3.4 按加锁的方式划分:显式锁、隐式锁"></a>3.4 按加锁的方式划分:显式锁、隐式锁</h3><h4 id="1-隐式锁"><a href="#1-隐式锁" class="headerlink" title="1. 隐式锁"></a>1. 隐式锁</h4><blockquote><p><strong>回顾</strong></p><p>一个事务在执行<code>INSERT</code>操作时，如果即将插入的<code>间隙</code>已经被其他事务加了<code>gap锁</code>，那么本次<code>INSERT</code>操作会阻塞，并且当前事务会在该间隙上加一个<code>插入意向锁</code>。【被动加锁】</p><p>否则，一般情况下，新插入一条记录的操作并不加锁（后面会推翻这个结论，<font color=red>严格来说是加锁的，隐式锁</font>）【主动加锁】</p></blockquote><p>那如果一个事务首先插入了一条记录（此时并没有在内存生产与该记录关联的锁结构)，然后另一个事务:</p><ul><li>立即使用<code>SELECT … LOCK IN SHARE MODE</code>语句读取这条记录，也就是要获取这条记录的<code>S锁</code>，或者使用<code>SELECT… FOR UPDATE</code>语句读取这条记录，也就是要获取这条记录的<code>X锁</code>，怎么办?<br>如果允许这种情况的发生，那么可能产生<code>脏读</code>问题。</li><li>立即修改这条记录，也就是要获取这条记录的<code>X锁</code>，怎么办?<br>如果允许这种情况的发生，那么可能产生<code>脏写</code>问题。</li></ul><p>这时候前边提过的<code>事务id</code>又要起作用了。把聚簇索引和二级索引中的记录分开看一下：（原理了解即可）</p><p><strong>情景一：</strong>对于聚簇索引记录来说，有一个<code>trx_id </code>隐藏列，该隐藏列记录着最后改动该记录的 <code>事务id</code> 。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的 <code>trx_id</code> 隐藏列代表的的就是当前事务的 <code>事务id</code> ，如果其他事务此时想对该记录添加 <code>S锁</code> 或者 <code>X锁</code> 时，首先会看一下该记录的<code>trx_id</code> 隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就<code>帮助</code>当前事务创建一个 <code>X锁</code> （也就是为当前事务创建一个锁结构， <code>is_waiting</code> 属性是 <code>false</code>），然后自己进入阻塞状态（也就是为自己也创建一个锁结构， <code>is_waiting</code>属性是 <code>true </code>）。<br><strong>情景二：</strong>对于二级索引记录来说，本身并没有<code>trx_id</code> 隐藏列，但是在二级索引页面的 Page Header 部分有一个 <code>PAGE_MAX_TRX_ID</code> 属性，该属性代表对该页面做改动的最大的 <code>事务id</code> ，如果 <code>PAGE_MAX_TRX_ID</code>属性值小于当前最小的活跃 <code>事务id</code> ，那么说明对该页面做修改的事务都已经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记录，然后再重复 <code>情景一</code> 的做法。<br>即：&#x3D;&#x3D;一个事务对新插入的记录可以不显式的加锁（生成一个锁结构），但是由于<code>事务id</code>的存在，相当于加了一个隐式锁&#x3D;&#x3D;。别的事务在对这条记录加<code>S锁</code>或者<code>X锁</code>时，由于隐式锁的存在，会先帮助当前事务生成一个锁结构，然后自己再生成一个锁结构后进入等待状态。隐式锁是一种<code>延迟加锁</code>的机制，从而来减少加锁的数量。</p><p>隐式锁在实际内存对象中并不含有这个锁信息。&#x3D;&#x3D;只有当产生锁等待时，隐式锁转化为显式锁&#x3D;&#x3D;。</p><p>InnoDB的insert操作，对插入的记录不加锁，但是此时如果另一个线程进行当前读，类似以下的用例，整个过程会发生什么呢 ?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">############################SessionA#########################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">12</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="string">&#x27;三班&#x27;</span>); #此时相当于会加个隐式锁</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">###########################SessionC###############################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.data_lock_waits\G; #隐式锁是查不到的</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">##########################SessionB################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student lock <span class="keyword">in</span> share mode;  #可以侧面得出结论，隐式锁是存在的<span class="operator">~</span></span><br><span class="line">#阻塞... #阻塞也会导致A中的隐式锁转为显示锁</span><br><span class="line"></span><br><span class="line">##########################SessionC###################################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.data_lock_waits\G; #查到由隐式锁转的显示锁</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">                          ENGINE: INNODB</span><br><span class="line">       REQUESTING_ENGINE_LOCK_ID: <span class="number">140078105288944</span>:<span class="number">47</span>:<span class="number">4</span>:<span class="number">10</span>:<span class="number">140078009627240</span></span><br><span class="line">REQUESTING_ENGINE_TRANSACTION_ID: <span class="number">421553081999600</span></span><br><span class="line">            REQUESTING_THREAD_ID: <span class="number">49</span></span><br><span class="line">             REQUESTING_EVENT_ID: <span class="number">25</span></span><br><span class="line">REQUESTING_OBJECT_INSTANCE_BEGIN: <span class="number">140078009627240</span></span><br><span class="line">         BLOCKING_ENGINE_LOCK_ID: <span class="number">140078105288088</span>:<span class="number">47</span>:<span class="number">4</span>:<span class="number">10</span>:<span class="number">140078009620736</span></span><br><span class="line">  BLOCKING_ENGINE_TRANSACTION_ID: <span class="number">17430</span></span><br><span class="line">              BLOCKING_THREAD_ID: <span class="number">49</span></span><br><span class="line">               BLOCKING_EVENT_ID: <span class="number">25</span></span><br><span class="line">  BLOCKING_OBJECT_INSTANCE_BEGIN: <span class="number">140078009620736</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>隐式锁的逻辑过程如下：</strong></p><p>A. InnoDB的每条记录中都一个隐含的<code>trx_id</code>字段，这个字段存在于聚簇索引的B+Tree中。<br>B. 在操作一条记录前，首先根据记录中的<code>trx_id</code>检查该事务是否是活动的事务(未提交或回滚)。如果是活动的事务，首先将 &#x3D;&#x3D;隐式锁 转换为 显式锁&#x3D;&#x3D; (就是为该事务添加一个锁)。<br>C. 检查是否有锁冲突，如果有冲突，创建锁，并设置为<code>waiting</code>状态。如果没有冲突不加锁，跳到E。<br>D. 等待加锁成功，被唤醒，或者超时。<br>E. 写数据，并将自己的 <code>事务id</code> 写入trx_id字段。</p><h4 id="2-显式锁"><a href="#2-显式锁" class="headerlink" title="2. 显式锁"></a>2. 显式锁</h4><p>通过特定的语句进行加锁，一般称之为显示加锁，例如:</p><ul><li>显示加共享锁：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ....lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><ul><li>显示加排它锁：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ....<span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><h3 id="3-5-其它锁之：全局锁"><a href="#3-5-其它锁之：全局锁" class="headerlink" title="3.5 其它锁之：全局锁"></a>3.5 其它锁之：全局锁</h3><p>全局锁就是对<code>整个数据库实例</code>加锁。当你需要让整个库处于<code>只读状态</code>的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句(数据的增删改)、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。全局锁的典型使用<code>场景</code>是：做<code>全库逻辑备份</code>。</p><p>全局锁的命令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flush tables <span class="keyword">with</span> read lock</span><br></pre></td></tr></table></figure><h3 id="3-6-其它锁之：死锁"><a href="#3-6-其它锁之：死锁" class="headerlink" title="3.6 其它锁之：死锁"></a>3.6 其它锁之：死锁</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性<code>循环</code>。死锁举例如下：</p><p><strong>举例一：</strong></p><table><thead><tr><th></th><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td>1</td><td>start transaction;<br/>update account set money&#x3D;10 where id&#x3D;1;</td><td>start transaction;</td></tr><tr><td>2</td><td></td><td>update account set money&#x3D;10 where id&#x3D;2:</td></tr><tr><td>3</td><td>update account set money&#x3D;20 where id&#x3D;2:</td><td></td></tr><tr><td>4</td><td></td><td>update account set money&#x3D;20 where id&#x3D;1;</td></tr></tbody></table><p>这时候，事务1在等待事务2释放id&#x3D;2的行锁，而事务2在等待事务1释放id&#x3D;1的行锁。 事务1和事务2在<code>互相等待</code>对方的资源释放，就是进入了<code>死锁</code>状态。当出现死锁以后，有两种策略 ：</p><ul><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数<code>innodb_lock_wait_timeout </code>来设置。</li><li>另一种策略是，发起<code>死锁检测</code>，发现死锁后，主动回滚死锁链条中的某一个事务（<code>将持有最少行级排他锁的事务进行回滚</code>），让其他事务得以继续执行。将参数<code>innodb_deadlock_detect </code>设置为<code>on </code>，表示开启这个逻辑。</li></ul><p>在InnoDB中，innodb_lock_wait_timeout的默认值是<code>50s</code>，意味着如果采用第一个策略，当出现死锁以后,第一个被锁住的线程要过50s才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。</p><p>但是，我们又不可能直接把这个时间设置成一个很小的值，比如1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。</p><p><strong>举例二：</strong></p><p>用户A给用户B转账100，在此同时，用户B也给用户A转账100。这个过程，可能导致死锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#事务<span class="number">1</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">108</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;#操作<span class="number">1</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>);#操作<span class="number">3</span></span><br><span class="line"></span><br><span class="line">#事务<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;#操作<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;#操作<span class="number">4</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335741.png" alt="image-20230127162458138"></p><h4 id="2-产生死锁的必要条件"><a href="#2-产生死锁的必要条件" class="headerlink" title="2. 产生死锁的必要条件"></a>2. 产生死锁的必要条件</h4><ol><li>两个或者两个以上事务</li><li>每个事务都已经持有锁并且申请新的锁</li><li>锁资源同时只能被同一个事务持有或者不兼容</li><li>事务之间因为持有锁和申请锁导致彼此循环等待</li></ol><blockquote><p>死锁的关键在于:两个(或以上)的Session加锁的顺序不一致。</p></blockquote><p><strong><font color=blue>演示—死锁</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#####################################SessionA########################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; #为<span class="number">1</span>d<span class="operator">=</span><span class="number">1</span>的加X锁</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">###################################SessionB########################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>; #为id<span class="operator">=</span><span class="number">3</span>的加X锁</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">######################################SessionA###########################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>; #想要获取id为<span class="number">3</span>的X锁</span><br><span class="line">#阻塞...</span><br><span class="line"></span><br><span class="line">#####################################SessionB####################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; #想要获取id为<span class="number">1</span>的X锁</span><br><span class="line">ERROR <span class="number">1213</span> (<span class="number">40001</span>): Deadlock found <span class="keyword">when</span> trying <span class="keyword">to</span> <span class="keyword">get</span> lock; #出现死锁</span><br><span class="line"></span><br><span class="line">#################################SessionA############################</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>; #阻塞解开，继续执行</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">18.39</span> sec) # 具体死锁为啥会被解开，下面会讲哦<span class="operator">~</span></span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="3-如何处理死锁"><a href="#3-如何处理死锁" class="headerlink" title="3. 如何处理死锁"></a>3. 如何处理死锁</h4><p><font color=orange><strong>方式1：</strong>等待，直到超时( innodb_lock_wait_timeout&#x3D;50s)</font></p><p>即当两个事务互相等待时，当一个事务等待时间超过设置的阈值时，就将其<code>回滚</code>，另外事务继续进行。这种方法简单有效，在innodb中，参数<code>innodb_lock_wait_timeout</code>用来设置超时时间。</p><p>缺点：对于在线服务来说，这个等待时间往往是无法接受的。</p><p>那将此值修改短一些，比如1s，0.1s是否合适？不合适，容易误伤到普通的锁等待。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_lock_wait_timeout&#x27;</span>;;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_lock_wait_timeout <span class="operator">|</span> <span class="number">50</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><font color=orange><strong>方式2：</strong>使用死锁检测进行死锁处理</font></p><p>方式1检测死锁太过被动，innodb还提供了<code>wait-for graph</code>算法来主动进行死锁检测，每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。</p><p>这是一种较为<code>主动的死锁检测机制</code>，要求数据库<code>保存锁的信息链表</code>和<code>事务等待链表</code>两部分信息。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335843.png" alt="image-20230127163322402"></p><p>基于这两个信息，可以绘制wait-for graph 等待图</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335890.png" alt="image-20230127163339663"></p><blockquote><p>死锁检测的原理是构建一个以<code>事务为顶点、锁为边的有向图</code>，判断有向图是否存在<code>环</code>，存在即有死锁</p></blockquote><p>一旦检测到<code>回路</code>、有死锁，这时候InnoDB存储引擎会选择<code>回滚undo量最小的事务</code>，让其他事务继续执行( <code>innodb_deadlock_detect=on</code>表示开启这个逻辑)。</p><p>缺点：每个新的被阻塞的线程，都要判断是不是由于自己的加入导致了死锁，这个操作时间复杂度是O(n)。如果100个并发线程同时更新同一行，意味着要检测100*100&#x3D; 1万次，1万个线程就会有1千万次检测。</p><p><strong>如何解决？</strong></p><ul><li>方式1：关闭死锁检测，但意味着可能会出现大量的超时，会导致业务有损。</li><li>方式2：控制并发访问的数量。比如在中间件中实现对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作</li></ul><blockquote><p>进一步的思路：可以考虑通过<code>将一行改成逻辑上的多行</code>来减少锁冲突。比如，连锁超市账户总额的记录，可以考虑放到多条记录上。账户总额等于这多个记录的值的总和。</p></blockquote><h4 id="4-如何避免死锁"><a href="#4-如何避免死锁" class="headerlink" title="4. 如何避免死锁"></a>4. 如何避免死锁</h4><ul><li><code>合理设计索引</code>，使业务SQL尽可能通过索引定位更少的行，减少锁竞争。</li><li><code>调整业务逻辑SQL执行顺序</code>，避免update&#x2F;delete长时间持有锁的SQL在事务前面。</li><li>避免大事务，<code>尽量将大事务拆成多个小事务来处理</code>，小事务缩短锁定资源的时间，发生锁冲突的几率也更小</li><li><code>在并发比较高的系统中，不要显式加锁</code>，特别是是在事务里显式加锁。如select … for<br>update语句，如果是在事务里运行了start transaction或设置了autocommit等于0，那么就会锁定所查找到的记录</li><li><code>降低隔离级别</code>。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</li></ul><h2 id="4-锁的内存结构"><a href="#4-锁的内存结构" class="headerlink" title="4. 锁的内存结构"></a>4. 锁的内存结构</h2><p>前边说对一条记录加锁的本质就是在内存中创建一个<code>锁结构</code>与之关联，那么是不是一个事务对多条记录加锁，就要创建多个<code>锁结构</code>呢?比如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#事务T1</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><p>理论上创建多个<code>锁结构</code>没问题，但是如果一个事务要获取10000条记录的锁，生成10000个锁结构也太崩溃了! 所以决定在对不同记录加锁时，如果符合下边这些条件的记录会放到一个<code>锁结构</code>中。</p><ul><li>在同一个事务中进行加锁操作</li><li>被加锁的记录在同一个页面中</li><li>加锁的类型是一样的</li><li>等待状态是一样的</li></ul><p><code>InnoDB</code>存储引擎中的<code>锁结构</code>如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335999.png" alt="image-20230127222432726"></p><p>结构解析：</p><ol><li><code>锁所在的事务信息 ：</code></li></ol><p>不论是 <code>表锁</code> 还是 <code>行锁</code> ，都是在事务执行过程中生成的，哪个事务生成了这个 <code>锁结构</code> ，这里就记录这个事务的信息。</p><p>此锁所在的事务信息 在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。</p><ol start="2"><li><code>索引信息 ：</code></li></ol><p>对于 <code>行锁</code> 来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。</p><ol start="3"><li><code>表锁／行锁信息 ：</code></li></ol><p><code>表锁结构</code> 和 <code>行锁结构</code> 在这个位置的内容是不同的：</p><ul><li>表锁：记载着是对哪个表加的锁，还有其他的一些信息。</li><li>行锁：记载了三个重要的信息：<ul><li><code>Space ID</code> ：记录所在表空间。</li><li><code>Page Number</code> ：记录所在页号。</li><li><code>n_bits</code> ：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，<code>这个n_bits 属性代表使用了多少比特位</code></li></ul></li></ul><blockquote><p>n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后也不至于重新分配锁结构</p></blockquote><ol start="4"><li><code>type_mode ：</code></li></ol><p>这是一个32位的数，被分成了 <code>lock_mode </code>、 <code>lock_type </code>和 <code>rec_lock_type </code>三个部分，如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202301272335161.png" alt="image-20230127222846678"></p><ul><li>锁的模式（<code>lock_mode </code>），占用低4位，可选的值如下：<ul><li><code>LOCK_IS </code>（十进制的<code>0</code> ）：表示共享意向锁，也就是<code>IS锁</code></li><li><code>LOCK_IX </code>（十进制的<code>1</code> ）：表示独占意向锁，也就是<code>IX锁</code> 。</li><li><code>LOCK_S </code>（十进制的<code>2</code> ）：表示共享锁，也就是<code>S锁</code> 。</li><li><code>LOCK_X </code>（十进制的<code>3</code> ）：表示独占锁，也就是<code>X锁</code> 。</li><li><code>LOCK_AUTO_INC </code>（十进制的<code>4</code> ）：表示AUTO-INC锁 。</li></ul></li></ul><blockquote><p>在InnoDB存储引擎中，LOCK_IS,LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式</p></blockquote><ul><li>锁的类型（<code>lock_type </code>），占用第5～8位，不过现阶段只有第5位和第6位被使用：<ul><li><code>LOCK_TABLE </code>（十进制的16 ），也就是当第5个比特位置为1时，表示表级锁。</li><li><code>LOCK_REC </code>（十进制的32 ），也就是当第6个比特位置为1时，表示行级锁。</li></ul></li><li>行锁的具体类型（<code>rec_lock_type </code>），使用其余的位来表示。只有在<code>lock_type </code>的值为<code>LOCK_REC </code>时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：<ul><li><code>LOCK_ORDINARY </code>（十进制的<code>0 </code>）：表示<code>next-key</code>锁 。</li><li><code>LOCK_GAP </code>（十进制的<code>512 </code>）：也就是当第10个比特位置为1时，表示<code>gap锁</code> </li><li><code>LOCK_REC_NOT_GAP </code>（十进制的<code>1024 </code>）：也就是当第11个比特位置为<code>1</code>时，表示<code>正经记录锁</code> </li><li><code>LOCK_INSERT_INTENTION </code>（十进制的<code>2048</code>）：也就是当第12个比特位置为1时，表示<code>插入意向锁</code>。其他的类型：还有一些不常用的类型我们就不多说了。</li></ul></li><li><code>is_waiting </code>属性呢？基于内存空间的节省，所以把<code>is_waiting </code>属性放到了<code>type_mode </code>这个32位的数字中：<ul><li><code>LOCK_WAIT </code>（十进制的<code>256 </code>） ：当第9个比特位置为 1 时，表示<code>is_waiting </code>为<code>true </code>，也就是当前事务尚未获取到锁，处在等待状态；当这个比特位为 0 时，表示<code>is_waiting </code>为<code>false </code>，也就是当前事务获取锁成功。</li></ul></li></ul><ol start="5"><li><p><code>其他信息</code> ：为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。</p></li><li><p><code>一堆比特位</code> ：</p></li></ol><p>如果是 <code>行锁结构</code> 的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的 <code>n_bits </code>属性表示的。InnoDB数据页中的每条记录在 <code>记录头信息</code> 中都包含一个 <code>heap_no </code>属性，伪记录 <code>Infimum </code>的<code>heap_no </code>值为<code>0 </code>， <code>Supremum </code>的 <code>heap_no </code>值为 <code>1 </code>，之后每插入一条记录， <code>heap_no </code>值就增1。 <code>锁结构</code> 最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个 <code>heap_no </code>，即一个比特位映射到页内的一条记录。</p><h2 id="5-锁监控"><a href="#5-锁监控" class="headerlink" title="5. 锁监控"></a>5. 锁监控</h2><p>关于MySQL锁的监控，我们一般可以通过检查 InnoDB_row_lock 等状态变量来分析系统上的行锁的争夺情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                 <span class="operator">|</span> <span class="keyword">Value</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_current_waits <span class="operator">|</span> <span class="number">0</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time          <span class="operator">|</span> <span class="number">129831</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time_avg      <span class="operator">|</span> <span class="number">18547</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time_max      <span class="operator">|</span> <span class="number">51095</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_waits         <span class="operator">|</span> <span class="number">7</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+--------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对各个状态量的说明如下：</p><ul><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</li><li><code>Innodb_row_lock_time </code>：从系统启动到现在锁定总时间长度；（等待总时长）</li><li><code>Innodb_row_lock_time_avg </code>：每次等待所花平均时间；（等待平均时长）</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</li><li><code>Innodb_row_lock_waits </code>：系统启动后到现在总共等待的次数；（等待总次数）</li></ul><p>对于这5个状态变量，比较重要的3个见上面（橙色）</p><p><strong>其他监控方法：</strong></p><p>MySQL把事务和锁的信息记录在了 <code>information_schema </code>库中，涉及到的三张表分别是<code>INNODB_TRX </code>、 <code>INNODB_LOCKS </code>和 <code>INNODB_LOCK_WAITS </code>。</p><p><code>MySQL5.7及之前</code> ，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况</p><p>MySQL8.0删除了<code>information_schema.INNODB_LOCKS</code>，添加了 performance_schema.data_locks ，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同，performance_schema.data_locks不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。</p><p>同时,information_schema.INNODB_LOCK_WAITS也被 <code>performance_schema.data_lock_waits</code> 所代替。</p><h2 id="6-附录"><a href="#6-附录" class="headerlink" title="6. 附录"></a>6. 附录</h2><blockquote><p>主要补充间隙锁加锁规则，共11个案例~ 感兴趣的小伙伴可以参考老师讲课的课件，这部分很全</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、其他数据库日志</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC15%E7%AB%A0%20%E5%85%B6%E5%AE%83%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC15%E7%AB%A0%20%E5%85%B6%E5%AE%83%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><p>我们在讲解数据库事务时，讲过两种日志:<code>重做日志</code>、<code>回滚日志</code>。</p><p>对于线上数据库应用系统，突然遭遇<code>数据库宕机</code>怎么办?在这种情况下，定位宕机的原因就非常关键。可以查看数据库的错误日志。因为日志中记录了数据库运行中的诊断信息，包括了错误、警告和注释等信息。比如:从日志中发现某个连接中的SQL操作发生了死循环，导致内存不足，被系统强行终止了。明确了原因，处理起来也就轻松了，系统很快就恢复了运行。</p><p>除了发现错误，日志在数据复制、数据恢复、操作审计，以及确保数据的永久性和一致性等方面，都有着不可替代的作用。</p><p>&#x3D;&#x3D;千万不要小看日志&#x3D;&#x3D;。很多看似奇怪的问题，答案往往就藏在日志里。很多情况下，只有通过查看日志才能发现问题的原因，真正解决问题。所以，一定要学会查看日志，养成检查日志的习惯，对提升你的数据库应用开发能力至关重要。</p><p>MySQL8.0官网日志地址: <a href="https://dev.mysql.com/doc/refman/8.0/en/server-logs.html">https://dev.mysql.com/doc/refman/8.0/en/server-logs.html</a></p><h2 id="1-MySQL支持的日志"><a href="#1-MySQL支持的日志" class="headerlink" title="1. MySQL支持的日志"></a>1. MySQL支持的日志</h2><h3 id="1-1-日志类型"><a href="#1-1-日志类型" class="headerlink" title="1.1 日志类型"></a>1.1 日志类型</h3><p>MySQL有不同类型的日志文件，用来存储不同类型的日志，分为<code>二进制日志</code>、<code>错误日志</code>、<code>通用查询日志</code>和<code>慢查询日志</code>，这也是常用的4种。MySQL 8又新增两种支持的日志:<code>中继日志</code>和<code>数据定义语句日志</code>。使用这些日志文件，可以查看MySQL内部发生的事情。</p><p><strong>这6类日志分别为：</strong></p><ul><li><code>慢查询日志</code>:记录所有执行时间超过long_query_time的所有查询，方便对查询进行优化。</li><li><code>通用查询日志</code>:记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令，对复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。</li><li><code>错误日志</code>:记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的状态，从而从而对服务器进行维护。</li><li><code>二进制日志</code>:记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故障时数据的无损失恢复。</li><li><code>中继日志</code>:用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。从服务器通过读取中继日志的内容，来同步主服务器上的操作。</li><li><code>数据定义语句日志</code>:记录数据定义语句执行的元数据操作。</li></ul><p>除二进制日志外，其他日志都是<code>文本文件</code>。默认情况下，所有日志创建于<code>MySQL数据目录</code>中。</p><h3 id="1-2-日志的弊端"><a href="#1-2-日志的弊端" class="headerlink" title="1.2 日志的弊端"></a>1.2 日志的弊端</h3><ul><li>日志功能会<code>降低MySQL数据库的性能</code>。例如，在查询非常频繁的MySQL数据库系统中，如果开启了通用查询日志和慢查询日志，MySQL数据库会花费很多时间记录日志。</li><li>日志会占用<code>大量的磁盘空间</code>。对于用户量非常大、操作非常频繁的数据库，日志文件需要的存储空间设置比数据库文件需要的存储空间还要大。</li></ul><hr><h2 id="2-慢查询日志-slow-query-log"><a href="#2-慢查询日志-slow-query-log" class="headerlink" title="2. 慢查询日志(slow query log)"></a>2. 慢查询日志(slow query log)</h2><p>前面章节《第09章 性能分析工具的使用》已经详细讲述</p><h2 id="3-通用查询日志"><a href="#3-通用查询日志" class="headerlink" title="3. 通用查询日志"></a>3. 通用查询日志</h2><p>通用查询日志用来<code>记录用户的所有操作</code>，包括启动和关闭MysQL服务、所有用户的连接开始时间和截止时间、发给MySQL数据库服务器的所有SQL指令等。当我们的数据发生异常时<strong>，查看通用查询日志，还原操作时的具体场景</strong>，可以帮助我们准确定位问题。</p><h3 id="3-1-问题场景"><a href="#3-1-问题场景" class="headerlink" title="3.1 问题场景"></a>3.1 问题场景</h3><p>在电商系统中，购买商品并且使用微信支付完成以后，却发现支付中心的记录并没有新增，此时用户再次使用支付宝支付，就会出现<code>重复支付</code>的问题。但是当去数据库中查询数据的时候，会发现只有一条记录存在。那么此时给到的现象就是只有一条支付记录，但是用户却支付了两次。</p><p>对系统进行了仔细检查，没有发现数据问题，因为用户编号和订单编号以及第三方流水号都是对的。可是用户确实支付了两次，这个时候，我们想到了检查通用查询日志，看看当天到底发生了什么。</p><p>查看之后，发现: 1月1日下午2点，用户使用微信支付完以后，但是由于网络故障，支付中心没有及时收到微信支付的回调通知，导致当时没有写入数据。1月1日下午2点30，用户又使用支付宝支付，此时记录更新到支付中心。1月1日晚上9点，微信的回调通知过来了，但是支付中心已经存在了支付宝的记录，所以只能覆盖记录了。</p><p>由于网络的原因导致了重复支付。至于解决问题的方案就很多了，这里省略。</p><p>可以看到通用查询日志可以帮助我们了解操作发生的具体时间和操作的细节，对找出异常发生的原因极其关键。</p><h3 id="3-2-查看当前状态"><a href="#3-2-查看当前状态" class="headerlink" title="3.2 查看当前状态"></a>3.2 查看当前状态</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> OFF                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>hadoop102.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>说明1∶系统变量general_log的值是OFF，即通用查询日志处于关闭状态。在MySQL中，这个参数的<code>默认值是关闭的</code>。因为一旦开启记录通用查询日志，MySQL 会记录所有的连接起止和相关的SQL操作，这样会消耗系统资源并且占用磁盘空间。我们可以通过手动修改变量的值，在<code>要的时候开启日志</code>。</p><p>说明2:通用查询日志文件的名称是主机.log(hadoop102.log)。存储路径是<code>/var/lib/mysql/</code>，默认也是数据路径。这样我们就知道在哪里可以查看通用查询日志的内容了</p><h3 id="3-3-启动日志"><a href="#3-3-启动日志" class="headerlink" title="3.3 启动日志"></a>3.3 启动日志</h3><p><strong>方式1：永久性方式</strong></p><p>修改<code>my.cnf</code>或者<code>my.ini</code>配置文件来设置。在[mysqld]组下加入log选项，并重启MySQL服务。格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">general_log<span class="operator">=</span><span class="keyword">ON</span></span><br><span class="line">general_log_file<span class="operator">=</span>[path[filename]] #日志文件所在目录路径，filename为日志文件名</span><br></pre></td></tr></table></figure><p>如果不指定目录和文件名，通用查询日志将默认存储在MySQL数据目录中的hostname.log文件中，hostname表示主机名。</p><p><strong>方式2：临时性方式</strong></p><p>使用SET语句停止MySQL通用查询日志功能:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log<span class="operator">=</span><span class="keyword">on</span>; # 开启通用查询日志</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log_file<span class="operator">=</span><span class="string">&#x27;path/filename&#x27;</span>; # 设置日志文件保存位置</span><br></pre></td></tr></table></figure><p>对应的，关闭操作SQL命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log<span class="operator">=</span>off; # 关闭通用查询日志</span><br></pre></td></tr></table></figure><p>查看设置后情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-查看日志"><a href="#3-4-查看日志" class="headerlink" title="3.4 查看日志"></a>3.4 查看日志</h3><p>通用查询日志是以<code>文本文件</code> 的形式存储在文件系统中的，可以使用文本编辑器 直接打开日志文件。每台MySQL服务器的通用查询日志内容是不同的。</p><ul><li>在Windows操作系统中，使用文本文件查看器；</li><li>在Linux系统中，可以使用vi工具或者gedit工具查看；</li><li>在Mac OSX系统中，可以使用文本文件查看器或者vi等工具查看。</li></ul><p>从<code>SHOW VARIABLES LIKE ‘general_log%’;</code> 结果中可以看到通用查询日志的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# cat hadoop102.log </span><br><span class="line"><span class="operator">/</span>usr<span class="operator">/</span>sbin<span class="operator">/</span>mysqld, Version: <span class="number">8.0</span><span class="number">.25</span> (MySQL Community Server <span class="operator">-</span> GPL). started <span class="keyword">with</span>:</span><br><span class="line">Tcp port: <span class="number">3306</span>  Unix socket: <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>mysql.sock</span><br><span class="line"><span class="type">Time</span>                 Id Command    Argument</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-09</span>T11:<span class="number">06</span>:<span class="number">37.920806</span>Z   <span class="number">12</span> Query<span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%general%&#x27;</span></span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-10</span>T00:<span class="number">49</span>:<span class="number">48.408063</span>Z   <span class="number">12</span> Quit</span><br><span class="line"><span class="operator">/</span>usr<span class="operator">/</span>sbin<span class="operator">/</span>mysqld, Version: <span class="number">8.0</span><span class="number">.25</span> (MySQL Community Server <span class="operator">-</span> GPL). started <span class="keyword">with</span>:</span><br><span class="line">Tcp port: <span class="number">3306</span>  Unix socket: <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>mysql.sock</span><br><span class="line"><span class="type">Time</span>                 Id Command    Argument</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.004735</span>Z   <span class="number">11</span> Query<span class="keyword">SELECT</span> DATABASE()</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.004903</span>Z   <span class="number">11</span> Init DBatguigudb2</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.005518</span>Z   <span class="number">11</span> Query<span class="keyword">show</span> databases</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.006686</span>Z   <span class="number">11</span> Query<span class="keyword">show</span> tables</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.007981</span>Z   <span class="number">11</span> Field Lista </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.008874</span>Z   <span class="number">11</span> Field Listb </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.009481</span>Z   <span class="number">11</span> Field Listbook </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.010170</span>Z   <span class="number">11</span> Field Listclass </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.011040</span>Z   <span class="number">11</span> Field Liststudent </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.011209</span>Z   <span class="number">11</span> Field Listtype </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">01.011303</span>Z   <span class="number">11</span> Field Listuser3 </span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">13.504517</span>Z   <span class="number">11</span> Query<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">32.236803</span>Z   <span class="number">11</span> Query<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> type</span><br><span class="line"><span class="number">2023</span><span class="number">-07</span><span class="number">-22</span>T06:<span class="number">29</span>:<span class="number">58.236644</span>Z   <span class="number">11</span> Quit</span><br></pre></td></tr></table></figure><p>在通用查询日志里面，我们可以清楚地看到，什么时候开启了新的客户端登陆数据库，登录之后做了什么 SQL 操作，针对的是哪个数据表等信息。</p><h3 id="3-5-停止日志"><a href="#3-5-停止日志" class="headerlink" title="3.5 停止日志"></a>3.5 停止日志</h3><p><strong>方式1：永久性方式</strong><br>修改 my.cnf 或者 my.ini 文件，把[mysqld]组下的 general_log 值设置为 OFF 或者把general_log一项注释掉。修改保存后，再 重启MySQL服务 ，即可生效。</p><p>举例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">general_log<span class="operator">=</span>OFF</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#general_log<span class="operator">=</span><span class="keyword">ON</span></span><br></pre></td></tr></table></figure><p><strong>方式2：临时性方式</strong><br>使用SET语句停止MySQL通用查询日志功能：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log<span class="operator">=</span>off;</span><br></pre></td></tr></table></figure><p>查询通用日志功能：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-6-删除-刷新日志"><a href="#3-6-删除-刷新日志" class="headerlink" title="3.6 删除\刷新日志"></a>3.6 删除\刷新日志</h3><p>如果数据的使用非常频繁，那么通用查询日志会占用服务器非常大的磁盘空间。数据管理员可以删除很长时间之前的查询日志，以保证MySQL服务器上的硬盘空间</p><p><strong>手动删除文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可以看出，通用查询日志的目录默认为MySQL数据目录。在该目录下手动删除通用查询日志hadoop01.log。</p><p>使用如下命令重新生成查询日志文件，具体命令如下。刷新MySQL数据目录，发现创建了新的日志文件。前提一定要开启通用日志。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs</span><br></pre></td></tr></table></figure><p>如果希望备份旧的通用查询日志，就必须先将旧的日志文件复制出来或者改名，然后执行上面的mysqladmin命令。正确流程如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mysql<span class="operator">-</span>data<span class="operator">-</span>directory #输入自己的通用日志文件所在目录</span><br><span class="line">mv mysql.general.log mysql.general.log.old #指名就的文件名 以及新的文件名</span><br><span class="line">mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs</span><br></pre></td></tr></table></figure><h2 id="4-错误日志-error-log"><a href="#4-错误日志-error-log" class="headerlink" title="4. 错误日志(error log)"></a>4. 错误日志(error log)</h2><p>错误日志记录了MySQL服务器启动、停止运行的时间，以及系统启动、运行和停止过程中的诊断信息，包括<code>错误</code>、<code>警告</code>和<code>提示</code>等。</p><p>通过错误日志可以查看系统的运行状态，便于即时发现故障、修复故障。如果MysQL服务<code>出现异常</code>，错误日志是发现问题、解决故障的<code>首选</code>。</p><h3 id="4-1-启动日志"><a href="#4-1-启动日志" class="headerlink" title="4.1 启动日志"></a>4.1 启动日志</h3><p>在MySQL数据库中，错误日志功能是 <code>默认开启</code> 的。而且，错误日志 <code>无法被禁止</code> 。</p><p>默认情况下，错误日志存储在MySQL数据库的数据文件夹下，名称默认为 <code>mysqld.log </code>（Linux系统）或 <code>hostname.err</code> （mac系统）。如果需要制定文件名，则需要在my.cnf或者my.ini中做如下配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log<span class="operator">-</span>error<span class="operator">=</span>[path<span class="operator">/</span>[filename]] #path为日志文件所在的目录路径，filename为日志文件名</span><br></pre></td></tr></table></figure><p>修改配置项后，需要重启MySQL服务以生效。</p><h3 id="4-2-查看日志"><a href="#4-2-查看日志" class="headerlink" title="4.2 查看日志"></a>4.2 查看日志</h3><p>MySQL错误日志是以文本文件形式存储的，可以使用文本编辑器直接查看。</p><p>查询错误日志的存储路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;log_err%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name              <span class="operator">|</span> <span class="keyword">Value</span>                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_error                  <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_error_services         <span class="operator">|</span> log_filter_internal; log_sink_internal <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_error_suppression_list <span class="operator">|</span>                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_error_verbosity        <span class="operator">|</span> <span class="number">2</span>                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+----------------------------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>执行结果中可以看到错误日志文件是mysqld.log，位于MySQL默认的数据目录下。</p><p>下面我们查看一下错误日志的内容。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> log]# cat mysqld.log</span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">36</span>:<span class="number">18.316947</span>Z <span class="number">0</span> [<span class="keyword">System</span>] [MY<span class="number">-013169</span>] [Server] <span class="operator">/</span>usr<span class="operator">/</span>sbin<span class="operator">/</span>mysqld (mysqld <span class="number">8.0</span><span class="number">.25</span>) initializing <span class="keyword">of</span> server <span class="keyword">in</span> progress <span class="keyword">as</span> process <span class="number">8770</span></span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">36</span>:<span class="number">18.339461</span>Z <span class="number">1</span> [<span class="keyword">System</span>] [MY<span class="number">-013576</span>] [InnoDB] InnoDB initialization has started.</span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">36</span>:<span class="number">18.969919</span>Z <span class="number">1</span> [<span class="keyword">System</span>] [MY<span class="number">-013577</span>] [InnoDB] InnoDB initialization has ended.</span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">36</span>:<span class="number">20.519755</span>Z <span class="number">6</span> [Note] [MY<span class="number">-010454</span>] [Server] A temporary password <span class="keyword">is</span> generated <span class="keyword">for</span> root<span class="variable">@localhost</span>: wtOQr<span class="operator">&lt;</span>yC9NHM</span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">37</span>:<span class="number">00.981062</span>Z <span class="number">0</span> [<span class="keyword">System</span>] [MY<span class="number">-010116</span>] [Server] <span class="operator">/</span>usr<span class="operator">/</span>sbin<span class="operator">/</span>mysqld (mysqld <span class="number">8.0</span><span class="number">.25</span>) starting <span class="keyword">as</span> process <span class="number">8872</span></span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">37</span>:<span class="number">00.993416</span>Z <span class="number">1</span> [<span class="keyword">System</span>] [MY<span class="number">-013576</span>] [InnoDB] InnoDB initialization has started.</span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">37</span>:<span class="number">01.118904</span>Z <span class="number">1</span> [<span class="keyword">System</span>] [MY<span class="number">-013577</span>] [InnoDB] InnoDB initialization has ended.</span><br><span class="line"><span class="number">2022</span><span class="number">-05</span><span class="number">-09</span>T13:<span class="number">37</span>:<span class="number">01.211523</span>Z <span class="number">0</span> [<span class="keyword">System</span>] [MY<span class="number">-011323</span>] [Server] X Plugin ready <span class="keyword">for</span> connections. Bind<span class="operator">-</span>address: <span class="string">&#x27;::&#x27;</span> port: <span class="number">33060</span>, socket: <span class="operator">/</span>var<span class="operator">/</span>run<span class="operator">/</span>mysqld<span class="operator">/</span>mysqlx.sock</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>...</span><br></pre></td></tr></table></figure><p>可以看到，错误日志文件中记录了服务器启动的时间，以及存储引擎InnoDB启动和停止等，我们在做初始化时候生成的数据库初始密码也是记录在error.log中。</p><h3 id="4-3-删除-刷新日志"><a href="#4-3-删除-刷新日志" class="headerlink" title="4.3 删除\刷新日志"></a>4.3 删除\刷新日志</h3><p>对于很久以前的错误日志，数据库管理员查看这些错误日志的可能性不大，可以将这些错误日志删除，以保证MySQL服务器上的 <code>硬盘空间</code> 。MySQL的错误日志是以文本文件的形式存储在文件系统中的，可以<code>直接删除</code>。</p><ul><li>第1步(方式1)︰删除操作 <code>rm</code>   （ 在运行状态下删除错误日志文件后，MySQL并不会自动创建日志文件）</li><li>第1步(方式2)︰重命名文件 <code>mv</code></li><li>第2步：重建日志 <code>mysqladmin -uroot -p flush-logs</code></li></ul><p>可能报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@atguigu01</span> log]# mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs</span><br><span class="line">Enter password:</span><br><span class="line">mysqladmin: refresh failed; error: <span class="string">&#x27;Could not open file &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log<span class="string">&#x27; for error logging.&#x27;</span></span><br></pre></td></tr></table></figure><p>官网提示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557335.png" alt="image-20230722145912407"></p><p>执行下面命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install <span class="operator">-</span>omysql <span class="operator">-</span>gmysql <span class="operator">-</span>m0644 <span class="operator">/</span>dev<span class="operator">/</span><span class="keyword">null</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log</span><br></pre></td></tr></table></figure><p><code>flush-logs</code>指令操作:</p><p>MySQL 5.5.7以前的版本，flush-logs将错误日志文件重命名为filename.err_old，并创建新的日志文件。<br>从MySQL 5.5.7开始，flush-logs只是重新打开日志文件，并不做日志备份和创建的操作。<br>如果日志文件不存在，MySQL启动或者执行flush-logs时会自动创建新的日志文件。重新创建错误日志，大小为0字节。</p><h3 id="4-4-MySQL8-0新特性"><a href="#4-4-MySQL8-0新特性" class="headerlink" title="4.4 MySQL8.0新特性"></a>4.4 MySQL8.0新特性</h3><p>MySQL8.0里对错误日志的改进。MySQL8.0的错误日志可以理解为一个全新的日志，在这个版本里，接受了来自社区的广泛批评意见，在这些意见和建议的基础上生成了新的日志。</p><ul><li>下面这些是来自社区的意见:</li><li>默认情况下内容过于冗长</li><li>遗漏了有用的信息</li><li>难以过滤某些信息</li><li>没有标识错误信息的子系统源</li><li>没有错误代码，解析消息需要识别错误</li><li>引导消息可能会丢失</li><li>固定格式</li></ul><p>针对这些意见，MySQL做了如下改变:</p><ul><li>采用组件架构，通过不同的组件执行日志的写入和过滤功能</li><li>写入错误日志的全部信息都具有唯一的错误代码从10000开始</li><li>增加了一个新的消息分类《system》用于在错误日志中始终可见的非错误但服务器状态更改事件的消息。增加了额外的附加信息，例如关机时的版本信息，谁发起的关机等等</li><li>两种过滤方式，Internal和Dragnet</li><li>三种写入形式，经典、JSON和syseventlog</li></ul><blockquote><p>小结:</p><p>通常情况下，管理员不需要查看错误日志。但是，MySQL服务器发生异常时，管理员可以从错误日志中找到发生异常的时间、原因，然后根据这些信息来解决异常。</p></blockquote><h2 id="5-二进制日志-bin-log"><a href="#5-二进制日志-bin-log" class="headerlink" title="5. 二进制日志(bin log)"></a>5. 二进制日志(bin log)</h2><p>binlog可以说是MySQL中比较 <code>重要</code> 的日志了，在日常开发及运维过程中，经常会遇到。</p><p>binlog即binary log，二进制日志文件，也叫作变更日志（update log）。它记录了数据库所有执行的<code>DD </code>和 <code>DML</code> 等数据库更新事件的语句，但是不包含没有修改任何数据的语句（如数据查询语句select、show等）。</p><p>它以<code>事件形式</code>记录并保存在<code>二进制文件</code>中。通过这些信息，我们可以再现数据更新操作的全过程。</p><blockquote><p>如果想要记录所有语句（例如，为了识别有问题的查询)，需要使用通用查询日志。</p></blockquote><p>binlog主要应用场景:</p><ul><li>一是用于<code>数据恢复</code>，如果MySQL数据库意外停止，可以通过二进制日志文件来查看用户执行了哪些操作，对数据库服务器文件做了哪些修改，然后根据二进制日志文件中的记录来恢复数据库服务器。</li><li>二是用于<code>数据复制</code>，由于日志的延续性和时效性，master把它的二进制日志传递给slaves来达到master-slave数据—致的目的。<br>可以说MySQL数据库的<strong>数据备份、主备、主主、主从</strong>都离不开binlog，需要依靠binlog来同步数据，保证数据—致性。</li></ul><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557329.png" alt="image-20230722145925374"></p><h3 id="5-1-查看默认情况"><a href="#5-1-查看默认情况" class="headerlink" title="5.1 查看默认情况"></a>5.1 查看默认情况</h3><p>查看记录二进制日志是否开启：在MySQL8中默认情况下，二进制文件是开启的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                   <span class="operator">|</span> <span class="keyword">Value</span>                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_bin                         <span class="operator">|</span> <span class="keyword">ON</span>                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_basename                <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>binlog       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_index                   <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>binlog.index <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_trust_function_creators <span class="operator">|</span> OFF                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_use_v1_row_events       <span class="operator">|</span> OFF                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sql_log_bin                     <span class="operator">|</span> <span class="keyword">ON</span>                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+-----------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>log_bin_basename </code>: 是binlog日志的基本文件名，后面会追加标识来表示每一个文件</p><p> <code>log_bin_index</code>:是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录</p><p><code>log_bin_trust_function_creators</code>: 限制存储过程，前面我们已经讲过了，这是因为二进制日志的一个重要功能是用于主从复制，而存储函数有可能导致主从的数据不一致。所以当开启二进制日志后，需要限制存储函数的创建、修改、调用</p><p><code>log_bin_use_v1_row_events </code>：此只读系统变量已弃用。ON表示使用版本1二进制日志行，OFF表示使用版本2二进制日志行(MysQL 5.6的默认值为2)。</p><p>每次服务重启，都会新创建一个binlog</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557357.png" alt="image-20230722152900088"></p><h3 id="5-2-日志参数设置"><a href="#5-2-日志参数设置" class="headerlink" title="5.2 日志参数设置"></a>5.2 日志参数设置</h3><p><strong>方式1：永久性方式</strong></p><p>修改MySQL的 my.cnf 或 my.ini 文件可以设置二进制日志的相关参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#启用二进制日志</span><br><span class="line">log<span class="operator">-</span>bin<span class="operator">=</span>atguigu<span class="operator">-</span>bin</span><br><span class="line">binlog_expire_logs_seconds<span class="operator">=</span><span class="number">600</span></span><br><span class="line">max_binlog_size<span class="operator">=</span><span class="number">100</span>M</span><br></pre></td></tr></table></figure><blockquote><p>提示:</p><ol><li>log-bin&#x3D;mysql-bin #打开日志(主机需要打开)，这个mysql-bin也可以自定义，这里也可以加上路径，如: &#x2F;home&#x2F;www&#x2F;mysql_bin_log&#x2F;mysql-bin</li><li>binlog_expire_logs_seconds:此参数控制二进制日志文件保留的时长，单位是秒，默认2592000 3(天– 14400 4小时; 86400 1天; 259200 3天;</li><li>max_binlog_size:控制单个二进制日志大小，当前日志文件大小超过此变量时，执行切换动作。此参数的<code>最大和默认值是1GB</code>，该设置并不能严格控制Binlog的大小，尤其是Binlog比较靠近最大值而又遇到一个比较大事务时，为了保证事务的完整性，可能不做切换日志的动作，只能将该事务的所有SQL都记录进当前日志，直到事务结束。一般情况下可采取默认值</li></ol></blockquote><p>重新启动MySQL服务，查询二进制日志的信息，执行结果：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557333.png" alt="image-20230722161129546"></p><p><strong>设置带文件夹的bin-log日志存放目录</strong></p><p>如果想改变日志文件的目录和名称，可以对my.cnf或my.ini中的log_bin参数修改如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log<span class="operator">-</span>bin<span class="operator">=</span>&quot;/var/lib/mysql/binlog/atguigu-bin&quot;</span><br></pre></td></tr></table></figure><p>注意：新建的文件夹需要使用mysql用户，使用下面的命令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown <span class="operator">-</span>R <span class="operator">-</span>v mysql:mysql binlog</span><br></pre></td></tr></table></figure><p>重启MySQL服务之后，新的二进制日志文件将出现在&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;binlog&#x2F;文件夹下面:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                   <span class="operator">|</span> <span class="keyword">Value</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_bin                         <span class="operator">|</span> <span class="keyword">ON</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_basename                <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>bin       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_index                   <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>bin.index <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_trust_function_creators <span class="operator">|</span> OFF                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_use_v1_row_events       <span class="operator">|</span> OFF                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sql_log_bin                     <span class="operator">|</span> <span class="keyword">ON</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>提示：<code>数据库文件最好不要与日志文件放在同一个磁盘上!</code> 这样，当数据库文件所在的磁盘发生故障时，可以使用日志文件恢复数据。</p></blockquote><p><strong>方式2：临时性方式</strong></p><p>如果不希望通过修改配置文件并重启的方式设置二进制日志的话，还可以使用如下指令，需要注意的是在mysql8中只有 会话级别 的设置，没有了global级别的设置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">global</span> 级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_log_bin<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">#ERROR <span class="number">1228</span> (HY000): Variable <span class="string">&#x27;sql_log_bin&#x27;</span> <span class="keyword">is</span> a SESSION variable <span class="keyword">and</span> can`t be used <span class="keyword">with</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span></span><br><span class="line"></span><br><span class="line"># session级别</span><br><span class="line"><span class="keyword">SET</span> sql_log_bin<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">#Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> 秒)</span><br></pre></td></tr></table></figure><h3 id="5-3-查看日志"><a href="#5-3-查看日志" class="headerlink" title="5.3 查看日志"></a>5.3 查看日志</h3><p>当MySQL创建二进制日志文件时，先创建一个以“filename”为名称、以“.index”为后缀的文件，再创建一个以“filename”为名称、以“.000001”为后缀的文件。</p><p>MySQL服务 <code>重新启动一次</code> ，以“.000001”为后缀的文件就会增加一个，并且后缀名按1递增。即日志文件的个数与MySQL服务启动的次数相同；如果日志长度超过了 <code>max_binlog_size </code>的上限（默认是1GB），就会创建一个新的日志文件。</p><p>查看当前的二进制日志文件列表及大小。指令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS; </span><br><span class="line">ERROR <span class="number">2013</span> (HY000): Lost connection <span class="keyword">to</span> MySQL server during query</span><br><span class="line"><span class="keyword">No</span> connection. Trying <span class="keyword">to</span> reconnect...</span><br><span class="line">Connection id:    <span class="number">8</span></span><br><span class="line"><span class="keyword">Current</span> database: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">NONE</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> File_size <span class="operator">|</span> Encrypted <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>       <span class="number">179</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span>       <span class="number">156</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>所有对数据库的修改都会记录在binglog中。但binlog是二进制文件，无法直接查看，想要更直观的观测它就要借助<code>mysqlbinlog</code>命令工具了。指令如下:在查看执行，先执行两条SQL语句，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">18</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;四班&#x27;</span>);</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;Tom&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>开始查看binlog</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# mysqlbinlog &quot;/var/lib/mysql/atguigu-bin.000002&quot;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">4</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> server id <span class="number">1</span>  end_log_pos <span class="number">125</span> CRC32 <span class="number">0xfbe10f64</span> <span class="keyword">Start</span>: binlog v <span class="number">4</span>, server v <span class="number">8.0</span><span class="number">.25</span> created <span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> <span class="keyword">at</span> startup</span><br><span class="line"># Warning: this binlog <span class="keyword">is</span> either <span class="keyword">in</span> use <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line"><span class="keyword">ROLLBACK</span><span class="comment">/*!*/</span>;</span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">547</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">637</span> CRC32 <span class="number">0x0e4d6052</span> Querythread_id<span class="operator">=</span><span class="number">8</span>exec_time<span class="operator">=</span><span class="number">0</span>error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1690013942</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>......</span><br><span class="line"># <span class="keyword">at</span> <span class="number">776</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">807</span> CRC32 <span class="number">0x6f80cb79</span> Xid <span class="operator">=</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;AUTOMATIC&#x27;</span> <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># <span class="keyword">End</span> <span class="keyword">of</span> log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br></pre></td></tr></table></figure><p>执行结果可以看到，这是一个简单的日志文件，日志中记录了用户的一些操作，这里并没有出现具体的SQL语句，这是因为binlog关键字后面的内容是经过编码后的<code>二进制日志</code>。</p><p>这里一个update语句包含如下事件</p><ul><li>Query事件负责开始一个事务(BEGIN)</li><li>Table_map事件负责映射需要的表.</li><li>Update_rows事件负责写入数据</li><li>Xid事件负责结束事务</li></ul><p>下面命令将行事件以 <code>伪SQL的形式</code> 表现出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# mysqlbinlog <span class="operator">-</span>v &quot;/var/lib/mysql/atguigu-bin.000002&quot;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">4</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> server id <span class="number">1</span>  end_log_pos <span class="number">125</span> CRC32 <span class="number">0xfbe10f64</span> <span class="keyword">Start</span>: binlog v <span class="number">4</span>, server v <span class="number">8.0</span><span class="number">.25</span> created <span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> <span class="keyword">at</span> startup</span><br><span class="line"># Warning: this binlog <span class="keyword">is</span> either <span class="keyword">in</span> use <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line"><span class="keyword">ROLLBACK</span><span class="comment">/*!*/</span>;</span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">3I+7ZA8BAAAAeQAAAH0AAAABAAQAOC4wLjI1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="string">AAAAAAAAAAAAAAAAAADcj7tkEwANAAgAAAAABAAEAAAAYQAEGggAAAAICAgCAAAACgoKKioAEjQA</span></span><br><span class="line"><span class="string">CigBZA/h+w==</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">125</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> server id <span class="number">1</span>  end_log_pos <span class="number">156</span> CRC32 <span class="number">0x7b4b2408</span> Previous<span class="operator">-</span>GTIDs</span><br><span class="line"># [<span class="keyword">empty</span>]</span><br><span class="line"># <span class="keyword">at</span> <span class="number">156</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">235</span> CRC32 <span class="number">0x80f68688</span> Anonymous_GTIDlast_committed<span class="operator">=</span><span class="number">0</span>sequence_number<span class="operator">=</span><span class="number">1</span>rbr_only<span class="operator">=</span>yesoriginal_committed_timestamp<span class="operator">=</span><span class="number">1690013906305153</span>immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013906305153</span>transaction_length<span class="operator">=</span><span class="number">312</span></span><br><span class="line"><span class="comment">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1690013906305153</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26.305153</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013906305153</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26.305153</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1690013906305153*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">235</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">316</span> CRC32 <span class="number">0x0e6498f6</span> Querythread_id<span class="operator">=</span><span class="number">8</span>exec_time<span class="operator">=</span><span class="number">0</span>error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1690013906</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.pseudo_thread_id<span class="operator">=</span><span class="number">8</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.foreign_key_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.sql_auto_is_null<span class="operator">=</span><span class="number">0</span>, @<span class="variable">@session</span>.unique_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.autocommit<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.sql_mode<span class="operator">=</span><span class="number">1168113696</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.auto_increment_increment<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.auto_increment_offset<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb4 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.character_set_client<span class="operator">=</span><span class="number">255</span>,@<span class="variable">@session</span>.collation_connection<span class="operator">=</span><span class="number">255</span>,@<span class="variable">@session</span>.collation_server<span class="operator">=</span><span class="number">255</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.lc_time_names<span class="operator">=</span><span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.collation_database<span class="operator">=</span><span class="keyword">DEFAULT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80011 SET @@session.default_collation_for_utf8mb4=255*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">316</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">384</span> CRC32 <span class="number">0xa3ddc17f</span> Table_map: `atguigudb3`.`student` mapped <span class="keyword">to</span> number <span class="number">92</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">384</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">437</span> CRC32 <span class="number">0x77beae88</span> Write_rows: <span class="keyword">table</span> id <span class="number">92</span> flags: STMT_END_F</span><br><span class="line"></span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">0pC7ZBMBAAAARAAAAIABAAAAAFwAAAAAAAEACmF0Z3VpZ3VkYjMAB3N0dWRlbnQAAwMPDwQ8AB4A</span></span><br><span class="line"><span class="string">BgEBAAIBIX/B3aM=</span></span><br><span class="line"><span class="string">0pC7ZB4BAAAANQAAALUBAAAAAFwAAAAAAAEAAgAD/wASAAAABUplcnJ5BuWbm+ePrYiuvnc=</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line">### <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `atguigudb3`.`student`</span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">18</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;Jerry&#x27;</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;四班&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">437</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">468</span> CRC32 <span class="number">0x0ba33a3f</span> Xid <span class="operator">=</span> <span class="number">14</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">468</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">547</span> CRC32 <span class="number">0xcd6ec87a</span> Anonymous_GTIDlast_committed<span class="operator">=</span><span class="number">1</span>sequence_number<span class="operator">=</span><span class="number">2</span>rbr_only<span class="operator">=</span>yesoriginal_committed_timestamp<span class="operator">=</span><span class="number">1690013942336137</span>immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013942336137</span>transaction_length<span class="operator">=</span><span class="number">339</span></span><br><span class="line"><span class="comment">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1690013942336137</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02.336137</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013942336137</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02.336137</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1690013942336137*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">547</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">637</span> CRC32 <span class="number">0x0e4d6052</span> Querythread_id<span class="operator">=</span><span class="number">8</span>exec_time<span class="operator">=</span><span class="number">0</span>error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1690013942</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">637</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">705</span> CRC32 <span class="number">0xdff84bbe</span> Table_map: `atguigudb3`.`student` mapped <span class="keyword">to</span> number <span class="number">92</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">705</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">776</span> CRC32 <span class="number">0xfbd17653</span> Update_rows: <span class="keyword">table</span> id <span class="number">92</span> flags: STMT_END_F</span><br><span class="line"></span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">9pC7ZBMBAAAARAAAAMECAAAAAFwAAAAAAAEACmF0Z3VpZ3VkYjMAB3N0dWRlbnQAAwMPDwQ8AB4A</span></span><br><span class="line"><span class="string">BgEBAAIBIb5L+N8=</span></span><br><span class="line"><span class="string">9pC7ZB8BAAAARwAAAAgDAAAAAFwAAAAAAAEAAgAD//8ADwAAAAbotbXlha0G5LqM54+tAA8AAAAD</span></span><br><span class="line"><span class="string">VG9tBuS6jOePrVN20fs=</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line">### <span class="keyword">UPDATE</span> `atguigudb3`.`student`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">15</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;赵六&#x27;</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;二班&#x27;</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">15</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;二班&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">776</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">807</span> CRC32 <span class="number">0x6f80cb79</span> Xid <span class="operator">=</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;AUTOMATIC&#x27;</span> <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># <span class="keyword">End</span> <span class="keyword">of</span> log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前面的命令同时显示binlog格式的语句，使用如下命令不显示它</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# mysqlbinlog <span class="operator">-</span>v <span class="comment">--base64-output=DECODE-ROWS &quot;/var/lib/mysql/atguigu-bin.000002&quot;</span></span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">4</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> server id <span class="number">1</span>  end_log_pos <span class="number">125</span> CRC32 <span class="number">0xfbe10f64</span> <span class="keyword">Start</span>: binlog v <span class="number">4</span>, server v <span class="number">8.0</span><span class="number">.25</span> created <span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> <span class="keyword">at</span> startup</span><br><span class="line"># Warning: this binlog <span class="keyword">is</span> either <span class="keyword">in</span> use <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line"><span class="keyword">ROLLBACK</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">125</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> server id <span class="number">1</span>  end_log_pos <span class="number">156</span> CRC32 <span class="number">0x7b4b2408</span> Previous<span class="operator">-</span>GTIDs</span><br><span class="line"># [<span class="keyword">empty</span>]</span><br><span class="line"># <span class="keyword">at</span> <span class="number">156</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">235</span> CRC32 <span class="number">0x80f68688</span> Anonymous_GTIDlast_committed<span class="operator">=</span><span class="number">0</span>sequence_number<span class="operator">=</span><span class="number">1</span>rbr_only<span class="operator">=</span>yesoriginal_committed_timestamp<span class="operator">=</span><span class="number">1690013906305153</span>immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013906305153</span>transaction_length<span class="operator">=</span><span class="number">312</span></span><br><span class="line"><span class="comment">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1690013906305153</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26.305153</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013906305153</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26.305153</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1690013906305153*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">235</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">316</span> CRC32 <span class="number">0x0e6498f6</span> Querythread_id<span class="operator">=</span><span class="number">8</span>exec_time<span class="operator">=</span><span class="number">0</span>error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1690013906</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.pseudo_thread_id<span class="operator">=</span><span class="number">8</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.foreign_key_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.sql_auto_is_null<span class="operator">=</span><span class="number">0</span>, @<span class="variable">@session</span>.unique_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.autocommit<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.sql_mode<span class="operator">=</span><span class="number">1168113696</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.auto_increment_increment<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.auto_increment_offset<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb4 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.character_set_client<span class="operator">=</span><span class="number">255</span>,@<span class="variable">@session</span>.collation_connection<span class="operator">=</span><span class="number">255</span>,@<span class="variable">@session</span>.collation_server<span class="operator">=</span><span class="number">255</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.lc_time_names<span class="operator">=</span><span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.collation_database<span class="operator">=</span><span class="keyword">DEFAULT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80011 SET @@session.default_collation_for_utf8mb4=255*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">316</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">384</span> CRC32 <span class="number">0xa3ddc17f</span> Table_map: `atguigudb3`.`student` mapped <span class="keyword">to</span> number <span class="number">92</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">384</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">437</span> CRC32 <span class="number">0x77beae88</span> Write_rows: <span class="keyword">table</span> id <span class="number">92</span> flags: STMT_END_F</span><br><span class="line">### <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `atguigudb3`.`student`</span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">18</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;Jerry&#x27;</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;四班&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">437</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">26</span> server id <span class="number">1</span>  end_log_pos <span class="number">468</span> CRC32 <span class="number">0x0ba33a3f</span> Xid <span class="operator">=</span> <span class="number">14</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">468</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">547</span> CRC32 <span class="number">0xcd6ec87a</span> Anonymous_GTIDlast_committed<span class="operator">=</span><span class="number">1</span>sequence_number<span class="operator">=</span><span class="number">2</span>rbr_only<span class="operator">=</span>yesoriginal_committed_timestamp<span class="operator">=</span><span class="number">1690013942336137</span>immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013942336137</span>transaction_length<span class="operator">=</span><span class="number">339</span></span><br><span class="line"><span class="comment">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1690013942336137</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02.336137</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1690013942336137</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-22</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02.336137</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1690013942336137*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80025*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">547</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">637</span> CRC32 <span class="number">0x0e4d6052</span> Querythread_id<span class="operator">=</span><span class="number">8</span>exec_time<span class="operator">=</span><span class="number">0</span>error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1690013942</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">637</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">705</span> CRC32 <span class="number">0xdff84bbe</span> Table_map: `atguigudb3`.`student` mapped <span class="keyword">to</span> number <span class="number">92</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">705</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">776</span> CRC32 <span class="number">0xfbd17653</span> Update_rows: <span class="keyword">table</span> id <span class="number">92</span> flags: STMT_END_F</span><br><span class="line">### <span class="keyword">UPDATE</span> `atguigudb3`.`student`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">15</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;赵六&#x27;</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;二班&#x27;</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">15</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;二班&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">776</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">807</span> CRC32 <span class="number">0x6f80cb79</span> Xid <span class="operator">=</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;AUTOMATIC&#x27;</span> <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># <span class="keyword">End</span> <span class="keyword">of</span> log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br></pre></td></tr></table></figure><p>关于mysqlbinlog工具的使用技巧还有很多，例如只解析对某个库的操作或者某个时间段内的操作等。简单分享几个常用的语句，更多操作可以参考官方文档。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#  可查看参数帮助</span><br><span class="line">mysqlbinlog  <span class="comment">--no-defaults --help</span></span><br><span class="line">#  查看最后<span class="number">100</span>行</span><br><span class="line">mysqlbinlog <span class="comment">--no-defaults --base64-output=decode-rows -vv atguigu-bin.000002 |tail -100</span></span><br><span class="line"># 根据position查找</span><br><span class="line">mysqlbinlog  <span class="comment">--no-defaults --base64-output=decode-rows -vv atguigu-bin.000002 |grep -A 20  &#x27;4939002&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这种办法读取出binlog日志的全文内容比较多，不容易分辨查看到pos点信息，下面介绍一种更为方便的查询命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events [<span class="keyword">IN</span> <span class="string">&#x27;log_name&#x27;</span>] [<span class="keyword">FROM</span> pos] [LIMIT [<span class="keyword">offset</span>,] row_count];</span><br></pre></td></tr></table></figure><ul><li><code>IN ‘log_name’</code> ：指定要查询的binlog文件名（不指定就是第一个binlog文件）</li><li><code>FROM pos</code> ：指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）</li><li><code>LIMIT [offset]</code>：偏移量(不指定就是0)</li><li><code>row_count</code> :查询总条数（不指定就是所有行）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;atguigu-bin.000002&#x27;</span>;  </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+-----------+-------------+--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> Pos <span class="operator">|</span> Event_type     <span class="operator">|</span> Server_id <span class="operator">|</span> End_log_pos <span class="operator">|</span> Info                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+-----------+-------------+--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span>   <span class="number">4</span> <span class="operator">|</span> Format_desc    <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">125</span> <span class="operator">|</span> Server ver: <span class="number">8.0</span><span class="number">.25</span>, Binlog ver: <span class="number">4</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">125</span> <span class="operator">|</span> Previous_gtids <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">156</span> <span class="operator">|</span>                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">156</span> <span class="operator">|</span> Anonymous_Gtid <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">235</span> <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">235</span> <span class="operator">|</span> Query          <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">316</span> <span class="operator">|</span> <span class="keyword">BEGIN</span>                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">316</span> <span class="operator">|</span> Table_map      <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">384</span> <span class="operator">|</span> table_id: <span class="number">92</span> (atguigudb3.student)    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">384</span> <span class="operator">|</span> Write_rows     <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">437</span> <span class="operator">|</span> table_id: <span class="number">92</span> flags: STMT_END_F       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">437</span> <span class="operator">|</span> Xid            <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">468</span> <span class="operator">|</span> <span class="keyword">COMMIT</span> <span class="comment">/* xid=14 */</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">468</span> <span class="operator">|</span> Anonymous_Gtid <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">547</span> <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">547</span> <span class="operator">|</span> Query          <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">637</span> <span class="operator">|</span> <span class="keyword">BEGIN</span>                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">637</span> <span class="operator">|</span> Table_map      <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">705</span> <span class="operator">|</span> table_id: <span class="number">92</span> (atguigudb3.student)    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">705</span> <span class="operator">|</span> Update_rows    <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">776</span> <span class="operator">|</span> table_id: <span class="number">92</span> flags: STMT_END_F       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">776</span> <span class="operator">|</span> Xid            <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>         <span class="number">807</span> <span class="operator">|</span> <span class="keyword">COMMIT</span> <span class="comment">/* xid=15 */</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+-----------+-------------+--------------------------------------+</span></span><br></pre></td></tr></table></figure><p>上面这条语句可以将指定的binlog日志文件，分成有效事件行的方式返回，并可使用limit指定pos点的起始偏移，查询条数。其它举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#a、查询第一个最早的binlog日志:</span><br><span class="line">show binlog events\G ;</span><br><span class="line"></span><br><span class="line">#b、指定查询mysql-bin.088002这个文件</span><br><span class="line">show binlog events in &#x27;atguigu-bin.000002&#x27;\G;</span><br><span class="line"></span><br><span class="line">#c、指定查询mysql-bin.0888日2这个文件，从pos点:391开始查起:</span><br><span class="line">show binlog events in &#x27;atguigu-bin . 088882&#x27; from 391\G;</span><br><span class="line"></span><br><span class="line">#d、指定查询mysql-bin.000002这个文件，从pos点:391开始查起，查询5条（即5条语句</span><br><span class="line">show binlog events in &#x27;atguigu-bin.080802&#x27; from 391 limit 5\G;</span><br><span class="line"></span><br><span class="line">#e、指定查询 mysql-bin.000002这个文件，从pos点:391开始查起，偏移2行〈即中间跳过2个）查询5条（即5条语句)。</span><br><span class="line">show binlog events in &#x27;atguigu-bin.088002 &#x27; from 391 limit 2,5\G;</span><br></pre></td></tr></table></figure><p>上面我们讲了这么多都是基于binlog的默认格式，binlog格式查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> + ---------------+-------  +</span></span><br><span class="line"><span class="comment">| Variable_name | Value |</span></span><br><span class="line"><span class="comment"> + ---------------+-------  +</span></span><br><span class="line"><span class="comment">| binlog_format | ROW   |</span></span><br><span class="line"><span class="comment"> + ---------------+-------  +</span></span><br><span class="line"><span class="comment">1 行于数据集 (0.02秒)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>除此之外，binlog还有2种格式，分别是<code>Statement</code>和<code>Mixed</code></p><ul><li><p>Statement<br>每一条会修改数据的sql都会记录在binlog中。</p><p>优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。</p></li><li><p>Row<br>5.1.5版本的MySQL才开始支持row level 的复制，它不记录sql语句上下文相关信息，仅保存哪条记录被修改。<br>优点：row level 的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题。</p></li><li><p>Mixed</p><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p></li></ul><p>详细情况，下章讲解。</p><h3 id="5-4-使用日志恢复数据"><a href="#5-4-使用日志恢复数据" class="headerlink" title="5.4 使用日志恢复数据"></a>5.4 使用日志恢复数据</h3><p>如果MySQL服务器启用了二进制日志，在数据库出现意外丢失数据时，可以使用MySQLbinlog工具从指定的时间点开始（例如，最后一次备份）直到现在或另一个指定的时间点的日志中恢复数据。</p><p>mysqlbinlog恢复数据的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [option] filename<span class="operator">|</span>mysql –uuser <span class="operator">-</span>ppass;</span><br></pre></td></tr></table></figure><p>这个命令可以这样理解：使用mysqlbinlog命令来读取filename中的内容，然后使用mysql命令将这些内容恢复到数据库中。</p><ul><li><code>filename </code>：是日志文件名。</li><li><code>option </code>：可选项，比较重要的两对option参数是–start-date、–stop-date 和–start-position、– stop-position。<ul><li>–start-date 和 –stop-date ：可以指定恢复数据库的起始时间点和结束时间点。</li><li>–start-position和–stop-position ：可以指定恢复数据的开始位置和结束位置。</li></ul></li></ul><blockquote><p>注意：使用mysqlbinlog命令进行恢复操作时，必须是编号小的先恢复，例如atguigu-bin.000001必须在atguigu-bin.000002之前恢复。</p></blockquote><p><strong>案例</strong></p><p>现在对student表有以下操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use atguigudb3;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三<span class="number">2</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四<span class="number">1</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Jane    <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> Tom     <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> Jerry   <span class="operator">|</span> 四班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> 钱七    <span class="operator">|</span> 三班   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#插入数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">21</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;No1&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">22</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;No1&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student(id,name,class) <span class="keyword">values</span>(<span class="number">23</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;No1&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三<span class="number">2</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四<span class="number">1</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Jane    <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> Tom     <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> Jerry   <span class="operator">|</span> 四班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> 钱七    <span class="operator">|</span> 三班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">21</span> <span class="operator">|</span> aaa     <span class="operator">|</span> No1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">22</span> <span class="operator">|</span> aaa     <span class="operator">|</span> No1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">23</span> <span class="operator">|</span> aaa     <span class="operator">|</span> No1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;bbb&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">22</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三<span class="number">2</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四<span class="number">1</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Jane    <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> Tom     <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> Jerry   <span class="operator">|</span> 四班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> 钱七    <span class="operator">|</span> 三班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">22</span> <span class="operator">|</span> bbb     <span class="operator">|</span> No1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">23</span> <span class="operator">|</span> aaa     <span class="operator">|</span> No1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>误操作</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">21</span>;</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> class  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三<span class="number">2</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四<span class="number">1</span>   <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Jane    <span class="operator">|</span> 一班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">15</span> <span class="operator">|</span> Tom     <span class="operator">|</span> 二班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> Jerry   <span class="operator">|</span> 四班   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> 钱七    <span class="operator">|</span> 三班   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>尝试恢复</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前数据库的bin_log日志</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="type">binary</span> logs;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> File_size <span class="operator">|</span> Encrypted <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>       <span class="number">179</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span>      <span class="number">2685</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#新增binlog【利用日志恢复本质上依旧是对表进行增删改，仍然会产生bin_log日志。所以我们应该新增一个bin_log日志，避免对用于恢复的日志<span class="number">00002</span>产生影响】</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="type">binary</span> logs;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> File_size <span class="operator">|</span> Encrypted <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>       <span class="number">179</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span>      <span class="number">2734</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000003</span> <span class="operator">|</span>       <span class="number">156</span> <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;位置恢复show binlog events in&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557348.png"></p><p>查看日志发现，在备份数据后首先执行的是插入数据操作，在Info信息中xid的值分别是22、23、24 (紧邻的三项)</p><p><strong>思路：</strong>先恢复3个insert22 23 24，再恢复delete 26，最后update 27</p><p>&#x3D;&#x3D;步骤1:恢复插入的数据&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line">[root<span class="variable">@centos7</span><span class="operator">-</span>mysql<span class="number">-1</span> mysql]# <span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqlbinlog <span class="comment">--start-position=初位置 --stop-position=初位置 --database=数据库名 /var/lib/mysql/日志文件 | /usr/bin/mysql -uroot -p密码 -v 数据库名</span></span><br><span class="line">#实战</span><br><span class="line">[root<span class="variable">@hadoop102</span> mysql]# <span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqlbinlog <span class="comment">--start-position=886 --stop-position=1728 --database=atguigudb3 /var/lib/mysql/atguigu-bin.000002 | /usr/bin/mysql -uroot -proot -v atguigudb3;</span></span><br></pre></td></tr></table></figure><p>执行完进行查看，发现这三个插入操作已经被恢复</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557346.png" alt="image-20230722190125039"></p><p>&#x3D;&#x3D;步骤2:恢复删除的数据&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# <span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqlbinlog <span class="comment">--start-position=1807 --stop-position=2035 --database=atguigudb3 /var/lib/mysql/atguigu-bin.000002 | /usr/bin/mysql -uroot -proot -v atguigudb3;</span></span><br></pre></td></tr></table></figure><p>查看结果</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557923.png" alt="image-20230722191750190"></p><p>&#x3D;&#x3D;步骤3:恢复修改的数据的数据&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> mysql]# <span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqlbinlog <span class="comment">--start-position=2114 --stop-position=2365 --database=atguigudb3 /var/lib/mysql/atguigu-bin.000002 | /usr/bin/mysql -uroot -proot -v atguigudb3;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557951.png" alt="image-20230722205229333"></p><p>可以看到最终结果和删除数据之前的结果一样，利用binlog实现了数据恢复。</p><p>当然也可以使用日期恢复，命令格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>usr<span class="operator">/</span>bin<span class="operator">/</span>mysqlbinlog <span class="comment">--start-datetime=&quot;2023-07-22 16:14:20” --stop-datetime=&quot;2023-07-22 16:19:02&quot;  --database=atguigudb3 /var/lib/mysql/binlog/atguigu-bin.000002 | /usr/bin/mysql -uroot root  -v atguigudb3</span></span><br></pre></td></tr></table></figure><p>另外，有时候可能出现一个事务A执行时间过短，几秒内执行完成。此时我们找到下一个事务B的开始时间和结束时间。只要恢复的时间在B结束时间之前就可以只恢复A不恢复B【只要时间不完全包含一个事务，那么此事务就不会进行恢复~】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">at</span> <span class="number">4</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> server id <span class="number">1</span>  end_log_pos <span class="number">125</span> CRC32 <span class="number">0xfbe10f64</span> <span class="keyword">Start</span>: binlog v <span class="number">4</span>, server v <span class="number">8.0</span><span class="number">.25</span> created <span class="number">230722</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">20</span> <span class="keyword">at</span> startup</span><br><span class="line"># Warning: this binlog <span class="keyword">is</span> either <span class="keyword">in</span> use <span class="keyword">or</span> was <span class="keyword">not</span> closed properly.</span><br><span class="line"><span class="keyword">ROLLBACK</span><span class="comment">/*!*/</span>;</span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">547</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">637</span> CRC32 <span class="number">0x0e4d6052</span> Querythread_id<span class="operator">=</span><span class="number">8</span>exec_time<span class="operator">=</span><span class="number">0</span>error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1690013942</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>......</span><br><span class="line"># <span class="keyword">at</span> <span class="number">776</span></span><br><span class="line">#<span class="number">230722</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">02</span> server id <span class="number">1</span>  end_log_pos <span class="number">807</span> CRC32 <span class="number">0x6f80cb79</span> Xid <span class="operator">=</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;AUTOMATIC&#x27;</span> <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># <span class="keyword">End</span> <span class="keyword">of</span> log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br></pre></td></tr></table></figure><p>mysqlbinlog命令对于意外操作非常有效，比如因操作不当误删了数据表。</p><h3 id="5-5-删除二进制日志"><a href="#5-5-删除二进制日志" class="headerlink" title="5.5 删除二进制日志"></a>5.5 删除二进制日志</h3><p>MySQL的二进制文件可以配置自动删除，同时MySQL也提供了安全的手动删除二进制文件的方法。PURGE MASTER LOGS只删除指定部分的二进制日志文件， RESET MASTER删除所有的二进制日志文件。具体如下：</p><ol><li><strong>PURGE MASTER LOGS：删除指定日志文件</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PURGE &#123;MASTER <span class="operator">|</span> <span class="type">BINARY</span>&#125; LOGS <span class="keyword">TO</span> <span class="string">&#x27;指定日志文件名&#x27;</span></span><br><span class="line">PURGE &#123;MASTER <span class="operator">|</span> <span class="type">BINARY</span>&#125; LOGS BEFORE <span class="string">&#x27;指定日期&#x27;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;举例:使用PURGE MASTER LOGS语句删除创建时间比binlog.000005早的所有日志&#x3D;&#x3D;</p><p>(1）多次重新启动MySQL服务，便于生成多个日志文件。然后用SHOW语句显示二进制日志文件列表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br></pre></td></tr></table></figure><p>(2）执行PURGE MASTER LOGS语句删除创建时间比binlog.oo0005早的所有日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PURGE MASTER LoGS <span class="keyword">TO</span> &quot;binlog.000005&quot;;</span><br></pre></td></tr></table></figure><p>(3）显示二进制日志文件列表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS ;</span><br></pre></td></tr></table></figure><p>比binlog.000005早的所有日志文件都已经被删除了。</p><p>&#x3D;&#x3D;举例:使用PURGE MASTER LOGS语句删除2020年10月25号前创建的所有日志文件。具体步骤如下:&#x3D;&#x3D;</p><p>(1）显示二进制日志文件列表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br></pre></td></tr></table></figure><p>(2）执行mysqlbinlog命令查看二进制日志文件binlog.000005的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="comment">--no-defaults &quot;/var/lib/mysql/atguigu-bin.000005&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557981.png" alt="image-20230805163137644"></p><p>结果可以看出20230805为日志创建的时间，即2023年08月05日。</p><p>(3）使用PURGE MASTER LOGs语句删除2022年1月05日前创建的所有日志文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PURGE MASTER LoGS before &quot;20220105&quot;;</span><br></pre></td></tr></table></figure><p>(4）显示二进制日志文件列表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS ;</span><br></pre></td></tr></table></figure><p>2023年08月05号之前的二进制日志文件都已经被删除，最后一个没有删除，是因为当前在用，还未记录最后的时间，所以未被删除。</p><p><strong>2.RESET MASTER:删除所有二进制日志文件</strong></p><p>使用<code>RESET MASTER</code>语句，清空所有的binlog日志。MySQL会重新创建二进制文件，新的日志文件扩展名将重新从000001开始编号。<code>慎用</code>!</p><p>举例:使用RESET MASTER语句删除所有日志文件。</p><p>(1）重启MySQL服务若干次，执行SHOW语句显示二进制日志文件列表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br></pre></td></tr></table></figure><p>(2)执行RESET MASTER语句，删除所有日志文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESET MASTER;</span><br></pre></td></tr></table></figure><p>执行完该语句后，原来的所有二进制日志已经全部被删除。</p><h3 id="5-6-其它场景"><a href="#5-6-其它场景" class="headerlink" title="5.6 其它场景"></a>5.6 其它场景</h3><p>二进制日志可以通过数据库的<code>全量备份</code>和二进制日志中保存的<code>增量信息</code> ，完成数据库的<code>无损失恢复</code> 。但是，如果遇到数据量大、数据库和数据表很多（比如分库分表的应用）的场景，用二进制日志进行数据恢复，是很有挑战性的，因为起止位置不容易管理。</p><p>在这种情况下，一个有效的解决办法是<code>配置主从数据库服务器</code> ，甚至是一主多从 的架构，把二进制日志文件的内容通过中继日志，同步到从数据库服务器中，这样就可以有效避免数据库故障导致的数据异常等问题。</p><h2 id="6-再谈二进制日志-binlog"><a href="#6-再谈二进制日志-binlog" class="headerlink" title="6. 再谈二进制日志(binlog)"></a>6. 再谈二进制日志(binlog)</h2><h3 id="6-1-写入机制"><a href="#6-1-写入机制" class="headerlink" title="6.1 写入机制"></a>6.1 写入机制</h3><p>binlog的写入时机也非常简单，事务执行过程中，先把日志写到<code>binlog cache</code> ，事务提交的时候，再把binlog cache写到binlog文件中。因为&#x3D;&#x3D;一个事务的binlog不能被拆开，无论这个事务多大，也要确保一次性写入&#x3D;&#x3D;，所以系统会给每个线程分配一个块内存作为binlog cache。</p><p>我们可以通过<code>binlog_cache_size</code>参数控制单个线程binlog cache大小，如果存储内容超过了这个参数，就要暂存到磁盘(Swap)。binlog日志刷盘流程如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557036.png" alt="image-20230806151615285"></p><p>write和fsync的时机，可以由参数<code>sync_binlog </code>控制，默认是0 。为0的时候，表示每次提交事务都只write，由系统自行判断什么时候执行fsync。虽然性能得到提升，但是机器宕机，page cache里面的binglog 会丢失。如下图：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557074.png" alt="image-20230806151719545"></p><p>为了安全起见，可以设置为1 ，表示每次提交事务都会执行fsync，就如同<code>redo log 刷盘流程</code>一样。最后还有一种折中方式，可以设置为<code>N</code>(N&gt;1)，表示每次提交事务都write，但累积N个事务后才fsync。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557241.png" alt="image-20230806151910974"></p><p>在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。同样的，如果机器宕机，会丢失最近N个事务的binlog日志。</p><h3 id="6-2-binlog与redolog对比"><a href="#6-2-binlog与redolog对比" class="headerlink" title="6.2 binlog与redolog对比"></a>6.2 binlog与redolog对比</h3><ul><li>redo log 它是<code>物理日志</code> ，记录内容是“在某个数据页上做了什么修改”，属于 InnoDB 存储引擎层产生的。</li><li>而 binlog 是<code>逻辑日志</code> ，记录内容是语句的原始逻辑，类似于“给 ID&#x3D;2 这一行的 c 字段加 1”，属于 MySQL Server层。</li></ul><p>虽然它们都属于持久化的保证，但是侧重点不同：</p><ul><li>redo log让InnoDB存储引擎拥有了崩溃恢复能力</li><li>binlog 保证了MySQL集群架构的数据一致性</li></ul><h3 id="6-3-两阶段提交"><a href="#6-3-两阶段提交" class="headerlink" title="6.3 两阶段提交"></a>6.3 两阶段提交</h3><p>在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的 <code>写入时机</code> 不一样</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557423.png" alt="image-20230806152740528"></p><p><strong>redo log与binlog两份日志之间的逻辑不一致，会出现什么问题？</strong></p><p>以update语句为例，假设id&#x3D;2的记录，字段c值是0，把字段c值更新成1，SQL语句为update T set c&#x3D;1 where id&#x3D;2。</p><p>假设执行过程中写完redo log日志后，binlog日志写期间发生了异常，会出现什么情况呢?</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557461.png" alt="image-20230806152946955"></p><p>由于binlog没写完就异常，这时候binlog里面没有对应的修改记录。因此，之后用binlog日志恢复数据时，就会少这一次更新，恢复出来的这一行c值是0，而原库因为redo log日志恢复，这一行c值是1，最终数据不一致。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557495.png" alt="image-20230806153016005"></p><p>为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用两阶段提交方案。原理很简单，将redo log的写入拆成了两个步骤prepare和commit，这就是<code>两阶段提交</code>。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557543.png" alt="image-20230806153119152"></p><p>使用<code>两阶段提交</code>后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redolog还处于prepare阶段，并且没有对应binlog日志，就会回滚该事务。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557882.png" alt="image-20230806153232003"></p><p>另一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557932.png" alt="image-20230806153253328"></p><p>并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</p><h2 id="7-中继日志-relay-log"><a href="#7-中继日志-relay-log" class="headerlink" title="7. 中继日志(relay log)"></a>7. 中继日志(relay log)</h2><h3 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7.1 介绍"></a>7.1 介绍</h3><p>&#x3D;&#x3D;<strong>中继日志只在主从服务器架构的从服务器上存在</strong>&#x3D;&#x3D;。从服务器为了与主服务器保持一致，要从主服务器读取二进制日志的内容，并且把读取到的信息写入<code>本地的日志文件</code>中，这个&#x3D;&#x3D;从服务器本地的日志文件就叫中继日志&#x3D;&#x3D;。然后，从服务器读取中继日志，并根据中继日志的内容对从服务器的数据进行更新，完成主从服务器的<code>数据同步</code>。</p><p>搭建好主从服务器之后，中继日志默认会保存在从服务器的数据目录下。</p><p>文件名的格式是：<code> 从服务器名 -relay-bin.序号</code> 。中继日志还有一个索引文件： <code>从服务器名 -relay-bin.index</code> ，用来定位当前正在使用的中继日志。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202308061557976.png"></p><h3 id="7-2-查看中继日志"><a href="#7-2-查看中继日志" class="headerlink" title="7.2 查看中继日志"></a>7.2 查看中继日志</h3><p>中继日志与二进制日志的格式相同，可以用 <code>mysqlbinlog </code>工具进行查看。下面是中继日志的一个片段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1618558728</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">950</span></span><br><span class="line">#<span class="number">210416</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">48</span> server id <span class="number">1</span>  end_log_pos <span class="number">832</span> CRC32 <span class="number">0xcc16d651</span>  Table_map:</span><br><span class="line">`atguigu`.`test` mapped <span class="keyword">to</span> number <span class="number">91</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">1000</span></span><br><span class="line">#<span class="number">210416</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">48</span> server id <span class="number">1</span>  end_log_pos <span class="number">872</span> CRC32 <span class="number">0x07e4047c</span>  Delete_rows: <span class="keyword">table</span> id</span><br><span class="line"><span class="number">91</span> flags: STMT_END_F  <span class="comment">-- server id 1 是主服务器，意思是主服务器删了一行数据</span></span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">CD95YBMBAAAAMgAAAEADAAAAAFsAAAAAAAEABGRlbW8ABHRlc3QAAQMAAQEBAFHWFsw=</span></span><br><span class="line"><span class="string">CD95YCABAAAAKAAAAGgDAAAAAFsAAAAAAAEAAgAB/wABAAAAfATkBw==</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">1040</span></span><br><span class="line"><span class="operator">*</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>这一段的意思是，主服务器（“server id 1”）对表 atguigu.test 进行了 2 步操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定位到表 atguigu.test 编号是 <span class="number">91</span> 的记录，日志位置是 <span class="number">832</span>;</span><br><span class="line">删除编号是 <span class="number">91</span> 的记录，日志位置是 <span class="number">872</span>。</span><br></pre></td></tr></table></figure><h3 id="7-3-恢复的典型错误"><a href="#7-3-恢复的典型错误" class="headerlink" title="7.3 恢复的典型错误"></a>7.3 恢复的典型错误</h3><p>如果从服务器宕机，有的时候为了系统恢复，要重装操作系统，这样就可能会导致你的<code>服务器名称</code>与之前<code>不同</code> 。而中继日志里是 包含从服务器名 的。在这种情况下，就可能导致你恢复从服务器的时候，无法从宕机前的中继日志里读取数据，以为是日志文件损坏了，其实是名称不对了。</p><p>解决的方法也很简单，把从服务器的名称改回之前的名称。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六、主从复制</title>
      <link href="/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC16%E7%AB%A0%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2024/04/05/MySQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/%E7%AC%AC16%E7%AB%A0%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1、主从复制概述"><a href="#1、主从复制概述" class="headerlink" title="1、主从复制概述"></a>1、主从复制概述</h2><h3 id="1-1-如何提升数据库并发能力"><a href="#1-1-如何提升数据库并发能力" class="headerlink" title="1.1 如何提升数据库并发能力"></a>1.1 如何提升数据库并发能力</h3><p>在实际工作中常常将<code>Redis</code>作为缓存与<code>MySQL</code>配合来使用，当有请求的时候，首先会从缓存中进行查找，如果存在就直接取出。如果不存在再访问数据库，这样就<code>提升了读取的效率</code>，也减少了对后端数据库的<code>访问压力</code>。Redis的缓存架构是<code>高并发架构</code>中非常重要的一环。</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213491.png" alt="image-20230930143700163" style="zoom:80%;" /><p>此外，一般应用对数据库而言都是“ <code>读多写少</code> ”，也就说对数据库读取数据的压力比较大，有一个思路就是采用数据库集群的方案，做<code>主从架构</code>、进行<code>读写分离</code> ，这样同样可以提升数据库的并发处理能力。但并不是所有的应用都需要对数据库进行主从架构的设置，毕竟设置架构本身是有成本的。</p><p>如果我们的目的在于提升数据库高并发访问的效率，那么首先考虑的是如何 <code>优化SQL和索引</code> ，这种方式简单有效；其次才是采用 <code>缓存</code>的策略 ，比如使用 Redis将热点数据保存在内存数据库中，提升读取的效率；最后才是对数据库采用<code>主从架构</code> ，进行读写分离。</p><p>按照上面的方式进行优化，使用和维护的成本是由低到高的。</p><h3 id="1-2-主从复制的作用"><a href="#1-2-主从复制的作用" class="headerlink" title="1.2 主从复制的作用"></a>1.2 主从复制的作用</h3><p>主从同步设计不仅可以提高数据库的吞吐量，还有以下 3 个方面的作用。</p><p><strong>第1个作用：读写分离。</strong><br>我们可以通过主从复制的方式来<code>同步数据</code>，然后通过读写分离提高数据库并发处理能力</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212076.png" alt="image-20230930143925602"></p><p>其中一个是Master主库，负责写入数据，我们称之为：写库。</p><p>其它都是Slave从库，负责读取数据，我们称之为：读库。</p><p>当主库进行更新的时候，会自动将数据复制到从库中，而在客户端读取数据的时候，会从从库中进行读取。</p><p>面对“<code>读多写少</code>“的需求，采用读写分离的方式，可以实现<code>更高的并发访问</code>。同时还能对从服务器进行<code>负载均衡</code>，让不同的读请求按照策略均匀地分发到不同的从服务器上，让读取更加顺畅。读取顺畅的另一个原因，就是减少了锁表的影响，比如我们让主库负责写，当主库出现写锁的时候，不会影响到从库进行SELECT的读取。</p><p><strong>第2个作用就是数据备份</strong><br>通过主从复制将主库上的数据复制到了从库上，相当于是一种热备份机制，也就是在主库正常运行的情况下进行的备份，不会影响到服务</p><p><strong>第3个作用是具有高可用性</strong></p><p>数据备份实际上是一种冗余的机制，通过这种冗余的方式可以换取数据库的高可用性，也就是当服务器出现<code>故障</code>或<code>宕机</code>的情况下，可以切换到从服务器上，保证服务的正常运行。</p><p>关于高可用性的程度，我们可以用一个指标衡量，即正常可用时间&#x2F;全年时间。比如要达到全年99.999%的时间都可用，就意味着系统在一年中的不可用时间不得超过<code>365*24*60*(1-99.999%)=5.256</code>分钟(含系统崩溃的时间、日常维护操作导致的停机时间等)，其他时间都需要保持可用的状态。</p><p>实际上，更高的高可用性，意味着需要付出更高的成本代价。在现实中需要结合业务需求和成本来进行选择。</p><h2 id="2、主从复制的原理"><a href="#2、主从复制的原理" class="headerlink" title="2、主从复制的原理"></a>2、主从复制的原理</h2><p><strong><font color=red><code>Slave</code>会从 <code>Master</code>读取 <code>binlog</code>来进行数据同步。</font></strong></p><h3 id="2-1-原理剖析"><a href="#2-1-原理剖析" class="headerlink" title="2.1 原理剖析"></a>2.1 原理剖析</h3><p><strong>三个线程</strong></p><p>实际上主从同步的原理就是基于 binlog 进行数据同步的。在主从复制过程中，会基于 <code>3 个线程</code> 来操作，一个主库线程，两个从库线程。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212072.png" alt="image-20230930144217966"></p><p><code>二进制日志转储线程</code> （Binlog dump thread）是一个主库线程。当从库线程连接的时候， 主库可以将二进制日志发送给从库，当主库读取事件（Event）的时候，会在 Binlog 上 <code>加锁</code> ，读取完成之后，再将锁释放掉。–&gt;**<font color=red>二进制日志转储线程负责将数据发送出去</font>**。</p><p><code>从库 I/O 线程 </code>会连接到主库，向主库发送请求更新 Binlog。这时从库的 I&#x2F;O 线程就可以读取到主库的二进制日志转储线程发送的 Binlog 更新部分，并且拷贝到本地的<code>中继日志</code> （Relay log）。</p><p><code>从库 SQL 线程</code> 会读取从库中的中继日志，并且执行日志中的事件，将从库中的数据与主库保持同步。</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213684.png" style="zoom:80%;" /><blockquote><p>注意:不是所有版本的MySQL都默认开启服务器的二进制日志。在进行主从同步的时候，需要先检查服务器是否已经开启了二进制日志。</p><p>除非特殊指定，默认情况下从服务器会执行所有主服务器中保存的事件。也可以通过配置，使从服务器执行特定的事件。</p></blockquote><p><strong>复制三步骤</strong></p><ul><li>步骤1： <code>Master</code> 将写操作记录到二进制日志（ binlog ）。这些记录叫做二进制日志事件(binary log event)</li><li>步骤2： <code>Slave </code>将 <code>Master </code>的binary log events拷贝到它的中继日志（ <code>relay log</code> ）；</li><li>步骤3： <code>Slave </code>重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL复制是异步的且串行化的，而且重启后从<code>接入点</code>开始复制。</li></ul><blockquote><p>复制的最大问题：&#x3D;&#x3D;延时&#x3D;&#x3D;</p></blockquote><h3 id="2-2-复制的基本原则"><a href="#2-2-复制的基本原则" class="headerlink" title="2.2 复制的基本原则"></a>2.2 复制的基本原则</h3><ul><li>每个Slave 只有一个Master</li><li>每个Slave 只能有一个唯一的服务器ID</li><li>每个Master 可以有多个Slave</li></ul><h2 id="3、一主一从架构搭建"><a href="#3、一主一从架构搭建" class="headerlink" title="3、一主一从架构搭建"></a>3、一主一从架构搭建</h2><p>一台<code>主机</code>用于处理所有<code>写请求</code> ，一台<code>从机</code>负责所有<code>读请求</code> ，架构图如下：</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213709.png" alt="image-20230930144845781" style="zoom:80%;" /><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h3><p>1、准备 <code>2台</code> CentOS 虚拟机</p><p>2、每台虚拟机上需要安装好MySQL (可以是MySQL8.0 )</p><blockquote><p>说明：前面我们讲过如何克隆一台CentOS。大家可以在一台CentOS上安装好MySQL，进而通过克隆的方式复制出1台包含MySQL的虚拟机</p><p>注意：克隆的方式需要修改新克隆出来主机的：① MAC地址 ② hostname ③ IP 地址 ④ UUID 。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">① 修改编辑虚拟机设置-&gt;网络适配器-&gt;高级-&gt;生成MAC地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">② 修改hostname</span></span><br><span class="line">vim /etc/hostname </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">③修改IP地址和UUID</span></span><br><span class="line">[root@hadoop102_son ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;4977dbfa-6b67-45bb-b0b1-4daa4fgs9c41&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.174.122</span><br><span class="line">GATEWAY=192.168.174.2</span><br><span class="line">DNS1=192.168.174.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">④重启网络</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>此外，克隆的方式生成的虚拟机（包含MySQL Server），则克隆的虚拟机MySQL Server的UUID相同，必须修改，否则在有些场景会报错。比如： show slave status\G ，报如下的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.</span><br></pre></td></tr></table></figure><p>修改MySQL Server 的UUID方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/mysql/auto.cnf </span><br></pre></td></tr></table></figure><h3 id="3-2-主机配置文件"><a href="#3-2-主机配置文件" class="headerlink" title="3.2 主机配置文件"></a>3.2 主机配置文件</h3><p>建议mysql版本一致且后台以服务运行，主从所有配置项都配置在 [mysqld] 节点下，且都是小写字母。</p><p>具体参数配置(<code>/etc/my.cng</code>)如下：</p><ul><li>必选</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[必须]主服务器唯一ID</span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[必须]启用二进制日志,指明路径。比如：自己本地的路径/log/mysqlbin</span> </span><br><span class="line">log-bin=atguigu-bin</span><br></pre></td></tr></table></figure><ul><li>可选</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[可选] 0（默认）表示读写（主机），1表示只读（从机）</span></span><br><span class="line">read-only=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置日志文件保留的时长，单位是秒</span></span><br><span class="line">binlog_expire_logs_seconds=6000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">控制单个二进制日志大小。此参数的最大和默认值是1GB</span></span><br><span class="line">max_binlog_size=200M</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[可选]设置不要复制的数据库</span></span><br><span class="line">binlog-ignore-db=test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[可选]设置需要复制的数据库,默认全部记录。比如：binlog-do-db=atguigu_master_slave</span> </span><br><span class="line">binlog-do-db=需要复制的主数据库名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[可选]设置binlog格式</span></span><br><span class="line">binlog_format=STATEMENT</span><br></pre></td></tr></table></figure><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意:</p><p>先搭建完主从复制，再创建数据库。</p><p>MySQL主从复制起始时，从机不继承主机数据</p></blockquote><h3 id="3-3-从机配置文件"><a href="#3-3-从机配置文件" class="headerlink" title="3.3 从机配置文件"></a>3.3 从机配置文件</h3><p>要求主从所有配置项都配置在 my.cnf（<code>/etc/my.cng</code>） 的 [mysqld] 栏位下，且都是小写字母。</p><ul><li>必选</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[必须]从服务器唯一ID</span></span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><ul><li>可选</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[可选]启用中继日志</span></span><br><span class="line">relay-log=mysql-relay</span><br></pre></td></tr></table></figure><blockquote><p>注意：主从机都关闭防火墙，否则主从复制时可能出问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop #CentOS 6</span><br><span class="line">systemctl stop firewalld.service #CentOS 7</span><br></pre></td></tr></table></figure><p>查看防火墙状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102_son ~]# systemctl status firewalld;</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-4-主机：建立账户并授权"><a href="#3-4-主机：建立账户并授权" class="headerlink" title="3.4 主机：建立账户并授权"></a>3.4 主机：建立账户并授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在主机MySQL里执行授权主从复制的命令</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;从机器数据库IP&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;abc123&#x27;</span>; #<span class="number">5.5</span>,<span class="number">5.7</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果使用的是MySQL8，需要如下的方式建立账户，并授权slave：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE USER <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">GRANT REPLICATION SLAVE ON *.* TO <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show grants <span class="keyword">for</span> <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| Grants for slave1@%                            |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| GRANT REPLICATION SLAVE ON *.* TO `slave1`@`%` |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意下面这句必须执行，不然就会报授权插件错误</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span> </span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>注意：在从机执行show slave status\G时报错：</p><p>Last_IO_Error: error connecting to master ‘<a href="mailto:&#x73;&#x6c;&#97;&#x76;&#101;&#49;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#46;&#x31;&#55;&#52;&#46;&#49;&#48;&#x32;">&#x73;&#x6c;&#97;&#x76;&#101;&#49;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#46;&#x31;&#55;&#52;&#46;&#49;&#48;&#x32;</a>:3306’ - retry-time: 60 retries: 1 message: Authentication plugin ‘caching_sha2_password’ reported error: Authentication requires secure connection.</p></blockquote><p>查询Master的状态，并记录下File和Position的值</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212079.png" alt="image-20230930162726667"></p><blockquote><p>注意：</p><ul><li><p>执行完此步骤后不要再操作主服务器MySQL，防止主服务器状态值变化。</p></li><li><p>为什么不先创建主从数据库的原因是，从机是从FIle-Position开始复制。事先创建好就会导致建表语句不在bin_log中，从而备份的日志不完整~</p></li></ul></blockquote><h3 id="3-5-从机：配置需要复制的主机"><a href="#3-5-从机：配置需要复制的主机" class="headerlink" title="3.5 从机：配置需要复制的主机"></a>3.5 从机：配置需要复制的主机</h3><p><strong>步骤1：</strong>从机上复制主机的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">MASTER_HOST<span class="operator">=</span><span class="string">&#x27;主机的IP地址&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;主机用户名&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;主机用户名的密码&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.具体数字&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS<span class="operator">=</span>具体值;</span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.174.102&#x27;</span>,MASTER_USER<span class="operator">=</span><span class="string">&#x27;slave1&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;atguigu-bin.000011&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">1137</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212081.png" alt="image-20230930172217155"></p><p><strong>步骤2</strong> ：启动slave同步 <code>START SLAVE;</code></p><p>如果报错</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212086.png" alt="image-20230930173752806"></p><p>可以执行如下操作，删除之前的relay_log信息。然后重新执行 CHANGE MASTER TO …语句即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">reset slave; <span class="comment">#删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件</span></span></span><br></pre></td></tr></table></figure><p>接着，查看同步状态。两个参数都是Yes，则说明主从配置成功！</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212098.png" alt="image-20230930163429724"></p><blockquote><p>显示为NO，则是不正确的。则可能是如下的原因</p><ul><li>网络不通</li><li>账户密码错误</li><li>防火墙</li><li>mysql配置文件问题</li><li>连接服务器时语法</li><li>主服务器mysql权限</li></ul></blockquote><h3 id="3-6-测试"><a href="#3-6-测试" class="headerlink" title="3.6 测试"></a>3.6 测试</h3><p>主机新建库、新建表、insert记录，从机复制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE DATABASE atguigu_master_slave;</span></span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use atguigu_master_slave;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> mysql&gt; </span><span class="language-bash">show tables;</span></span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE TABLE student(<span class="built_in">id</span> INT,NAME VARCHAR(15));</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">INSERT INTO student VALUES(1, <span class="string">&#x27;Tom&#x27;</span>);</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">INSERT INTO student VALUES(2,@@hostname);</span></span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from student;</span></span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | NAME      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | Tom       |</span><br><span class="line">|    2 | hadoop102 |</span><br><span class="line">+------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看从机的情况，可以看到主机数据被复制到了从机~ Amazing</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span></span><br><span class="line">+----------------------+</span><br><span class="line">| Database             |</span><br><span class="line">+----------------------+</span><br><span class="line">| atguigu_master_slave |</span><br><span class="line">| atguigudb            |</span><br><span class="line">| atguigudb1           |</span><br><span class="line">| atguigudb2           |</span><br><span class="line">| atguigudb3           |</span><br><span class="line">| dbtest2              |</span><br><span class="line">| information_schema   |</span><br><span class="line">| mysql                |</span><br><span class="line">| performance_schema   |</span><br><span class="line">| sys                  |</span><br><span class="line">| testdb1              |</span><br><span class="line">+----------------------+</span><br><span class="line">11 rows in set (0.02 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use atguigu_master_slave;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show tables;</span></span><br><span class="line">+--------------------------------+</span><br><span class="line">| Tables_in_atguigu_master_slave |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| student                        |</span><br><span class="line">+--------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="keyword">select</span> * from student;</span></span><br><span class="line">+------+---------------+</span><br><span class="line">| id   | NAME          |</span><br><span class="line">+------+---------------+</span><br><span class="line">|    1 | Tom           |</span><br><span class="line">|    2 | hadoop102_son |</span><br><span class="line">+------+---------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="3-7-停止主从同步"><a href="#3-7-停止主从同步" class="headerlink" title="3.7 停止主从同步"></a>3.7 停止主从同步</h3><ul><li>停止主从同步命令：<code>stop slave;</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止主从(要在从机执行哦)</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">stop slave;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看主从复制状态</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW SLAVE STATUS\G;</span></span><br><span class="line">//...</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;验证:主机重新插入新的数据,观察从机是否进行恢复&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212663.png" alt="image-20230930192409457"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212705.png" alt="image-20230930192507184"></p><ul><li>如何重新配置主从</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave; #从机执行</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212741.png" alt="image-20230930192917574"></p><blockquote><p>注意：如果报错,则可以执行<code>reset slave</code>~  删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。特殊情况下可以使用<code>reset master</code>~ 重置Master中所有的binlog日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> reset slave; #删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件</span><br><span class="line">reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-8-后续-搭建双主双从"><a href="#3-8-后续-搭建双主双从" class="headerlink" title="3.8 后续 - 搭建双主双从"></a>3.8 后续 - 搭建双主双从</h3><p>一个主机m1用于处理所有写请求，它的从机s1和另一台主机m2还有它的从机s2负责所有读请求。当m1主机宕机后，m2主机负责写请求，mi、m2互为备机。架构图如下：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212779.png" alt="image-20231001112213456"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212993.png" alt="image-20231001112219443"></p><blockquote><p>具体可以看MyCat教程</p></blockquote><h3 id="3-9-补充：binlog-格式设置说明"><a href="#3-9-补充：binlog-格式设置说明" class="headerlink" title="3.9 补充：binlog 格式设置说明"></a>3.9 补充：binlog 格式设置说明</h3><p>**<font color=blue>格式1： <code>STATEMENT</code>模式 </font>**（基于SQL语句的复制(statement-based replication, SBR)）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog_format=STATEMENT</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;每一条会修改数据的sql语句会记录到binlog中&#x3D;&#x3D;。这是默认的binlog格式。</p><p>SBR 的优点：</p><ul><li>历史悠久，技术成熟</li><li>不需要记录每一行的变化，减少了binlog日志量，文件较小</li><li>binlog中包含了所有数据库更改信息，可以据此来审核数据库的安全等情况</li><li>binlog可以用于实时的还原，而不仅仅用于复制</li><li>主从版本可以不一样，从服务器版本可以比主服务器版本高（因为从和主执行的SQL一样，从可以兼容主）</li></ul><p>SBR 的缺点：</p><ul><li>不是所有的UPDATE语句都能被复制，尤其是包含不确定操作的时候</li><li>使用以下函数的语句也无法被复制：LOAD_FILE()、UUID()、USER()、FOUND_ROWS()、SYSDATE()(除非启动时启用了 –sysdate-is-now 选项)</li><li>INSERT … SELECT 会产生比 RBR 更多的行级锁</li><li>复制需要进行全表扫描(WHERE 语句中没有使用到索引)的 UPDATE 时，需要比 RBR 请求更多的行级锁</li><li>对于有 AUTO_INCREMENT 字段的 InnoDB表而言，INSERT 语句会阻塞其他 INSERT 语句</li><li>对于一些复杂的语句，在从服务器上的耗资源情况会更严重，而 RBR 模式下，只会对那个发生变化的记录产生影响</li><li>执行复杂语句如果出错的话，会消耗更多资源</li><li>数据表必须几乎和主服务器保持一致才行，否则可能会导致复制出错</li></ul><p>**<font color=blue>② ROW模式</font>**（基于行的复制(row-based replication, RBR)）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog_format=ROW</span><br></pre></td></tr></table></figure><blockquote><p>5.1.5版本的MySQL才开始支持，不记录每条sql语句的上下文信息，仅记录哪条数据被修改了，修改成什么样了。</p></blockquote><p>RBR 的优点：</p><ul><li>任何情况都可以被复制，这对复制来说是最安全可靠的。（比如：不会出现某些特定情况下的存储过程、function、trigger的调用和触发无法被正确复制的问题）</li><li>多数情况下，从服务器上的表如果有主键的话，复制就会快了很多</li><li>复制以下几种语句时的行锁更少：INSERT … SELECT、包含 AUTO_INCREMENT 字段的</li><li>INSERT、没有附带条件或者并没有修改很多记录的 UPDATE 或 DELETE 语句</li><li>执行 INSERT，UPDATE，DELETE 语句时锁更少</li><li>从服务器上采用多线程 来执行复制成为可能</li></ul><p>RBR 的缺点：</p><ul><li>binlog 大了很多</li><li>复杂的回滚时 binlog 中会包含大量的数据</li><li>主服务器上执行 UPDATE 语句时，所有发生变化的记录都会写到 binlog 中，而 SBR 只会写一次，这会导致频繁发生 binlog的并发写问题</li><li>无法从 binlog 中看到都复制了些什么语句</li></ul><p>**<font color=blue>③ MIXED模式</font>**（混合模式复制(mixed-based replication, MBR)）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog_format=MIXED</span><br></pre></td></tr></table></figure><blockquote><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合</p></blockquote><p>在Mixed模式下，一般的语句修改使用statment格式保存binlog。如一些函数，statement无法完成主从复制的操作，则采用row格式保存binlog。</p><p>MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。</p><h2 id="4、同步数据一致性问题"><a href="#4、同步数据一致性问题" class="headerlink" title="4、同步数据一致性问题"></a>4、同步数据一致性问题</h2><p><strong>主从同步的要求：</strong></p><ul><li>读库和写库的数据一致(最终一致)；</li><li>写数据必须写到写库；</li><li>读数据必须到读库(不一定)；</li></ul><h3 id="4-1-理解主从延迟问题"><a href="#4-1-理解主从延迟问题" class="headerlink" title="4.1 理解主从延迟问题"></a>4.1 理解主从延迟问题</h3><p>进行主从同步的内容是二进制日志，它是一个文件，在进行<code>网络传输</code>的过程中就一定会存在<code>主从延迟</code>(比如500ms)，这样就可能造成用户在从库上读取的数据不是最新的数据，也就是主从同步中的<code>数据不一致性</code>问题。</p><p><strong>举例:</strong> 导致主从延迟的时间点主要包括以下三个:</p><ul><li>主库A执行完成一个事务，写入binlog，我们把这个时刻记为T1;</li><li>之后传给从库B，我们把从库B接收完这个binlog的时刻记为T2;</li><li>从库B执行完成这个事务，我们把这个时刻记为T3。</li></ul><h3 id="4-2-主从延迟问题原因"><a href="#4-2-主从延迟问题原因" class="headerlink" title="4.2 主从延迟问题原因"></a>4.2 主从延迟问题原因</h3><p>在网络正常的时候，日志从主库传给从库所需的时间是很短的，即T2-T1的值是非常小的。即，网络正常情况下，主备延迟的主要来源是备库接收完binlog和执行完这个事务之间的时间差。</p><p>主备延迟最直接的表现是，从库消费中继日志（relay log）的速度，比主库生产binlog的速度要慢。造成原因：</p><ul><li>从库的机器性能比主库要差</li><li>从库的压力大</li><li>大事务的执行</li></ul><p><font color=blue>举例1：一次性用delete语句删除太多数据</font></p><p>结论：后续再删除数据的时候，要控制每个事务删除的数据量，分成多次删除。</p><p><font color=blue>举例2：一次性用insert…select插入太多数据</font></p><p><font color=blue>举例:3：大表DDL</font></p><p>比如在主库对一张500W的表添加一个字段耗费了10分钟，那么从节点上也会耗费10分钟。</p><h3 id="4-3-如何减少主从延迟"><a href="#4-3-如何减少主从延迟" class="headerlink" title="4.3 如何减少主从延迟"></a>4.3 如何减少主从延迟</h3><p>若想要减少主从延迟的时间，可以采取下面的办法：</p><ul><li>降低多线程大事务并发的概率，优化业务逻辑</li><li>优化SQL，避免慢SQL，<code>减少批量操作 </code>，建议写脚本以update-sleep这样的形式完成。</li><li><code>提高从库机器的配置</code> ，减少主库写binlog和从库读binlog的效率差。</li><li>尽量采用<code>短的链路</code>，也就是主库和从库服务器的距离尽量要短，提升端口带宽，减少binlog传输的网络延时。</li><li>实时性要求的业务读强制走主库，从库只做灾备，备份。</li></ul><h3 id="4-4-如何解决一致性问题"><a href="#4-4-如何解决一致性问题" class="headerlink" title="4.4 如何解决一致性问题"></a>4.4 如何解决一致性问题</h3><p>如果操作的数据存储在同一个数据库中，那么对数据进行更新的时候，可以对记录加写锁，这样在读取的时候就不会发生数据不一致的情况。但这时从库的作用就是<code>备份</code> ，并没有起到<code>读写分离</code> ，分担主库<code>读压力</code>的作用。</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213434.png" alt="image-20231001112415354" style="zoom:80%;" /><p>读写分离情况下，解决主从同步中数据不一致的问题， 就是解决主从之间<code>数据复制方式</code>的问题，如果按照数据一致性 <code>从弱到强 </code>来进行划分，有以下 3 种复制方式。</p><p><strong><font color=blue>方法 1：异步复制</font></strong></p><p>异步模式就是客户端提交COMMIT之后不需要等从库返回任何结果，而是直接将结果返回给客户端，这样做的好处是不会影响主库写的效率，但可能会存在主库宕机，而Binlog还没有同步到从库的情况，也就是此时的主库和从库数据不一致。这时候从从库中选择一个作为新主，那么新主则可能缺少原来主服务器中已提交的事务。所以，这种复制模式下的数据一致性是最弱的。</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213840.png" style="zoom:80%;" /><p><strong><font color=blue>方法 2：半同步复制</font></strong><br>MySQL5.5版本之后开始支持半同步复制的方式。原理是在客户端提交COMMIT之后不直接将结果返回给客户端，而是等待至少有一个从库接收到了Binlog，并且写入到中继日志中，再返回给客户端。</p><p>这样做的好处就是提高了数据的一致性，当然相比于异步复制来说，至少多增加了一个网络连接的延迟，降低了主库写的效率。</p><p>在MySQL5.7版本中还增加了一个<code>rpl_semi_sync_master_wait_for_slave_count</code>参数，可以对应答的从库数量进行设置，默认为1，也就是说只要有1个从库进行了响应，就可以返回给客户端。如果将这个参数调大，可以提升数据一致性的强度，但也会增加主库等待从库响应的时间【以时间换取一致性】</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213592.png" style="zoom:80%;" /><p><strong><font color=blue>方法 3：组复制</font></strong><br>异步复制和半同步复制都无法最终保证数据的一致性问题，半同步复制是通过判断从库响应的个数来决定是否返回给客户端，虽然数据一致性相比于异步复制有提升，但仍然无法满足对数据一致性要求高的场景，比如金融领域。MGR 很好地弥补了这两种复制模式的不足。</p><p>组复制技术，简称 MGR（MySQL Group Replication）。是 MySQL 在 5.7.17 版本中推出的一种新的数据复制技术，这种复制技术是基于 Paxos 协议的状态机复制。</p><p>&#x3D;&#x3D;MGR 是如何工作的&#x3D;&#x3D;</p><p>首先我们将多个节点共同组成一个复制组，在<code>执行读写（RW）事务</code> 的时候，需要通过一致性协议层（Consensus 层）的同意，也就是读写事务想要进行提交，必须要经过组里“大多数人”（对应 Node 节点）的同意，大多数指的是同意的节点数量需要大于 （N&#x2F;2+1），这样才可以进行提交，而不是原发起方一个说了算。而针对 <code>只读（RO）事务</code> 则不需要经过组内同意，直接 COMMIT 即可。</p><p>在一个复制组内有多个节点组成，它们各自维护了自己的数据副本，并且在一致性协议层实现了原子消息和全局有序消息，从而保证组内数据的一致性。</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213064.png" style="zoom:80%;" /><p>MGR 将 MySQL 带入了数据强一致性的时代，是一个划时代的创新，其中一个重要的原因就是MGR 是基于<code>Paxos </code>协议的。Paxos 算法是由 2013 年的图灵奖获得者 Leslie Lamport 于 1990 年提出的，有关这个算法的决策机制可以搜一下。事实上，Paxos 算法提出来之后就作为 <code>分布式一致性算法</code> 被广泛应用，比如Apache 的 ZooKeeper 也是基于 Paxos 实现的。</p><h2 id="5、知识延伸"><a href="#5、知识延伸" class="headerlink" title="5、知识延伸"></a>5、知识延伸</h2><p>在主从架构的配置中，如果想要采取读写分离的策略，我们可以<code>自己编写程序</code> ，也可以通过<code>第三方的中间件</code>来实现。</p><p>自己编写程序的好处就在于比较自主，我们可以自己判断哪些查询在从库上来执行，针对实时性要求高的需求，我们还可以考虑哪些查询可以在主库上执行。同时，程序直接连接数据库，减少了中间件层，相当于减少了性能损耗。</p><p>采用中间件的方法有很明显的优势，功能强大 ，使用简单 。但因为在客户端和数据库之间增加了中间件层会有一些性能损耗，同时商业中间件也是有使用成本的。我们也可以考虑采取一些优秀的开源工具。</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011213662.png" alt="image-20231001113303910" style="zoom:80%;" /><p>① Cobar 属于阿里B2B事业群，始于2008年，在阿里服役3年多，接管3000+个MySQL数据库的schema,集群日处理在线SQL请求50亿次以上。由于Cobar发起人的离职，Cobar停止维护。</p><p>② Mycat 是开源社区在阿里cobar基础上进行二次开发，解决了cobar存在的问题，并且加入了许多新的功能在其中。青出于蓝而胜于蓝。</p><p>③ OneProxy 基于MySQL官方的proxy思想利用c语言进行开发的，OneProxy是一款商业 收费 的中间件。舍弃了一些功能，专注在性能和稳定性上 。</p><p>④ kingshard 由小团队用go语言开发，还需要发展，需要不断完善。</p><p>⑤ Vitess 是Youtube生产在使用，架构很复杂。不支持MySQL原生协议，使用 需要大量改造成本。</p><p>⑥ Atlas 是360团队基于mysql proxy改写，功能还需完善，高并发下不稳定。</p><p>⑦ MaxScale 是mariadb（MySQL原作者维护的一个版本） 研发的中间件</p><p>⑧ MySQLRoute 是MySQL官方Oracle公司发布的中间件</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011212160.png"></p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011214183.png" style="zoom:80%;" /><p>主备切换：</p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202310011214840.png" alt="image-20231001113941363" style="zoom:80%;" /><ul><li>主动切换</li><li>被动切换</li><li>如何判断主库出问题了？如何解决过程中的数据不一致性问题？</li></ul><blockquote><p>以上这些使我们后序开发和工作中需要进行不断扩展和学习的~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
